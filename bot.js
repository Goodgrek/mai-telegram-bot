const { Telegraf, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
const { Pool } = require('pg');
const cron = require('node-cron');
console.log('üöÄ –ó–∞–ø—É—Å–∫ MAI Bot...');
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:');
console.log('  BOT_TOKEN:', process.env.BOT_TOKEN ? '‚úÖ' : '‚ùå');
console.log('  DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ' : '‚ùå');
console.log('  NEWS_CHANNEL_ID:', process.env.NEWS_CHANNEL_ID || '‚ùå');
console.log('  CHAT_CHANNEL_ID:', process.env.CHAT_CHANNEL_ID || '‚ùå');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  NEWS_CHANNEL_ID: process.env.NEWS_CHANNEL_ID,
  CHAT_CHANNEL_ID: process.env.CHAT_CHANNEL_ID,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  AIRDROP_REWARD: 5000,
  AIRDROP_LIMIT: 20000,
  WARN_LIMIT: 3,
  REPORT_MUTE_LIMIT: 10,
  REPORT_BAN_LIMIT: 20,
  ALLOWED_DOMAINS: ['miningmai.com', 'www.miningmai.com', 't.me'],
  CURRENT_PRESALE_STAGE: 1,
};

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL ? { rejectUnauthorized: false } : false
});

const PRESALE_STAGES = [
  { stage: 1, price: 0.0005, discount: 80, allocation: 1.8, tokens: '126M' },
  { stage: 2, price: 0.0006, discount: 76, allocation: 3.2, tokens: '224M' },
  { stage: 3, price: 0.0007, discount: 72, allocation: 7.4, tokens: '518M' },
  { stage: 4, price: 0.0008, discount: 68, allocation: 9.2, tokens: '644M' },
  { stage: 5, price: 0.0011, discount: 56, allocation: 13.2, tokens: '924M' },
  { stage: 6, price: 0.0012, discount: 52, allocation: 16.2, tokens: '1.134B' },
  { stage: 7, price: 0.0013, discount: 48, allocation: 14.4, tokens: '1.008B' },
  { stage: 8, price: 0.0014, discount: 44, allocation: 11.8, tokens: '826M' },
  { stage: 9, price: 0.0015, discount: 40, allocation: 8.8, tokens: '616M' },
  { stage: 10, price: 0.0016, discount: 36, allocation: 6.5, tokens: '455M' },
  { stage: 11, price: 0.0017, discount: 32, allocation: 3.5, tokens: '245M' },
  { stage: 12, price: 0.0018, discount: 28, allocation: 2.5, tokens: '175M' },
  { stage: 13, price: 0.0019, discount: 24, allocation: 1.0, tokens: '70M' },
  { stage: 14, price: 0.0020, discount: 20, allocation: 0.5, tokens: '35M' },
];

async function checkSubscription(bot, channelId, userId) {
  try {
    const member = await bot.telegram.getChatMember(channelId, userId);
    return ['member', 'administrator', 'creator'].includes(member.status);
  } catch {
    return false;
  }
}

function isValidSolanaAddress(address) {
  return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
}

function containsBadContent(text) {
  const patterns = [
    /casino/i, /porn/i, /18\+/i, /xxx/i,
    /buy.*get.*free/i, /send.*receive/i,
    /seed\s*phrase/i, /private\s*key/i, /recovery\s*phrase/i,
    /dm\s*me/i, /write\s*me/i, /contact\s*admin/i,
  ];
  return patterns.some(p => p.test(text));
}

function containsSpamLinks(text) {
  const urlRegex = /(https?:\/\/[^\s]+)/g;
  const urls = text.match(urlRegex) || [];
  for (const url of urls) {
    if (!config.ALLOWED_DOMAINS.some(d => url.includes(d))) return true;
  }
  return false;
}

async function registerUser(userId, username, firstName, walletAddress) {
  try {
    console.log('üîç registerUser –≤—ã–∑–≤–∞–Ω:', { userId, username, firstName, walletAddress: walletAddress.substring(0, 20) });
    
    const countResult = await pool.query('SELECT COUNT(*) FROM telegram_users WHERE position IS NOT NULL');
    const currentCount = parseInt(countResult.rows[0].count);
    
    console.log('üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', currentCount, '–õ–∏–º–∏—Ç:', config.AIRDROP_LIMIT);
    
    if (currentCount >= config.AIRDROP_LIMIT) {
      return { success: false, reason: 'limit_reached' };
    }
    
    // –û–ë–ù–û–í–õ–Ø–ï–ú –ò–õ–ò –°–û–ó–î–ê–ï–ú
    const result = await pool.query(
      `INSERT INTO telegram_users (telegram_id, username, first_name, wallet_address, position, awaiting_wallet, registered_at)
       VALUES ($1, $2, $3, $4, $5, false, NOW())
       ON CONFLICT (telegram_id) 
       DO UPDATE SET 
         username = $2, 
         first_name = $3, 
         wallet_address = $4, 
         position = $5, 
         awaiting_wallet = false,
         registered_at = COALESCE(telegram_users.registered_at, NOW())
       RETURNING *`,
      [userId, username, firstName, walletAddress, currentCount + 1]
    );
    
    console.log('‚úÖ registerUser —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.rows[0]);
    
    return { success: true, user: result.rows[0] };
  } catch (error) {
    console.error('‚ùå registerUser –û–®–ò–ë–ö–ê:', error.message);
    console.error('Stack:', error.stack);
    return { success: false, reason: 'database_error' };
  }
}

async function getUserStatus(userId) {
  try {
    const result = await pool.query('SELECT * FROM telegram_users WHERE telegram_id = $1', [userId]);
    return result.rows[0] || null;
  } catch {
    return null;
  }
}

async function updateSubscription(userId, newsSubscribed, chatSubscribed) {
  try {
    await pool.query(
      `UPDATE telegram_users 
       SET is_subscribed_news = $1, is_subscribed_chat = $2, last_check = NOW()
       WHERE telegram_id = $3`,
      [newsSubscribed, chatSubscribed, userId]
    );
  } catch {}
}

async function addWarning(userId) {
  try {
    const result = await pool.query(
      `UPDATE telegram_users SET warnings = warnings + 1 WHERE telegram_id = $1 RETURNING warnings`,
      [userId]
    );
    return result.rows[0]?.warnings || 0;
  } catch {
    return 0;
  }
}

async function addReport(reporterId, reportedUserId, chatId) {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∂–∞–ª–æ–±—É
    await pool.query(
      `INSERT INTO user_reports (reporter_id, reported_user_id, chat_id) 
       VALUES ($1, $2, $3) 
       ON CONFLICT (reporter_id, reported_user_id) DO NOTHING`,
      [reporterId, reportedUserId, chatId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
    await pool.query(
      `UPDATE telegram_users SET reports_received = reports_received + 1 WHERE telegram_id = $1`,
      [reportedUserId]
    );
    
    // –°—á–∏—Ç–∞–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ï –∂–∞–ª–æ–±—ã
    const result = await pool.query(
      `SELECT COUNT(DISTINCT reporter_id) as unique_reports FROM user_reports WHERE reported_user_id = $1`,
      [reportedUserId]
    );
    
    return parseInt(result.rows[0].unique_reports);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ addReport:', error.message);
    return 0;
  }
}

async function banUser(userId) {
  try {
    await pool.query('UPDATE telegram_users SET banned = true WHERE telegram_id = $1', [userId]);
  } catch {}
}

async function muteUser(userId, hours = 24) {
  try {
    const muteUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
    await pool.query('UPDATE telegram_users SET muted_until = $1 WHERE telegram_id = $2', [muteUntil, userId]);
  } catch {}
}

async function removePosition(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(
      'SELECT position, username FROM telegram_users WHERE telegram_id = $1',
      [userId]
    );
    
    if (!userResult.rows[0]?.position) {
      return null; // –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å
    }
    
    const removedPosition = userResult.rows[0].position;
    const username = userResult.rows[0].username;
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é #${removedPosition} —É @${username} (ID: ${userId})`);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await pool.query(
      'UPDATE telegram_users SET position = NULL, wallet_address = NULL WHERE telegram_id = $1',
      [userId]
    );
    
    // –°–¥–≤–∏–≥–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    await pool.query(
      'UPDATE telegram_users SET position = position - 1 WHERE position > $1',
      [removedPosition]
    );
    
    console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è #${removedPosition} —É–¥–∞–ª–µ–Ω–∞, –æ—á–µ—Ä–µ–¥—å —Å–¥–≤–∏–Ω—É—Ç–∞`);
    return removedPosition;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ removePosition:', error.message);
    return null;
  }
}

async function incrementMuteCount(userId) {
  try {
    const result = await pool.query(
      `UPDATE telegram_users SET mute_count = mute_count + 1 WHERE telegram_id = $1 RETURNING mute_count`,
      [userId]
    );
    return result.rows[0]?.mute_count || 0;
  } catch {
    return 0;
  }
}

async function getMuteCount(userId) {
  try {
    const result = await pool.query(
      `SELECT mute_count FROM telegram_users WHERE telegram_id = $1`,
      [userId]
    );
    return result.rows[0]?.mute_count || 0;
  } catch {
    return 0;
  }
}

async function unbanUser(userId) {
  try {
    await pool.query('UPDATE telegram_users SET banned = false WHERE telegram_id = $1', [userId]);
  } catch {}
}

async function unmuteUser(userId) {
  try {
    await pool.query('UPDATE telegram_users SET muted_until = NULL WHERE telegram_id = $1', [userId]);
  } catch {}
}

async function setAwaitingWallet(userId, awaiting) {
  try {
    const result = await pool.query(
      `INSERT INTO telegram_users (telegram_id, awaiting_wallet) 
       VALUES ($1, $2) 
       ON CONFLICT (telegram_id) 
       DO UPDATE SET awaiting_wallet = $2
       RETURNING *`,
      [userId, awaiting]
    );
    console.log('‚úÖ setAwaitingWallet —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.rows[0]);
    return result.rows[0];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ setAwaitingWallet:', error.message);
    throw error;
  }
}

async function sendToPrivate(ctx, messageText, options = {}) {
  if (ctx.chat.type === 'private') {
    // –£–∂–µ –≤ –õ–° - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    return ctx.reply(messageText, options);
  }
  
  // –í –≥—Ä—É–ø–ø–µ - –ú–û–õ–ß–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°, –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
  try {
    await ctx.telegram.sendMessage(ctx.from.id, messageText, options);
    // –ù–ò–ß–ï–ì–û –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í –ì–†–£–ü–ü–£!
  } catch (error) {
    // –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–° - —é–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∫–Ω–æ–ø–∫—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì± Start Bot', `https://t.me/${ctx.botInfo.username}?start=${ctx.message.text.slice(1).replace('@' + ctx.botInfo.username, '')}`)]
    ]);
    await ctx.reply(
      `‚ö†Ô∏è Please start the bot first:`,
      { ...keyboard, reply_to_message_id: ctx.message.message_id }
    );
  }
}

const bot = new Telegraf(config.BOT_TOKEN);

bot.use(async (ctx, next) => {
  if (ctx.from?.is_bot) return;
  if (ctx.from?.id === 1087968824) return;
  return next();
});

bot.catch((err, ctx) => {
  return;
});

bot.start(async (ctx) => {
  console.log('‚úÖ /start –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id, ctx.from.username, '—Ç–∏–ø —á–∞—Ç–∞:', ctx.chat.type);
  
  const welcomeMsg = `üöÄ WELCOME TO MAI PROJECT!

The Future of Decentralized AI is Here

MAI is revolutionizing the intersection of artificial intelligence and blockchain technology. We're building a decentralized AI platform that belongs to the community - powered by you, governed by you, owned by you.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ PRESALE INFORMATION
14 stages with up to 80% discount
View details: /presale

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ MEGA REWARDS PROGRAM

Community Airdrop: 5,000 MAI
- First 20,000 members only!
- Command: /airdrop

Presale Airdrop: Up to 1,000,000 MAI
- Complete tasks during presale
- Command: /tasks

Airdrop NFT program (1,400 NFTs)
- Complete tasks during presale
- Command: /nftairdrop

Referral Program: Earn USDT
- $500,000 reward pool
- Command: /referral

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã ESSENTIAL COMMANDS

/presale - View all presale stages
/nft - NFT reward levels
/tasks - Presale airdrop program
/referral - Earn USDT rewards
/airdrop - Register for community airdrop
/nftairdrop - Airdrop NFT program (1,400 NFTs)
/status - Check your status
/faq - Frequently asked questions
/rules - Community rules
/report - Report rule violations (reply to message)
/help - Full command list

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üé® GET OUR STICKERS!
Express yourself with MAI stickers
üëâ https://t.me/addstickers/MAImining

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è CRITICAL REQUIREMENTS
To qualify for ANY rewards, you MUST:
‚úÖ Subscribe to @mai_news
‚úÖ Stay in community chat until listing
‚úÖ Follow all community rules

Unsubscribing = Automatic disqualification

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Website: https://miningmai.com
üì± Join the revolution. Build the future.

Let's decentralize AI together! ü§ñ‚ö°`;
  
  try {
    // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    await sendToPrivate(ctx, welcomeMsg);
    console.log('‚úÖ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /start:', error.message);
  }
});

bot.command('airdrop', async (ctx) => {
  console.log('‚úÖ /airdrop –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id, ctx.from.username);
  
  const userId = ctx.from.id;
  const username = ctx.from.username || 'no_username';
  const firstName = ctx.from.first_name;
  
  try {
    const userStatus = await getUserStatus(userId);
    console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userStatus);
    
    if (userStatus?.banned) {
      return sendToPrivate(ctx, '‚ùå You are banned and cannot participate in the airdrop.');
    }
    
    if (userStatus?.position && userStatus?.wallet_address) {
      return sendToPrivate(
        ctx,
        `‚úÖ *You're Already Registered!*\n\n` +
        `üé´ Position: *#${userStatus.position}* of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
        `üéÅ Reward: *${config.AIRDROP_REWARD.toLocaleString()} MAI*\n` +
        `üíº Wallet: \`${userStatus.wallet_address}\`\n\n` +
        `Use /status to check your participation details.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, userId);
    console.log('üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏:', newsSubscribed);
    
    if (!newsSubscribed) {
      return sendToPrivate(
        ctx,
        `‚ùå *Subscription Required!*\n\n` +
        `You must subscribe to our news channel first:\n` +
        `üëâ @mai_news\n\n` +
        `After subscribing, run /airdrop again.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, userId);
    console.log('üí¨ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç:', chatSubscribed);
    
    if (!chatSubscribed) {
      return sendToPrivate(ctx, '‚ùå You must be a member of our community chat to participate!');
    }
    
    await setAwaitingWallet(userId, true);
    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_wallet –¥–ª—è:', userId);
    
    await sendToPrivate(
  ctx,
  `üéÅ AIRDROP REGISTRATION\n\n` +  // –£–ë–†–ê–õ–ò *
  `You are eligible!\n\n` +  // –£–ë–†–ê–õ–ò –∞–ø–æ—Å—Ç—Ä–æ—Ñ
  
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  
  `üéØ Reward: ${config.AIRDROP_REWARD.toLocaleString()} MAI\n` +
  `üë• Spots: ${config.AIRDROP_LIMIT.toLocaleString()} (limited)\n` +
  `üí∞ Cost: FREE\n` +
  `üìÖ Distribution: 10 days after listing\n\n` +
  
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  
  `üìù Next: Send Solana Wallet\n\n` +  // –£–ë–†–ê–õ–ò *
  
  `Example:\n` +
  `7xK3N9kZXxY2pQwM5vH8Sk1wmVE5...\n\n` +
  
  `Supported wallets:\n` +
  `‚Ä¢ Phantom, Solflare, Trust\n` +
  `‚Ä¢ Binance Web3, MetaMask\n` +
  `‚Ä¢ Any Solana wallet\n\n` +
  
  `‚ö†Ô∏è Double-check address!\n` +
  `Wrong address = Lost tokens\n\n` +
  
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  
  `üîí Keep Position:\n` +  // –£–ë–†–ê–õ–ò *
  `Stay in @mai_news and this chat\n` +  // –£–ë–†–ê–õ–ò "+"
  `Daily check 00:00 UTC\n` +
  `Unsubscribe = Position lost!`
  // –£–ë–†–ê–õ–ò { parse_mode: 'Markdown' }
);
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /airdrop:', error.message);
    await sendToPrivate(ctx, '‚ùå An error occurred. Please try again later.');
  }
});

bot.command('nftairdrop', async (ctx) => {
  console.log('‚úÖ /nftairdrop –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id);
  
  const text = `üé® AIRDROP NFT PROGRAM

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

What is Airdrop NFT?

Airdrop NFTs are identical to Silver NFTs in value and utility, but can only be earned through special task completion. This is your unique opportunity to obtain this premium collectible by simply completing straightforward community challenges!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

How to Earn Airdrop NFT:

- Stage Competition: Each presale stage (1-14) awards 100 Airdrop NFTs
- Qualifying Purchase: Make minimum 10,000 MAI token purchase during any active stage
- First Come Basis: First 100 unique users per stage who meet purchase requirement win NFT
- One Per Wallet: Each wallet can win only one Airdrop NFT during entire presale period
- Automatic Allocation: NFTs are assigned immediately after stage's 100 winners determined
- Total Supply: 1,400 Airdrop NFTs distributed across all 14 stages

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Claiming Your NFT:

- Claim Availability: After official MAI token listing announcement
- Claim Cost: Approximately 0.03 SOL for network fees
- Claim Process: Access through your dashboard after listing goes live

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Airdrop NFT Benefits:

‚úÖ Early Mining Access: +2 months
‚úÖ Governance Voting: 6 months
‚úÖ Forever Mining Bonus: +10%

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è Important Disclaimer:

Anti-Fraud Protection: We reserve the right to exclude any participant from the Airdrop NFT giveaway if we suspect fraudulent activity, manipulation, or violation of program terms.

This includes but is not limited to:
- Multiple wallet addresses
- Coordinated timing manipulation
- Bot activity or wash trading
- Fake transactions
- Any attempt to artificially secure a position among first 100 winners

Eligibility Verification: All winning purchases will be verified for authenticity and compliance with minimum requirements. Invalid or suspicious transactions will be disqualified.

All decisions regarding winner eligibility and NFT allocation are final and at our sole discretion.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê More info: https://miningmai.com
üì± Stay connected: @mai_news`;

  try {
    await sendToPrivate(ctx, text);
    console.log('‚úÖ /nftairdrop –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /nftairdrop:', error.message);
  }
});

bot.command('status', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    const userStatus = await getUserStatus(userId);
    
    if (!userStatus?.position) {
      return sendToPrivate(
        ctx,
        `‚ùå *Not Registered*\n\n` +
        `You haven't registered for the community airdrop yet.\n\n` +
        `Use /airdrop to register and claim your ${config.AIRDROP_REWARD.toLocaleString()} MAI tokens!`,
        { parse_mode: 'Markdown' }
      );
    }
    
    const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, userId);
    const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, userId);
    
    if (newsSubscribed !== userStatus.is_subscribed_news || chatSubscribed !== userStatus.is_subscribed_chat) {
      await updateSubscription(userId, newsSubscribed, chatSubscribed);
    }
    
    const isActive = newsSubscribed && chatSubscribed && !userStatus.banned;
    const rewardAmount = isActive ? config.AIRDROP_REWARD.toLocaleString() : '0';
    const statusEmoji = isActive ? '‚úÖ' : '‚ùå';
    const statusText = isActive ? 'ACTIVE' : 'INACTIVE';
    
    let warnings = '';
    if (!newsSubscribed) warnings += '\n‚ö†Ô∏è Subscribe to @mai_news';
    if (!chatSubscribed) warnings += '\n‚ö†Ô∏è Join community chat';
    if (!userStatus.wallet_address) warnings += '\n‚ö†Ô∏è Wallet not linked';
    
    await sendToPrivate(
      ctx,
      `üìä *YOUR AIRDROP STATUS*\n\n` +
      `üë§ Username: @${userStatus.username}\n` +
      `üé´ Position: *#${userStatus.position}* of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
      `üìÖ Registered: ${new Date(userStatus.registered_at).toLocaleDateString()}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üì∫ *Subscriptions:*\n` +
      `${newsSubscribed ? '‚úÖ' : '‚ùå'} News Channel (@mai_news)\n` +
      `${chatSubscribed ? '‚úÖ' : '‚ùå'} Community Chat\n\n` +
      `üíº *Wallet:* ${userStatus.wallet_address ? `\`${userStatus.wallet_address}\`` : '‚ùå Not linked'}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `‚ö†Ô∏è Warnings: ${userStatus.warnings}/${config.WARN_LIMIT}\n` +
      `üìä Reports: ${userStatus.reports_received}\n` +
      `üö´ Status: ${statusEmoji} *${statusText}*\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üéÅ *Reward: ${rewardAmount} MAI*${warnings ? `\n\n*Action Required:*${warnings}` : ''}`,
      { parse_mode: 'Markdown' }
    );
  } catch {
    sendToPrivate(ctx, '‚ùå Error checking status. Try again later.');
  }
});

bot.command('presale', async (ctx) => {
  try {
    await sendToPrivate(ctx, getPresaleText());
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /presale:', error.message);
  }
});

bot.command('nft', async (ctx) => {
  try {
    await sendToPrivate(ctx, getNftText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /nft:', error.message);
  }
});

bot.command('tasks', async (ctx) => {
  try {
    await sendToPrivate(ctx, getTasksText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /tasks:', error.message);
  }
});

bot.command('referral', async (ctx) => {
  try {
    await sendToPrivate(ctx, getReferralText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /referral:', error.message);
  }
});

bot.command('faq', async (ctx) => {
  console.log('‚úÖ /faq –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id);
  try {
    await sendToPrivate(ctx, getFaqText());
    console.log('‚úÖ /faq –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /faq:', error.message);
  }
});

bot.command('rules', async (ctx) => {
  try {
    await sendToPrivate(ctx, getRulesText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /rules:', error.message);
  }
});

bot.command('help', async (ctx) => {
  const helpMsg = `
üÜò *MAI BOT COMMAND LIST*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ *REWARDS & AIRDROPS:*

/airdrop - Register for community airdrop (5,000 MAI)
/tasks - Presale airdrop program (up to 1M MAI)
/nftairdrop - Airdrop NFT program (1,400 NFTs)
/referral - Referral program ($500K USDT pool)
/status - Check your airdrop registration status

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *INFORMATION:*

/presale - All 14 presale stages with prices
/nft - NFT reward levels and bonuses
/faq - Frequently asked questions
/rules - Community guidelines

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üõ†Ô∏è *UTILITIES:*

/start - Welcome message & overview
/help - This command list
/report - Report rule violations (reply to message)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê *LINKS:*

Website: https://miningmai.com
News Channel: @mai_news
Community Chat: Join via website

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° *QUICK TIP:*
Make sure to stay subscribed to @mai_news and remain in the community chat to maintain eligibility for ALL rewards!

*Questions? Check /faq first!* üìö
`;
  
  try {
    await sendToPrivate(ctx, helpMsg, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /help:', error.message);
  }
});

bot.command('report', async (ctx) => {
  // –ö–æ–º–∞–Ω–¥–∞ /report —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø–µ
  if (ctx.chat.type === 'private') {
    return ctx.reply('‚ö†Ô∏è This command only works in group chats!');
  }
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to a violator\'s message and type /report');
  }
  
  const reportedUserId = ctx.message.reply_to_message.from.id;
  const reporterId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  if (reportedUserId === reporterId) {
    return ctx.reply('‚ùå You cannot report yourself!');
  }
  
  if (config.ADMIN_IDS.includes(reportedUserId)) {
    return ctx.reply('‚ùå You cannot report an administrator!');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
  const uniqueReports = await addReport(reporterId, reportedUserId, ctx.chat.id);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–æ–≤ —É —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
  const muteCount = await getMuteCount(reportedUserId);
  
  await ctx.reply(`‚úÖ Report accepted. User has ${uniqueReports} unique reports.`);
  
  // –õ–û–ì–ò–ö–ê –≠–°–ö–ê–õ–ê–¶–ò–ò:
  // 10 –∂–∞–ª–æ–± ‚Üí –ø–µ—Ä–≤—ã–π –º—É—Ç (24 —á–∞—Å–∞)
  // 20 –∂–∞–ª–æ–± ‚Üí –≤—Ç–æ—Ä–æ–π –º—É—Ç (7 –¥–Ω–µ–π)
  // 30 –∂–∞–ª–æ–± ‚Üí –ø–µ—Ä–º–∞–±–∞–Ω
  
  if (uniqueReports === 30) {
    // –¢–†–ï–¢–ò–ô –ü–û–†–û–ì - –ü–ï–†–ú–ê–ë–ê–ù
    await banUser(reportedUserId);
    try {
      await ctx.telegram.banChatMember(ctx.chat.id, reportedUserId);
      await ctx.reply(`üö´ User permanently banned after ${uniqueReports} reports from community.`);
    } catch (err) {
      await ctx.reply(`üö´ User marked as banned in database (${uniqueReports} reports).`);
    }
  } else if (uniqueReports === 20 && muteCount === 1) {
    // –í–¢–û–†–û–ô –ü–û–†–û–ì - –ú–£–¢ –ù–ê 7 –î–ù–ï–ô
    await muteUser(reportedUserId, 168); // 7 –¥–Ω–µ–π = 168 —á–∞—Å–æ–≤
    await incrementMuteCount(reportedUserId);
    try {
      await ctx.telegram.restrictChatMember(ctx.chat.id, reportedUserId, {
        until_date: Math.floor(Date.now() / 1000) + (168 * 3600),
        permissions: { can_send_messages: false }
      });
      await ctx.reply(`‚ö†Ô∏è User muted for 7 DAYS after ${uniqueReports} reports (2nd offense).`);
    } catch (err) {
      await ctx.reply(`‚ö†Ô∏è User marked as muted for 7 days in database (${uniqueReports} reports).`);
    }
  } else if (uniqueReports === 10 && muteCount === 0) {
    // –ü–ï–†–í–´–ô –ü–û–†–û–ì - –ú–£–¢ –ù–ê 24 –ß–ê–°–ê  
    await muteUser(reportedUserId, 24);
    await incrementMuteCount(reportedUserId);
    try {
      await ctx.telegram.restrictChatMember(ctx.chat.id, reportedUserId, {
        until_date: Math.floor(Date.now() / 1000) + 86400,
        permissions: { can_send_messages: false }
      });
      await ctx.reply(`‚ö†Ô∏è User muted for 24 hours after ${uniqueReports} reports (1st offense).`);
    } catch (err) {
      await ctx.reply(`‚ö†Ô∏è User marked as muted for 24 hours in database (${uniqueReports} reports).`);
    }
  }
});

bot.command('stats', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  try {
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE is_subscribed_news AND is_subscribed_chat) as active,
        COUNT(*) FILTER (WHERE wallet_address IS NOT NULL) as with_wallet,
        COUNT(*) FILTER (WHERE banned = true) as banned
      FROM telegram_users WHERE position IS NOT NULL
    `);
    
    const s = stats.rows[0];
    
    await ctx.reply(
      `üìä *AIRDROP STATISTICS*\n\n` +
      `üë• Total Registered: ${s.total}/${config.AIRDROP_LIMIT}\n` +
      `‚úÖ Active Participants: ${s.active}\n` +
      `üíº With Wallets: ${s.with_wallet}\n` +
      `üö´ Banned: ${s.banned}\n\n` +
      `üí∞ Total Distribution: ${(s.active * config.AIRDROP_REWARD).toLocaleString()} MAI`,
      { parse_mode: 'Markdown' }
    );
  } catch {
    ctx.reply('‚ùå Error retrieving statistics');
  }
});

bot.command('winners', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  try {
    const winners = await pool.query(`
      SELECT telegram_id, username, wallet_address, position
      FROM telegram_users
      WHERE is_subscribed_news = true 
        AND is_subscribed_chat = true
        AND wallet_address IS NOT NULL
        AND banned = false
        AND position IS NOT NULL
      ORDER BY position ASC
    `);
    
    let csv = 'Position,Telegram_ID,Username,Wallet_Address,Reward\n';
    winners.rows.forEach(w => {
      csv += `${w.position},${w.telegram_id},@${w.username},${w.wallet_address},${config.AIRDROP_REWARD}\n`;
    });
    
    await ctx.replyWithDocument({
      source: Buffer.from(csv),
      filename: `mai_airdrop_winners_${Date.now()}.csv`
    });
    
    await ctx.reply(
      `‚úÖ Exported ${winners.rows.length} eligible winners\n` +
      `üí∞ Total Distribution: ${(winners.rows.length * config.AIRDROP_REWARD).toLocaleString()} MAI`
    );
  } catch {
    ctx.reply('‚ùå Export error');
  }
});

// ===== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====

bot.command('mute', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type:\n/mute [hours]\n\nExample: /mute 48');
  }
  
  const targetUserId = ctx.message.reply_to_message.from.id;
  const args = ctx.message.text.split(' ');
  const hours = args[1] ? parseInt(args[1]) : 24;
  
  if (isNaN(hours) || hours < 1) {
    return ctx.reply('‚ùå Invalid hours! Use: /mute 24');
  }
  
  await muteUser(targetUserId, hours);
  await incrementMuteCount(targetUserId);
  
  try {
    await ctx.telegram.restrictChatMember(ctx.chat.id, targetUserId, {
      until_date: Math.floor(Date.now() / 1000) + (hours * 3600),
      permissions: { can_send_messages: false }
    });
    await ctx.reply(`‚úÖ User muted for ${hours} hours by admin.`);
  } catch (err) {
    await ctx.reply(`‚úÖ User marked as muted in database for ${hours} hours.`);
  }
});

bot.command('unmute', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /unmute');
  }
  
  const targetUserId = ctx.message.reply_to_message.from.id;
  
  await unmuteUser(targetUserId);
  
  try {
    await ctx.telegram.restrictChatMember(ctx.chat.id, targetUserId, {
      permissions: {
        can_send_messages: true,
        can_send_media_messages: true,
        can_send_polls: true,
        can_send_other_messages: true,
        can_add_web_page_previews: true
      }
    });
    await ctx.reply('‚úÖ User unmuted by admin.');
  } catch (err) {
    await ctx.reply('‚úÖ User unmarked as muted in database.');
  }
});

bot.command('ban', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /ban [reason]');
  }
  
  const targetUserId = ctx.message.reply_to_message.from.id;
  const reason = ctx.message.text.replace('/ban', '').trim() || 'Admin decision';
  
  await banUser(targetUserId);
  
  try {
    await ctx.telegram.banChatMember(ctx.chat.id, targetUserId);
    await ctx.reply(`üö´ User permanently banned by admin.\nReason: ${reason}`);
  } catch (err) {
    await ctx.reply(`üö´ User marked as banned in database.\nReason: ${reason}`);
  }
});

bot.command('unban', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /unban');
  }
  
  const targetUserId = ctx.message.reply_to_message.from.id;
  
  await unbanUser(targetUserId);
  
  try {
    await ctx.telegram.unbanChatMember(ctx.chat.id, targetUserId);
    await ctx.reply('‚úÖ User unbanned by admin.');
  } catch (err) {
    await ctx.reply('‚úÖ User unmarked as banned in database.');
  }
});

bot.command('userinfo', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /userinfo');
  }
  
  const targetUserId = ctx.message.reply_to_message.from.id;
  
  try {
    const userStatus = await getUserStatus(targetUserId);
    const reportsResult = await pool.query(
      `SELECT COUNT(DISTINCT reporter_id) as unique_reports FROM user_reports WHERE reported_user_id = $1`,
      [targetUserId]
    );
    const uniqueReports = parseInt(reportsResult.rows[0]?.unique_reports || 0);
    
    if (!userStatus) {
      return ctx.reply('‚ùå User not found in database.');
    }
    
    const info = `üìä *USER INFORMATION*\n\n` +
      `ID: \`${userStatus.telegram_id}\`\n` +
      `Username: @${userStatus.username || 'N/A'}\n` +
      `Name: ${userStatus.first_name}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `‚ö†Ô∏è Warnings: ${userStatus.warnings}\n` +
      `üìä Reports (total): ${userStatus.reports_received}\n` +
      `üë• Unique Reports: ${uniqueReports}\n` +
      `üîá Mute Count: ${userStatus.mute_count}\n` +
      `üö´ Banned: ${userStatus.banned ? 'YES' : 'NO'}\n` +
      `üîá Muted Until: ${userStatus.muted_until ? new Date(userStatus.muted_until).toLocaleString() : 'NO'}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üé´ Airdrop Position: ${userStatus.position ? `#${userStatus.position}` : 'Not registered'}\n` +
      `üíº Wallet: ${userStatus.wallet_address ? `\`${userStatus.wallet_address.substring(0, 20)}...\`` : 'Not linked'}`;
    
    await ctx.reply(info, { parse_mode: 'Markdown' });
  } catch (err) {
    console.error('‚ùå Error userinfo:', err);
    await ctx.reply('‚ùå Error fetching user info.');
  }
});

bot.command('pin', async (ctx) => {
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!
  if (!config.ADMIN_IDS.includes(ctx.from.id)) {
    return ctx.reply('‚ùå Only admins can use this command!');
  }
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –≥—Ä—É–ø–ø–µ!
  if (ctx.chat.type === 'private') {
    return ctx.reply('‚ùå This command works only in groups!');
  }
  
  const keyboard = Markup.inlineKeyboard([
    [
      Markup.button.url('üéÅ Airdrop (5K MAI)', `https://t.me/${ctx.botInfo.username}?start=airdrop`),
      Markup.button.url('üí∞ Buy MAI', 'https://miningmai.com')
    ],
    [
      Markup.button.callback('üìã Presale Stages', 'cmd_presale'),
      Markup.button.callback('üé® NFT Levels', 'cmd_nft')
    ],
    [
      Markup.button.callback('üéÅ Airdrop NFT', 'cmd_nftairdrop'),
      Markup.button.url('üé® Stickers', 'https://t.me/addstickers/MAImining')
    ],
    [
      Markup.button.callback('üéÅ Presale Airdrop', 'cmd_tasks'),
      Markup.button.callback('üíµ Referral', 'cmd_referral')
    ],
    [
      Markup.button.callback('‚ùì FAQ', 'cmd_faq'),
      Markup.button.callback('üìã Rules', 'cmd_rules')
    ],
    [Markup.button.url('üì± News Channel', 'https://t.me/mai_news')]
  ]);
  
  try {
    const pinMsg = await ctx.reply(
      `üöÄ *WELCOME TO MAI!*\n` +
      `_Decentralized AI Platform_\n\n` +
      
      `üéÅ *GET 5,000 MAI FREE!*\n` +
      `üíé $10+ value | First 20K\n` +
      `üìÖ After listing\n\n` +
      
      `*How:*\n` +
      `1. @mai_news\n` +
      `2. This chat\n` +
      `3. /airdrop\n` +
      `4. Stay\n\n` +
      
      `‚ö†Ô∏è Check 00:00 UTC\n` +
      `Unsubscribe = Lost!\n\n` +
      
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      
      `üí∞ *PRESALE*\n` +
      `7B tokens | 14 stages\n` +  // ‚Üê –û–ë–ù–û–í–õ–ï–ù–û!
      `80% OFF | $0.0005 ‚Üí $0.0020\n\n` +
      
      `üé® NFT: +5-20% forever\n` +
      `Buy $50+\n\n` +
      
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      
      `üéØ *MORE:*\n` +
      `üèÜ Presale: 1M MAI\n` +
      `üé® NFTs: 1,400\n` +
      `üíµ Referrals: USDT\n\n` +
      
      `/tasks /referral\n\n` +
      
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      
      `üìã *RULES:*\n` +
      `‚úÖ Discussions\n` +
      `‚ùå Spam, scams\n\n` +
      
      `‚ö†Ô∏è 3 warns = Ban\n` +
      `üìä 10 reports = Mute 24h\n` +
      `üìä 20 reports = Mute 7d\n` +
      `üìä 30 reports = Ban\n\n` +
      
      `Reply + /report\n\n` +
      
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      
      `üîí *KEEP REWARDS:*\n` +
      `‚úÖ @mai_news\n` +
      `‚úÖ This chat\n` +
      `‚úÖ Rules\n\n` +
      
      `Check: 00:00 UTC\n` +
      `Tokens: 10d after\n\n` +
      
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      
      `üé® MAI STICKERS!\n` +
      `Express yourself:\n` +
      `https://t.me/addstickers/MAImining\n\n` +
      
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      
      `üåê miningmai.com\n` +
      `üì± @mai_news\n\n` +
      
      `üëá *Click!* üëá`,
      { parse_mode: 'Markdown', ...keyboard }
    );
    
    await ctx.telegram.pinChatMessage(ctx.chat.id, pinMsg.message_id);
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /pin:', err.message);
    await ctx.reply(`‚ùå Error: ${err.message}\n\n‚ö†Ô∏è Make sure bot has "Pin Messages" permission!`);
  }
  
  await ctx.deleteMessage().catch(() => {});
});

bot.action(/cmd_(.+)/, async (ctx) => {
  const command = ctx.match[1];
  await ctx.answerCbQuery();
  
  const commands = {
  presale: () => sendToPrivate(ctx, getPresaleText()),
  nft: () => sendToPrivate(ctx, getNftText(), { parse_mode: 'Markdown' }),
  nftairdrop: async () => {
    const text = `üé® AIRDROP NFT PROGRAM\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nEarn exclusive Silver NFTs by completing tasks!\n\n100 NFTs per stage (1-14)\nMinimum purchase: 10,000 MAI\nFirst 100 users per stage win\n\nBenefits:\n‚úÖ +2 months early mining\n‚úÖ 6 months governance voting\n‚úÖ +10% mining bonus FOREVER\n\nTotal: 1,400 Airdrop NFTs\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nUse /nftairdrop for full details\nüåê https://miningmai.com`;
    await sendToPrivate(ctx, text);
  },
  tasks: () => sendToPrivate(ctx, getTasksText(), { parse_mode: 'Markdown' }),
  referral: () => sendToPrivate(ctx, getReferralText(), { parse_mode: 'Markdown' }),
  faq: () => sendToPrivate(ctx, getFaqText()),
  rules: () => sendToPrivate(ctx, getRulesText(), { parse_mode: 'Markdown' })
};
  
  if (commands[command]) {
    await commands[command]();
  }
});

bot.on('new_chat_members', async (ctx) => {
  const newMembers = ctx.message.new_chat_members.filter(m => !m.is_bot);
  
  if (newMembers.length === 0) return;
  
  console.log('üëã –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', newMembers.map(m => m.first_name).join(', '));
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('üéÅ Register for Airdrop', `https://t.me/${ctx.botInfo.username}?start=airdrop`)],
    [Markup.button.url('üì± Join News Channel', 'https://t.me/mai_news')]
  ]);
  
  const names = newMembers.map(m => m.first_name).join(', ');
  
  try {
    await ctx.reply(
      `üëã Welcome to MAI Project, ${names}!\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üéÅ Get 5,000 MAI Tokens FREE\n` +
      `First ${config.AIRDROP_LIMIT.toLocaleString()} members only!\n\n` +
      `‚ö†Ô∏è Requirements:\n` +
      `‚úÖ Subscribe to @mai_news\n` +
      `‚úÖ Stay in this chat until listing\n` +
      `‚úÖ Register your Solana wallet\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üìã Quick Start:\n` +
      `‚Ä¢ Click button below to register\n` +
      `‚Ä¢ Read /rules for community guidelines\n` +
      `‚Ä¢ Check /faq for answers\n` +
      `‚Ä¢ View /presale for token sale info\n\n` +
      `Click the button below to register:`,
      { ...keyboard }
    );
    console.log('‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error.message);
  }
});

function getPresaleText() {
  let text = 'üí∞ *MAI PRESALE - ALL 14 STAGES*\n\n';
  text += 'üéØ *Total Supply: 7,000,000,000 MAI*\n\n';
  text += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
  
  PRESALE_STAGES.forEach(s => {
    text += `*Stage ${s.stage}:* $${s.price} | ${s.discount}% OFF | ${s.tokens} MAI\n`;
  });
  
  text += '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
  text += 'üé® *NFT REWARD BONUSES:*\n\n';
  text += 'ü•â Bronze ($50-99): +5% mining FOREVER\n';
  text += 'ü•à Silver ($100-199): +10% mining FOREVER\n';
  text += 'ü•á Gold ($200-299): +15% mining FOREVER\n';
  text += 'üíé Platinum ($300+): +20% mining FOREVER\n\n';
  text += 'üåê Buy now: https://miningmai.com';
  return text;
}

function getNftText() {
  return `
üé® *MAI NFT REWARD LEVELS*

Exclusive NFTs for Presale participants with permanent benefits!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•â *BRONZE NFT*
Purchase: $50-99 in Presale

*Benefits:*
‚Ä¢ Early mining access: +1 month
‚Ä¢ Early DAO voting: 3 months
‚Ä¢ Mining bonus: *+5% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•à *SILVER NFT*
Purchase: $100-199 in Presale

*Benefits:*
‚Ä¢ Early mining access: +2 months
‚Ä¢ Early DAO voting: 6 months
‚Ä¢ Mining bonus: *+10% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•á *GOLD NFT*
Purchase: $200-299 in Presale

*Benefits:*
‚Ä¢ Early mining access: +3 months
‚Ä¢ Early DAO voting: 12 months
‚Ä¢ Mining bonus: *+15% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé *PLATINUM NFT*
Purchase: $300+ in Presale

*Benefits:*
‚Ä¢ Early mining access: +3 months
‚Ä¢ Early DAO voting: 12 months
‚Ä¢ Mining bonus: *+20% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Learn more: https://miningmai.com`;
}

function getTasksText() {
  return `
üéÅ *PRESALE AIRDROP PROGRAM*
*EARN UP TO 1,000,000 MAI!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Complete tasks during presale to participate in our massive *800,000,000 MAI* airdrop!

*Available Tasks (5 Total):*

1Ô∏è‚É£ Stages 1-3: Buy 10,000+ MAI
2Ô∏è‚É£ Stages 5-7: Buy 10,000+ MAI
3Ô∏è‚É£ Stages 10-14: Buy 10,000+ MAI
4Ô∏è‚É£ Earn Reward NFT
5Ô∏è‚É£ Invite 2+ Friends

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è Minimum 3/5 tasks required!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ *REWARDS:*
ü•á 5/5 tasks: 1,000,000 MAI
ü•à 4/5 tasks: 500,000 MAI
ü•â 3/5 tasks: 100,000 MAI

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Track progress: https://miningmai.com`;
}

function getReferralText() {
  return `
üí∞ *REFERRAL PROGRAM*
*EARN $500,000 USDT!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *REWARD LEVELS:*

*Level 1:* 1-9 referrals ‚Üí *1% bonus*
*Level 2:* 10-19 referrals ‚Üí *3% bonus*
*Level 3:* 20-29 referrals ‚Üí *5% bonus*
*Level 4:* 30+ referrals ‚Üí *7% bonus*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∏ Paid in USDT every Friday!

üåê Get your link: https://miningmai.com`;
}

function getFaqText() {
  return `‚ùì FREQUENTLY ASKED QUESTIONS

ü§ñ ABOUT MAI
MAI is a decentralized AI platform owned by the community. Unlike corporate AI, MAI belongs to everyone.

üí∞ PRESALE
- 14 stages: $0.0005 ‚Üí $0.0020
- Up to 80% discount
- Payment: SOL, USDT, USDC
- Listing: Q4 2025 on DEX/CEX

üéÅ COMMUNITY AIRDROP (5,000 MAI)
- First 20,000 members only
- FREE - just subscribe & register
- Daily check at 00:00 UTC
- Unsubscribe = Position lost
- Spot goes to next person
- Distribution: 10 days after listing

Requirements:
‚úÖ Subscribe @mai_news
‚úÖ Stay in chat until listing
‚úÖ Register wallet: /airdrop

üíº WALLET SETUP
- Use any Solana wallet
- Phantom (recommended)
- Solflare, Trust Wallet, Backpack
- NO KYC required

üé® NFT REWARDS
Buy presale ‚Üí Get permanent bonuses:
- $50-99: Bronze (+5% mining forever)
- $100-199: Silver (+10% forever)
- $200-299: Gold (+15% forever)
- $300+: Platinum (+20% forever)

‚õèÔ∏è MINING & STAKING
- Launch: Q4 2026
- Earn MAI with computing power
- NFT holders get bonus %
- Mobile app: 2027-2028

üí∏ REFERRAL PROGRAM
- Earn up to 7% in USDT
- $500K reward pool
- Paid weekly (Fridays)
- Link: https://miningmai.com

üó≥Ô∏è DAO GOVERNANCE
- Community votes on decisions
- NFT holders vote early
- Shape MAI's future together

‚ö†Ô∏è AVOID SCAMS
NEVER share:
‚ùå Private keys
‚ùå Seed phrases
‚ùå Passwords

Admins NEVER DM first!

üÜò SUPPORT
- Questions: Check /help
- Status: Use /status
- Issues: Ask admins in chat

üîó OFFICIAL LINKS
üåê https://miningmai.com
üì± @mai_news

Last Updated: October 2025`;
}

function getRulesText() {
  return `üìã COMMUNITY RULES

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ ALLOWED:
- MAI discussions
- Questions & help
- Crypto memes (appropriate)
- Constructive feedback

‚ùå FORBIDDEN:
- Spam & flooding
- Other project ads
- Scam links
- Harassment, hate speech
- Price manipulation
- NSFW content

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è WARNING SYSTEM:
1st: ‚ö†Ô∏è Warning
2nd: ‚ö†Ô∏è Final Warning
3rd: üö´ Permanent Ban

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä COMMUNITY REPORTS:
Use /report (reply to violator's message)

- 10 unique reports ‚Üí üîá 24h mute
- 20 unique reports ‚Üí üîá 7 days mute
- 30 unique reports ‚Üí üö´ Permanent ban

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üõ°Ô∏è AIRDROP ELIGIBILITY:

Breaking rules = Loss of rewards!

‚ùå Banned = No airdrop
‚ùå Unsubscribe = Position lost
‚ùå Leave chat = Position removed

To keep rewards:
‚úÖ Follow rules
‚úÖ Stay in @mai_news
‚úÖ Stay in this chat

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° TIPS:
- Read /faq before asking
- Be respectful
- Help newcomers
- Report violations
- Stay on-topic

üÜò NEED HELP?
Use /help or ask admins

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê https://miningmai.com
üì± @mai_news`;
}

bot.on(message('text'), async (ctx) => {
  if (config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', userId, '–¢–µ–∫—Å—Ç:', text.substring(0, 50));
  
  if (text.startsWith('/')) return;
  
  try {
    const userStatus = await getUserStatus(userId);
    console.log('üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(userStatus));
    
    // –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–®–ï–õ–¨–ö–ê - –ì–õ–ê–í–ù–û–ï!
    if (userStatus && userStatus.awaiting_wallet === true) {
      console.log('üíº –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–®–ï–õ–¨–ö–ê:', text);
      
      if (!isValidSolanaAddress(text)) {
        console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å Solana');
        return ctx.reply(
          `‚ùå *Invalid Solana Address!*\n\n` +
          `Solana addresses must be 32-44 characters (base58 format).\n\n` +
          `Please send a valid address or use /airdrop to start over.`,
          { parse_mode: 'Markdown' }
        );
      }
      
      const username = ctx.from.username || 'no_username';
      const firstName = ctx.from.first_name;
      
      console.log('üìù –í—ã–∑–æ–≤ registerUser –¥–ª—è:', userId);
      const registration = await registerUser(userId, username, firstName, text);
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify(registration));
      
      if (!registration.success) {
        if (registration.reason === 'limit_reached') {
          return ctx.reply(
            `‚ùå *Airdrop Full!*\n\n` +
            `Unfortunately, all ${config.AIRDROP_LIMIT.toLocaleString()} spots have been taken.\n\n` +
            `Follow @mai_news for future airdrop opportunities!`,
            { parse_mode: 'Markdown' }
          );
        }
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registration.reason);
        return ctx.reply('‚ùå Registration error. Please try /airdrop again.');
      }
      
      console.log('‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! Position:', registration.user.position);
      return ctx.reply(
  `üéâ *REGISTRATION SUCCESSFUL!*\n\n` +
  `Welcome to the MAI Community Airdrop!\n\n` +
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  `üé´ Your Position: *#${registration.user.position}* of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
  `üéÅ Your Reward: *${config.AIRDROP_REWARD.toLocaleString()} MAI*\n` +
  `üíº Wallet: \`${text}\`\n` +
  `üìÖ Distribution: Within 10 days after listing\n\n` +
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  `‚ö†Ô∏è *HOW TO KEEP YOUR POSITION:*\n\n` +
  `‚úÖ Stay subscribed to @mai_news\n` +
  `‚úÖ Remain in community chat\n` +
  `‚úÖ Follow all rules\n\n` +
  `üîç *Daily Check: 00:00 UTC*\n` +
  `If you unsubscribe, you will:\n` +
  `‚ùå Lose your position #${registration.user.position}\n` +
  `‚ùå Your spot goes to next person\n` +
  `‚ùå Cannot restore old position\n\n` +
  `Use /status anytime to verify your status.\n\n` +
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  `*Thank you for joining MAI! üöÄ*\n` +
  `Tokens will be distributed after official listing.`,
  { parse_mode: 'Markdown' }
);
    } 
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –Ω–µ –∂–¥–µ—Ç –∫–æ—à–µ–ª–µ–∫ - –≤—ã—Ö–æ–¥
    if (!userStatus) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }
    
    // –ú–û–î–ï–†–ê–¶–ò–Ø
    if (userStatus.banned) {
      await ctx.deleteMessage();
      return;
    }
    
    if (userStatus.muted_until && new Date() < new Date(userStatus.muted_until)) {
      await ctx.deleteMessage();
      return;
    }
    
    if (containsBadContent(text)) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);
      
      if (warnings >= config.WARN_LIMIT) {
        await banUser(userId);
        await ctx.telegram.banChatMember(ctx.chat.id, userId);
        return;
      }
      
      return ctx.reply(`‚ö†Ô∏è Forbidden content detected! Warning ${warnings}/${config.WARN_LIMIT}. Next violation = BAN.`);
    }
    
    if (containsSpamLinks(text)) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);
      
      if (warnings >= config.WARN_LIMIT) {
        await banUser(userId);
        await ctx.telegram.banChatMember(ctx.chat.id, userId);
        return;
      }
      
      return ctx.reply(`‚ö†Ô∏è Unauthorized links forbidden! Warning ${warnings}/${config.WARN_LIMIT}. Next violation = BAN.`);
    }
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error.message);
    console.error('Stack:', error.stack);
  }
});

cron.schedule('0 0 * * *', async () => {
  console.log('‚è∞ CRON: –ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (00:00 UTC)');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å –ø–æ–∑–∏—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    const users = await pool.query(
      'SELECT telegram_id, position, username FROM telegram_users WHERE position IS NOT NULL AND banned = false ORDER BY position ASC'
    );
    
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∑–∏—Ü–∏–µ–π`);
    
    let removedCount = 0;
    const removedUsers = []; // –ú–∞—Å—Å–∏–≤ –ø–æ—Ç–µ—Ä—è–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏—é
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users.rows) {
      try {
        const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, user.telegram_id);
        const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, user.telegram_id);
        
        // –ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –õ–Æ–ë–û–ì–û –∫–∞–Ω–∞–ª–∞ - –£–î–ê–õ–Ø–ï–ú –ü–û–ó–ò–¶–ò–Æ
        if (!newsSubscribed || !chatSubscribed) {
          console.log(`‚ö†Ô∏è –Æ–∑–µ—Ä ${user.telegram_id} (@${user.username}) –ø–æ–∑–∏—Ü–∏—è #${user.position} –æ—Ç–ø–∏—Å–∞–ª—Å—è!`);
          
          const removedPosition = await removePosition(user.telegram_id);
          
          if (removedPosition) {
            removedCount++;
            removedUsers.push({
              userId: user.telegram_id,
              position: removedPosition,
              newsSubscribed: newsSubscribed,
              chatSubscribed: chatSubscribed
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î
            await updateSubscription(user.telegram_id, newsSubscribed, chatSubscribed);
          }
        } else {
          // –ü–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          await updateSubscription(user.telegram_id, newsSubscribed, chatSubscribed);
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–∞ ${user.telegram_id}:`, err.message);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API)
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`‚úÖ CRON: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${removedCount}`);
    
    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    
    // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ü–û–¢–ï–†–Ø–õ –ø–æ–∑–∏—Ü–∏—é
    for (const removed of removedUsers) {
      try {
        await bot.telegram.sendMessage(
          removed.userId,
          `üö® *AIRDROP POSITION LOST!*\n\n` +
          `You lost your position #${removed.position} in the airdrop queue.\n\n` +
          `*Reason:* Unsubscribed from required channels\n` +
          `${!removed.newsSubscribed ? '‚ùå Not subscribed to @mai_news\n' : ''}` +
          `${!removed.chatSubscribed ? '‚ùå Not in community chat\n' : ''}\n\n` +
          `Your spot was given to the next person in line.\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `*Want to register again?*\n` +
          `1Ô∏è‚É£ Subscribe to @mai_news\n` +
          `2Ô∏è‚É£ Join community chat\n` +
          `3Ô∏è‚É£ Use /airdrop command\n\n` +
          `‚ö†Ô∏è You'll get a NEW position at the end of the queue.`,
          { parse_mode: 'Markdown' }
        );
        console.log(`‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${removed.userId} (–ø–æ—Ç–µ—Ä—è–ª #${removed.position})`);
      } catch (err) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É ${removed.userId}`);
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ü–û–ü–ê–õ –≤ —Ç–æ–ø-20000
    if (removedCount > 0) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫—Ç–æ —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–∑–∏—Ü–∏–∏ <= 20000 –ò –∫—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ø–∞–ª —Ç—É–¥–∞
        // (–∏—Ö position + removedCount –±—ã–ª–æ > 20000, –∞ —Å–µ–π—á–∞—Å <= 20000)
        const newWinners = await pool.query(
          `SELECT telegram_id, position, username 
           FROM telegram_users 
           WHERE position IS NOT NULL 
           AND position <= $1 
           AND position > $2
           ORDER BY position DESC`,
          [config.AIRDROP_LIMIT, config.AIRDROP_LIMIT - removedCount]
        );
        
        console.log(`üéâ –ù–æ–≤—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ç–æ–ø-${config.AIRDROP_LIMIT}: ${newWinners.rows.length}`);
        
        for (const winner of newWinners.rows) {
          try {
            await bot.telegram.sendMessage(
              winner.userId,
              `üéâ *CONGRATULATIONS!*\n\n` +
              `You're now in position *#${winner.position}*!\n\n` +
              `Someone lost their spot and you moved up into the top ${config.AIRDROP_LIMIT.toLocaleString()}.\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚úÖ *You're now eligible for the airdrop!*\n` +
              `üéÅ Reward: *${config.AIRDROP_REWARD.toLocaleString()} MAI tokens*\n\n` +
              `‚ö†Ô∏è *IMPORTANT:*\n` +
              `Stay subscribed to @mai_news and remain in the community chat until listing to keep your reward!\n\n` +
              `Use /status to check your details.`,
              { parse_mode: 'Markdown' }
            );
            console.log(`‚úâÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${winner.telegram_id} (–ø–æ–∑–∏—Ü–∏—è #${winner.position})`);
          } catch (err) {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É ${winner.telegram_id}`);
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 50));
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π:', err.message);
      }
    }
    
    console.log('üèÅ CRON: –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
    
  } catch (error) {
    console.error('‚ùå CRON: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  }
});

bot.launch({
  dropPendingUpdates: true
}).then(() => {
  if (config.ADMIN_IDS[0]) {
    bot.telegram.sendMessage(config.ADMIN_IDS[0], '‚úÖ MAI Bot v2.2 Professional - Group & PM modes active!').catch(() => {});
  }
}).catch(() => {
  process.exit(1);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));