const { Telegraf, Markup } = require('telegraf');
const { message } = require('telegraf/filters');
const { Pool } = require('pg');
const cron = require('node-cron');
console.log('üöÄ –ó–∞–ø—É—Å–∫ MAI Bot...');
console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö:');
console.log('  BOT_TOKEN:', process.env.BOT_TOKEN ? '‚úÖ' : '‚ùå');
console.log('  DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ' : '‚ùå');
console.log('  NEWS_CHANNEL_ID:', process.env.NEWS_CHANNEL_ID || '‚ùå');
console.log('  CHAT_CHANNEL_ID:', process.env.CHAT_CHANNEL_ID || '‚ùå');

const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  NEWS_CHANNEL_ID: process.env.NEWS_CHANNEL_ID,
  CHAT_CHANNEL_ID: process.env.CHAT_CHANNEL_ID,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id.trim())) : [],
  AIRDROP_REWARD: 5000,
  AIRDROP_LIMIT: 1,
  WARN_LIMIT: 3,
  REPORT_MUTE_LIMIT: 10,        // 10+ reports ‚Üí 24 hours mute (1st offense)
  REPORT_BAN_LIMIT: 20,          // 20+ reports ‚Üí 7 days mute (2nd offense)
  REPORT_PERMA_BAN_LIMIT: 30,    // 30+ reports ‚Üí permanent ban
  ALLOWED_DOMAINS: [
    'miningmai.com',
    'www.miningmai.com',
    'https://miningmai.com',
    'https://www.miningmai.com',
    't.me/mainingmai_news',
    't.me/mainingmai_chat',
    't.me/mai_verify_bot'
  ],
  CURRENT_PRESALE_STAGE: 1,
};

const ADMIN_MESSAGE_CONFIG = {
  COOLDOWN_MINUTES: 30,
  MAX_MESSAGES_PER_DAY: 3,
  BLOCK_DURATION_HOURS: 24,
  MIN_MESSAGE_LENGTH: 10,
  MAX_MESSAGE_LENGTH: 1000
};

// –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
function escapeMarkdown(text) {
  return text.replace(/([_*[\]()~`>#+\-=|{}.!\\])/g, '\\$1');
}

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: process.env.DATABASE_URL ? { rejectUnauthorized: false } : false
});

const PRESALE_STAGES = [
  { stage: 1, price: 0.0005, discount: 80, allocation: 1.8, tokens: '126M' },
  { stage: 2, price: 0.0006, discount: 76, allocation: 3.2, tokens: '224M' },
  { stage: 3, price: 0.0007, discount: 72, allocation: 7.4, tokens: '518M' },
  { stage: 4, price: 0.0008, discount: 68, allocation: 9.2, tokens: '644M' },
  { stage: 5, price: 0.0011, discount: 56, allocation: 13.2, tokens: '924M' },
  { stage: 6, price: 0.0012, discount: 52, allocation: 16.2, tokens: '1.134B' },
  { stage: 7, price: 0.0013, discount: 48, allocation: 14.4, tokens: '1.008B' },
  { stage: 8, price: 0.0014, discount: 44, allocation: 11.8, tokens: '826M' },
  { stage: 9, price: 0.0015, discount: 40, allocation: 8.8, tokens: '616M' },
  { stage: 10, price: 0.0016, discount: 36, allocation: 6.5, tokens: '455M' },
  { stage: 11, price: 0.0017, discount: 32, allocation: 3.5, tokens: '245M' },
  { stage: 12, price: 0.0018, discount: 28, allocation: 2.5, tokens: '175M' },
  { stage: 13, price: 0.0019, discount: 24, allocation: 1.0, tokens: '70M' },
  { stage: 14, price: 0.0020, discount: 20, allocation: 0.5, tokens: '35M' },
];

async function checkSubscription(bot, channelId, userId) {
  try {
    const member = await bot.telegram.getChatMember(channelId, userId);

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üîç checkSubscription: userId=${userId}, channelId=${channelId}, status="${member.status}", is_member=${member.is_member}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (['member', 'administrator', 'creator'].includes(member.status)) {
      console.log(`üîç checkSubscription —Ä–µ–∑—É–ª—å—Ç–∞—Ç: true (${member.status})`);
      return true;
    }

    // –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ 'restricted' –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (member.status === 'restricted') {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø—Ä–∞–≤–∞ (is_member)
      // –ï—Å–ª–∏ is_member = true - –∑–Ω–∞—á–∏—Ç –æ–Ω –í –≥—Ä—É–ø–ø–µ (–Ω–æ –∑–∞–º—É—á–µ–Ω)
      // –ï—Å–ª–∏ is_member = false - –∑–Ω–∞—á–∏—Ç –æ–Ω –í–´–®–ï–õ –∏–∑ –≥—Ä—É–ø–ø—ã (–Ω–æ –æ—Å—Ç–∞–ª—Å—è —Å—Ç–∞—Ç—É—Å restricted)
      const isMember = member.is_member !== false; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ

      console.log(`üîç checkSubscription: restricted, is_member=${member.is_member}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç=${isMember}`);

      return isMember;
    }

    // left –∏–ª–∏ kicked
    console.log(`üîç checkSubscription —Ä–µ–∑—É–ª—å—Ç–∞—Ç: false (${member.status})`);
    return false;

  } catch (error) {
    console.log(`üîç checkSubscription –û–®–ò–ë–ö–ê: userId=${userId}, channelId=${channelId}, error="${error.message}"`);
    return false;
  }
}

function isValidSolanaAddress(address) {
  return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
}

function containsBadContent(text) {
  const textLower = text.toLowerCase();
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 1: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –§–ò–®–ò–ù–ì –ò –°–ö–ê–ú (–ú–ì–ù–û–í–ï–ù–ù–´–ô –ë–ê–ù)
  // ============================================================
  const criticalScam = [
    // English - Seed phrases / Private keys
    /seed\s*phrase/i,
    /private\s*key/i,
    /recovery\s*phrase/i,
    /secret\s*phrase/i,
    /mnemonic\s*phrase/i,
    /12\s*word\s*phrase/i,
    /24\s*word\s*phrase/i,
    /wallet\s*password/i,
    /backup\s*phrase/i,
    
    // Russian - –°–∏–¥ —Ñ—Ä–∞–∑—ã / –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏
    /—Å–∏–¥\s*—Ñ—Ä–∞–∑/i,
    /—Å–∏–¥—Ñ—Ä–∞–∑/i,
    /—Å–µ–∫—Ä–µ—Ç–Ω[–∞—É—ã–µ]*\s*—Ñ—Ä–∞–∑/i,
    /–ø—Ä–∏–≤–∞—Ç–Ω[—ã–π–æ–º—É]*\s*–∫–ª—é—á/i,
    /–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏[—è–µ]\s*—Ñ—Ä–∞–∑/i,
    /12\s*—Å–ª–æ–≤/i,
    /24\s*—Å–ª–æ–≤/i,
    /–º–Ω–µ–º–æ–Ω–∏–∫/i,
    /–ø–∞—Ä–æ–ª—å\s*–∫–æ—à–µ–ª—å–∫/i,
    
    // Send & Receive scams
    /send\s*\d+.*receive\s*\d+/i,
    /send.*btc.*receive/i,
    /send.*eth.*receive/i,
    /send.*usdt.*receive/i,
    /–æ—Ç–ø—Ä–∞–≤—å.*–ø–æ–ª—É—á[–∏—à]/i,
    /–ø—Ä–∏—à–ª–∏.*–≤–µ—Ä–Ω[—É–µ]/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 2: –§–ï–ô–ö–û–í–´–ï –ê–î–ú–ò–ù–´ –ò –õ–ò–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø
  // ============================================================
  const fakeAdmins = [
    // English
    /dm\s*me/i,
    /message\s*me\s*private/i,
    /pm\s*me/i,
    /write\s*me\s*direct/i,
    /contact\s*admin/i,
    /message\s*admin/i,
    /i\s*am\s*admin/i,
    /official\s*admin/i,
    /support\s*team\s*dm/i,
    /whatsapp.*admin/i,
    /telegram.*admin/i,
    
    // Russian
    /–Ω–∞–ø–∏—à[–∏—É]\s*–º–Ω–µ\s*–≤\s*–ª–∏—á–∫/i,
    /–ø–∏—à[–∏—É]\s*–≤\s*–ª—Å/i,
    /—Å–≤—è–∂[–∏–µ]—Ç–µ—Å—å\s*—Å–æ\s*–º–Ω–æ–π/i,
    /–æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å\s*–≤\s*–ª—Å/i,
    /—è\s*–∞–¥–º–∏–Ω/i,
    /–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω[—ã–π–∞—è]\s*–∞–¥–º–∏–Ω/i,
    /–ø–æ–¥–¥–µ—Ä–∂–∫[–∞—É–∏]\s*–≤\s*–ª—Å/i,
    /–≤–∞—Ç—Å–∞–ø.*–∞–¥–º–∏–Ω/i,
    /—Ç–µ–ª–µ–≥—Ä–∞–º.*–∞–¥–º–∏–Ω/i,
    /–∫–æ–Ω—Ç–∞–∫—Ç.*–∞–¥–º–∏–Ω/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 3: –ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ü–†–ò–ë–´–õ–¨ –ò –°–ö–ê–ú-–°–•–ï–ú–´
  // ============================================================
  const guaranteedProfit = [
    // English
    /guaranteed\s*profit/i,
    /risk\s*free\s*profit/i,
    /100%\s*return/i,
    /double\s*your\s*(money|coin|crypto)/i,
    /multiply\s*your/i,
    /instant\s*profit/i,
    /easy\s*money/i,
    /get\s*rich\s*quick/i,
    /financial\s*freedom\s*now/i,
    
    // Russian
    /–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω[–Ω–∞—è]*\s*–ø—Ä–∏–±—ã–ª/i,
    /–±–µ–∑\s*—Ä–∏—Å–∫[–∞—É–æ–≤]/i,
    /100%\s*–≤–æ–∑–≤—Ä–∞—Ç/i,
    /—É–¥–≤–æ[–∏—Ç—å]*\s*(–¥–µ–Ω—å–≥|–º–æ–Ω–µ—Ç|–∫—Ä–∏–ø—Ç)/i,
    /—É–º–Ω–æ–∂[–∏—Ç—å]*\s*–≤–∞—à/i,
    /–±—ã—Å—Ç—Ä[—ã–µ]*\s*–¥–µ–Ω—å–≥/i,
    /–ª–µ–≥–∫[–∏–µ]*\s*–¥–µ–Ω—å–≥/i,
    /—Ä–∞–∑–±–æ–≥–∞—Ç–µ[—Ç—å]*/i,
    /—Ñ–∏–Ω–∞–Ω—Å–æ–≤[–∞—É–∞—è]\s*—Å–≤–æ–±–æ–¥/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 4: PUMP & DUMP –ì–†–£–ü–ü–´
  // ============================================================
  const pumpDump = [
    // English
    /pump\s*group/i,
    /pump\s*signal/i,
    /pumping\s*now/i,
    /pump\s*and\s*dump/i,
    /insider\s*info/i,
    /insider\s*trading/i,
    /buy\s*before\s*pump/i,
    /next\s*100x/i,
    /moon\s*soon/i,
    /to\s*the\s*moon/i,
    /next\s*shiba/i,
    /next\s*doge/i,
    
    // Russian
    /–ø–∞–º–ø\s*–≥—Ä—É–ø–ø/i,
    /–ø–∞–º–ø\s*—Å–∏–≥–Ω–∞–ª/i,
    /–ø–∞–º–ø–∏–º\s*—Å–µ–π—á–∞—Å/i,
    /–∏–Ω—Å–∞–π–¥–µ—Ä—Å–∫[–∞—è]*\s*–∏–Ω—Ñ/i,
    /–ø–æ–∫—É–ø[–∞–π]*\s*–¥–æ\s*–ø–∞–º–ø/i,
    /—Å–ª–µ–¥—É—é—â[–∏–π]*\s*100x/i,
    /–Ω–∞\s*–ª—É–Ω—É/i,
    /–ø–æ–ª–µ—Ç[–∏–º]*\s*–Ω–∞\s*–ª—É–Ω—É/i,
    /—Å–ª–µ–¥—É—é—â[–∏–π]*\s*(—à–∏–±–∞|doge)/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 5: –ö–ê–ó–ò–ù–û, –°–¢–ê–í–ö–ò, –ì–≠–ú–ë–õ–ò–ù–ì
  // ============================================================
  const gambling = [
    // English
    /casino/i,
    /online\s*casino/i,
    /betting\s*site/i,
    /sports\s*bet/i,
    /bet\s*now/i,
    /poker\s*online/i,
    /roulette/i,
    /slot\s*machine/i,
    /jackpot/i,
    
    // Russian
    /–∫–∞–∑–∏–Ω–æ/i,
    /–æ–Ω–ª–∞–π–Ω\s*–∫–∞–∑–∏–Ω–æ/i,
    /—Å—Ç–∞–≤–∫–∏\s*–Ω–∞\s*—Å–ø–æ—Ä—Ç/i,
    /–±—É–∫–º–µ–∫–µ—Ä/i,
    /—Å—Ç–∞–≤—å\s*—Å–µ–π—á–∞—Å/i,
    /–ø–æ–∫–µ—Ä\s*–æ–Ω–ª–∞–π–Ω/i,
    /—Ä—É–ª–µ—Ç–∫–∞/i,
    /–∏–≥—Ä–æ–≤[—ã–µ]*\s*–∞–≤—Ç–æ–º–∞—Ç/i,
    /–¥–∂–µ–∫–ø–æ—Ç/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 6: –í–ó–†–û–°–õ–´–ô –ö–û–ù–¢–ï–ù–¢ (NSFW)
  // ============================================================
  const adultContent = [
    // English
    /porn/i,
    /xxx/i,
    /18\+/i,
    /only\s*fans/i,
    /onlyfans/i,
    /escort\s*service/i,
    /dating\s*site/i,
    /meet\s*girls/i,
    /hot\s*girls/i,
    
    // Russian
    /–ø–æ—Ä–Ω–æ/i,
    /—Å–µ–∫—Å\s*–∑–Ω–∞–∫–æ–º—Å—Ç–≤/i,
    /—ç—Å–∫–æ—Ä—Ç\s*—É—Å–ª—É–≥/i,
    /—Å–∞–π—Ç\s*–∑–Ω–∞–∫–æ–º—Å—Ç–≤/i,
    /–ø–æ–∑–Ω–∞–∫–æ–º–ª—é—Å—å/i,
    /–≥–æ—Ä—è—á[–∏–µ]*\s*–¥–µ–≤—É—à–∫/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 7: –†–ï–ö–õ–ê–ú–ù–´–ô –°–ü–ê–ú
  // ============================================================
  const advertisingSpam = [
    // English
    /buy\s*\d+\s*get\s*\d+\s*free/i,
    /limited\s*time\s*offer/i,
    /act\s*now/i,
    /click\s*here.*win/i,
    /congratulations.*won/i,
    /claim\s*your\s*prize/i,
    /free\s*bitcoin/i,
    /free\s*money/i,
    /earn\s*\$\d+\s*daily/i,
    
    // Russian
    /–∫—É–ø–∏\s*\d+\s*–ø–æ–ª—É—á–∏\s*\d+/i,
    /–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω[–æ–µ]*\s*–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏/i,
    /–¥–µ–π—Å—Ç–≤—É–π\s*—Å–µ–π—á–∞—Å/i,
    /–∂–º–∏\s*—Å—é–¥–∞/i,
    /–ø–æ–∑–¥—Ä–∞–≤–ª—è[–µ–º]*.*–≤—ã–∏–≥—Ä/i,
    /–∑–∞–±–µ—Ä[–∏—É]*\s*–ø—Ä–∏–∑/i,
    /–±–µ—Å–ø–ª–∞—Ç–Ω[—ã–µ]*\s*–±–∏—Ç–∫–æ–∏–Ω/i,
    /–±–µ—Å–ø–ª–∞—Ç–Ω[—ã–µ]*\s*–¥–µ–Ω—å–≥/i,
    /–∑–∞—Ä–∞–±–æ—Ç[–æ–∫]*\s*\d+.*–≤\s*–¥–µ–Ω—å/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 8: –†–ï–§–ï–†–ê–õ–¨–ù–´–ô –°–ü–ê–ú
  // ============================================================
  const referralSpam = [
    // English
    /use\s*my\s*ref/i,
    /my\s*referral\s*code/i,
    /register\s*with\s*my\s*link/i,
    /join\s*using\s*my/i,
    /sign\s*up\s*here/i,
    
    // Russian
    /–∏—Å–ø–æ–ª—å–∑—É–π\s*–º–æ[–π—é–µ]\s*—Ä–µ—Ñ/i,
    /–º–æ[–π–µ]\s*—Ä–µ—Ñ–µ—Ä–∞–ª—å/i,
    /—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä[—É–π]*.*–ø–æ\s*–º–æ–µ–π/i,
    /–≤—Å—Ç—É–ø–∞–π\s*–ø–æ\s*–º–æ–µ–π/i,
    /—Ä–µ–≥–∞–π—Å—è\s*—Ç—É—Ç/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 9: –¢–û–ö–°–ò–ß–ù–û–°–¢–¨ –ò –û–°–ö–û–†–ë–õ–ï–ù–ò–Ø
  // ============================================================
  const toxicity = [
    // English (—É–º–µ—Ä–µ–Ω–Ω—ã–µ, –±–µ–∑ –∫—Ä–∞–π–Ω–æ—Å—Ç–µ–π)
    /fuck\s*you/i,
    /piece\s*of\s*shit/i,
    /go\s*to\s*hell/i,
    /stupid\s*team/i,
    /scam\s*project/i,
    /rug\s*pull/i,
    /retard/i,
    
    // Russian (—É–º–µ—Ä–µ–Ω–Ω—ã–µ, –±–µ–∑ –º–∞—Ç–∞)
    /–∏–¥–∏\s*–Ω–∞\s*—Ö—Ä–µ–Ω/i,
    /—Ç—É–ø–∞[—è–µ]\s*–∫–æ–º–∞–Ω–¥/i,
    /–ª–æ—Ö–æ—Ç—Ä–æ–Ω/i,
    /–∫–∏–¥–∞–ª–æ–≤/i,
    /—Ä–∞–∑–≤–æ–¥\s*–ø—Ä–æ–µ–∫—Ç/i,
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 10: –ö–û–ù–ö–£–†–ï–ù–¢–´ (–¥–æ–±–∞–≤—å —Å–≤–æ–∏—Ö!)
  // ============================================================
  const competitors = [
    // –ü—Ä–∏–º–µ—Ä—ã - –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    /competitor_project/i,
    /another_ai_coin/i,
    // /binance.*better/i,  // –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ —Å –∫—Ä—É–ø–Ω—ã–º–∏ –±–∏—Ä–∂–∞–º–∏!
  ];
  
  // ============================================================
  // –ö–ê–¢–ï–ì–û–†–ò–Ø 11: –ó–ê–ü–†–ï–©–ï–ù–ù–´–ï –ê–ö–¢–ò–í–ù–û–°–¢–ò
  // ============================================================
  const illegalActivity = [
    // –ù–∞—Ä–∫–æ—Ç–∏–∫–∏
    /buy\s*drugs/i,
    /selling\s*drugs/i,
    /–∫—É–ø–∏—Ç—å\s*–Ω–∞—Ä–∫–æ/i,
    
    // –û—Ä—É–∂–∏–µ
    /buy\s*gun/i,
    /–∫—É–ø–∏—Ç—å\s*–æ—Ä—É–∂–∏/i,
    
    // –û—Ç–º—ã–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–≥
    /money\s*laundering/i,
    /–æ—Ç–º—ã–≤–∞–Ω–∏[–µ]\s*–¥–µ–Ω–µ–≥/i,
  ];
  
  // ============================================================
  // –û–ë–™–ï–î–ò–ù–Ø–ï–ú –í–°–ï –ü–ê–¢–¢–ï–†–ù–´
  // ============================================================
  const allPatterns = [
    ...criticalScam,      // –°–∞–º–æ–µ –æ–ø–∞—Å–Ω–æ–µ - —Ñ–∏—à–∏–Ω–≥
    ...fakeAdmins,        // –§–µ–π–∫–æ–≤—ã–µ –∞–¥–º–∏–Ω—ã
    ...guaranteedProfit,  // –°–∫–∞–º-—Å—Ö–µ–º—ã
    ...pumpDump,          // Pump & Dump
    ...gambling,          // –ö–∞–∑–∏–Ω–æ
    ...adultContent,      // NSFW
    ...advertisingSpam,   // –°–ø–∞–º
    ...referralSpam,      // –†–µ—Ñ–µ—Ä–∞–ª–∫–∏
    ...toxicity,          // –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å
    ...competitors,       // –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
    ...illegalActivity,   // –ù–µ–ª–µ–≥–∞–ª—å–Ω–æ–µ
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  return allPatterns.some(pattern => pattern.test(textLower));
}

function containsSpamLinks(text) {
  const urlRegex = /(https?:\/\/[^\s]+)/g;
  const urls = text.match(urlRegex) || [];
  for (const url of urls) {
    if (!config.ALLOWED_DOMAINS.some(d => url.includes(d))) return true;
  }
  return false;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞
async function checkWalletUniqueness(walletAddress, excludeUserId = null) {
  try {
    let query = 'SELECT telegram_id, first_name, position FROM telegram_users WHERE wallet_address = $1';
    let params = [walletAddress];

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω excludeUserId, –∏—Å–∫–ª—é—á–∞–µ–º —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if (excludeUserId) {
      query += ' AND telegram_id != $2';
      params.push(excludeUserId);
    }

    const result = await pool.query(query, params);

    if (result.rows.length > 0) {
      return { isUnique: false, existingUser: result.rows[0] };
    }
    return { isUnique: true };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –∫–æ—à–µ–ª—å–∫–∞:', error);
    return { isUnique: true }; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  }
}

async function registerUser(userId, username, firstName, walletAddress) {
  try {
    console.log('üîç registerUser –≤—ã–∑–≤–∞–Ω:', { userId, username, firstName, walletAddress: walletAddress.substring(0, 20) });

    // –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–®–ï–õ–¨–ö–ê (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    const uniqueCheck = await checkWalletUniqueness(walletAddress, userId);
    if (!uniqueCheck.isUnique) {
      console.log(`‚ö†Ô∏è –ö–æ—à–µ–ª—ë–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${uniqueCheck.existingUser.telegram_id}`);
      return {
        success: false,
        reason: 'wallet_duplicate',
        existingPosition: uniqueCheck.existingUser.position
      };
    }

    // –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤
    const countResult = await pool.query('SELECT COUNT(*) FROM telegram_users WHERE position IS NOT NULL');
    const currentCount = parseInt(countResult.rows[0].count);
    const newPosition = currentCount + 1;

    console.log('üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', currentCount, '–õ–∏–º–∏—Ç:', config.AIRDROP_LIMIT, '–ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è:', newPosition);

    // –†–ï–ì–ò–°–¢–†–ò–†–£–ï–ú –í–°–ï–ì–î–ê! –î–∞–∂–µ –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω - —ç—Ç–æ –û–ß–ï–†–ï–î–¨!
    // –ü–æ–∑–∏—Ü–∏–∏ 1-20,000 = –ê–ò–†–î–†–û–ü
    // –ü–æ–∑–∏—Ü–∏–∏ 20,001+ = –û–ß–ï–†–ï–î–¨ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç –º–µ—Å—Ç–æ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–ø–∏—à–µ—Ç—Å—è)

    const result = await pool.query(
      `INSERT INTO telegram_users (telegram_id, username, first_name, wallet_address, position, awaiting_wallet, registered_at)
       VALUES ($1, $2, $3, $4, $5, NULL, NOW())
       ON CONFLICT (telegram_id)
       DO UPDATE SET
         username = $2,
         first_name = $3,
         wallet_address = $4,
         position = $5,
         awaiting_wallet = NULL,
         registered_at = COALESCE(telegram_users.registered_at, NOW())
       RETURNING *`,
      [userId, username, firstName, walletAddress, newPosition]
    );
    
    console.log('‚úÖ registerUser —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.rows[0]);
    
    return { success: true, user: result.rows[0] };
  } catch (error) {
    console.error('‚ùå registerUser –û–®–ò–ë–ö–ê:', error.message);
    console.error('Stack:', error.stack);
    return { success: false, reason: 'database_error' };
  }
}

async function getUserStatus(userId) {
  try {
    const result = await pool.query('SELECT * FROM telegram_users WHERE telegram_id = $1', [userId]);
    return result.rows[0] || null;
  } catch {
    return null;
  }
}

async function updateSubscription(userId, newsSubscribed, chatSubscribed) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è + –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä
    const oldData = await pool.query(
      'SELECT is_subscribed_news, is_subscribed_chat, referrer_id FROM telegram_users WHERE telegram_id = $1',
      [userId]
    );

    if (oldData.rows.length === 0) {
      // –Æ–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –ë–î - –ø—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º
      return;
    }

    const user = oldData.rows[0];
    const wasActive = user.is_subscribed_news && user.is_subscribed_chat;
    const isActiveNow = newsSubscribed && chatSubscribed;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    await pool.query(
      `UPDATE telegram_users
       SET is_subscribed_news = $1, is_subscribed_chat = $2, last_check = NOW()
       WHERE telegram_id = $3`,
      [newsSubscribed, chatSubscribed, userId]
    );

    // –ï—Å–ª–∏ —É —é–∑–µ—Ä–∞ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä –ò —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
    if (user.referrer_id && wasActive !== isActiveNow) {
      if (isActiveNow) {
        // –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –û–ë–ê –∫–∞–Ω–∞–ª–∞ ‚Üí —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç +1000
        await pool.query(
          'UPDATE telegram_users SET referral_reward_balance = referral_reward_balance + 1000 WHERE telegram_id = $1',
          [user.referrer_id]
        );

        console.log(`‚úÖ –†–µ—Ñ–µ—Ä–µ—Ä ${user.referrer_id} –ø–æ–ª—É—á–∏–ª +1000 MAI –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ${userId}`);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        try {
          await bot.telegram.sendMessage(user.referrer_id,
            `‚úÖ <b>Referral Reward!</b>\n\n` +
            `Your referral subscribed to both channels!\n` +
            `<b>+1,000 MAI</b> üéÅ\n\n` +
            `Check your stats: /referral`,
            { parse_mode: 'HTML' }
          );
        } catch (err) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${user.referrer_id}`);
        }

      } else if (wasActive) {
        // –û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ‚Üí —Ä–µ—Ñ–µ—Ä–µ—Ä —Ç–µ—Ä—è–µ—Ç -1000
        await pool.query(
          'UPDATE telegram_users SET referral_reward_balance = referral_reward_balance - 1000 WHERE telegram_id = $1',
          [user.referrer_id]
        );

        console.log(`‚ùå –†–µ—Ñ–µ—Ä–µ—Ä ${user.referrer_id} –ø–æ—Ç–µ—Ä—è–ª -1000 MAI (—Ä–µ—Ñ–µ—Ä–∞–ª ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è)`);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
        try {
          await bot.telegram.sendMessage(user.referrer_id,
            `‚ùå <b>Referral Lost!</b>\n\n` +
            `Your referral unsubscribed from channels.\n` +
            `<b>-1,000 MAI</b>\n\n` +
            `Check your stats: /referral`,
            { parse_mode: 'HTML' }
          );
        } catch (err) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É ${user.referrer_id}`);
        }
      }
    }

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ updateSubscription:', err);
  }
}

async function addWarning(userId) {
  try {
    const result = await pool.query(
      `UPDATE telegram_users SET warnings = warnings + 1 WHERE telegram_id = $1 RETURNING warnings`,
      [userId]
    );
    return result.rows[0]?.warnings || 0;
  } catch {
    return 0;
  }
}

async function addReport(reporterId, reportedUserId, chatId) {
  try {
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∂–∞–ª–æ–±—É
    await pool.query(
      `INSERT INTO user_reports (reporter_id, reported_user_id, chat_id) 
       VALUES ($1, $2, $3) 
       ON CONFLICT (reporter_id, reported_user_id) DO NOTHING`,
      [reporterId, reportedUserId, chatId]
    );
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
    await pool.query(
      `UPDATE telegram_users SET reports_received = reports_received + 1 WHERE telegram_id = $1`,
      [reportedUserId]
    );
    
    // –°—á–∏—Ç–∞–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ï –∂–∞–ª–æ–±—ã
    const result = await pool.query(
      `SELECT COUNT(DISTINCT reporter_id) as unique_reports FROM user_reports WHERE reported_user_id = $1`,
      [reportedUserId]
    );
    
    return parseInt(result.rows[0].unique_reports);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ addReport:', error.message);
    return 0;
  }
}

async function banUser(userId, reason = 'Violation of rules', chatId = null) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —é–∑–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏—è –≤ –∞–∏—Ä–¥—Ä–æ–ø–µ
    const userStatus = await getUserStatus(userId);
    const hadPosition = userStatus?.position;

    // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –∞–∏—Ä–¥—Ä–æ–ø–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (hadPosition) {
      await removePosition(userId);
      console.log(`üö´ –£–¥–∞–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è #${hadPosition} —É –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }

    // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –û–ë–ù–£–õ–Ø–ï–ú —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫
    await pool.query(
      'UPDATE telegram_users SET banned = true, is_subscribed_news = false, is_subscribed_chat = false WHERE telegram_id = $1',
      [userId]
    );
    console.log(`‚úÖ User ${userId} banned in DB, subscriptions set to false`);

    // –ë–∞–Ω–∏–º –≤ —á–∞—Ç–µ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chatId)
    if (chatId) {
      try {
        await bot.telegram.banChatMember(chatId, userId);
        console.log(`‚úÖ User ${userId} banned in chat ${chatId}`);
      } catch (err) {
        console.log(`‚ö†Ô∏è Cannot ban user ${userId} in chat ${chatId}: ${err.message}`);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const referralBalance = userStatus?.referral_reward_balance || 0;

      await bot.telegram.sendMessage(
        userId,
        `üö´ <b>YOU HAVE BEEN BANNED</b>\n\n` +
        `Status: <b>PERMANENTLY BANNED</b>\n\n` +
        `Reason: ${reason}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `You cannot participate in airdrops or other activities.${hadPosition ? `\n\nYour Community Airdrop position #${hadPosition} has been removed.` : ''}${referralBalance > 0 ? `\n\n‚ö†Ô∏è Your referral rewards (${referralBalance.toLocaleString()} MAI) will NOT be paid out.` : ''}\n\n` +
        `If you believe this is a mistake, contact support /admin.`,
        { parse_mode: 'HTML' }
      );
      console.log(`‚úÖ Ban notification sent to user ${userId}`);
    } catch (err) {
      console.log(`‚ö†Ô∏è Cannot send ban notification to user ${userId}: ${err.message}`);
    }
  } catch (error) {
    console.error(`‚ùå Error in banUser for ${userId}:`, error.message);
  }
}

async function muteUser(userId, hours = 24, reason = 'Violation of rules', chatId = null) {
  try {
    const muteUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
    await pool.query('UPDATE telegram_users SET muted_until = $1 WHERE telegram_id = $2', [muteUntil, userId]);

    // –ú—É—Ç–∏–º –≤ —á–∞—Ç–µ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chatId)
    if (chatId) {
      try {
        await bot.telegram.restrictChatMember(chatId, userId, {
          permissions: {
            can_send_messages: false,
            can_send_media_messages: false,
            can_send_polls: false,
            can_send_other_messages: false,
            can_add_web_page_previews: false,
            can_change_info: false,
            can_invite_users: false,
            can_pin_messages: false
          },
          until_date: Math.floor(muteUntil.getTime() / 1000) // Unix timestamp –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        });
        console.log(`‚úÖ User ${userId} muted in chat ${chatId} until ${muteUntil.toISOString()}`);
      } catch (err) {
        console.log(`‚ö†Ô∏è Cannot mute user ${userId} in chat ${chatId}: ${err.message}`);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await bot.telegram.sendMessage(
        userId,
        `‚ö†Ô∏è <b>YOU HAVE BEEN MUTED</b>\n\n` +
        `Duration: <b>${hours} hours</b>\n` +
        `Until: ${muteUntil.toLocaleString('en-GB', { timeZone: 'UTC' })} UTC\n\n` +
        `Reason: ${reason}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `Please follow the community rules.\n` +
        `Review them: /rules`,
        { parse_mode: 'HTML' }
      );
      console.log(`‚úÖ Mute notification sent to user ${userId}`);
    } catch (err) {
      console.log(`‚ö†Ô∏è Cannot send mute notification to user ${userId}: ${err.message}`);
    }
  } catch {}
}

async function removePosition(userId) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(
      'SELECT position, username FROM telegram_users WHERE telegram_id = $1',
      [userId]
    );
    
    if (!userResult.rows[0]?.position) {
      return null; // –ù–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ - –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å
    }
    
    const removedPosition = userResult.rows[0].position;
    const username = userResult.rows[0].username;
    console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é #${removedPosition} —É @${username} (ID: ${userId})`);
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –°–û–•–†–ê–ù–Ø–ï–ú –∫–æ—à–µ–ª—ë–∫
    await pool.query(
      'UPDATE telegram_users SET position = NULL WHERE telegram_id = $1',
      [userId]
    );
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —é–∑–µ—Ä–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–ø–æ–∑–∏—Ü–∏—è > 20,000) –ü–ï–†–ï–î —Å–¥–≤–∏–≥–æ–º
    const queueUsers = await pool.query(
      'SELECT telegram_id, position FROM telegram_users WHERE position > $1 ORDER BY position ASC',
      [config.AIRDROP_LIMIT]
    );

    // –°–¥–≤–∏–≥–∞–µ–º –≤—Å–µ—Ö, –∫—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ –Ω–µ–≥–æ
    await pool.query(
      'UPDATE telegram_users SET position = position - 1 WHERE position > $1',
      [removedPosition]
    );

    console.log(`‚úÖ –ü–æ–∑–∏—Ü–∏—è #${removedPosition} —É–¥–∞–ª–µ–Ω–∞, –æ—á–µ—Ä–µ–¥—å —Å–¥–≤–∏–Ω—É—Ç–∞`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —é–∑–µ—Ä–∞–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
    if (queueUsers.rows.length > 0) {
      console.log(`üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${queueUsers.rows.length} —é–∑–µ—Ä–∞–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏`);

      for (const user of queueUsers.rows) {
        const oldPosition = user.position;
        const newPosition = oldPosition - 1;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –ø–æ–ø–∞–ª –ª–∏ —é–∑–µ—Ä –≤ –∞–∏—Ä–¥—Ä–æ–ø?
        const movedToAirdrop = oldPosition > config.AIRDROP_LIMIT && newPosition <= config.AIRDROP_LIMIT;

        try {
          if (movedToAirdrop) {
            // üéâ –Æ–∑–µ—Ä –ø–æ–ø–∞–ª –≤ –∞–∏—Ä–¥—Ä–æ–ø –∏–∑ –æ—á–µ—Ä–µ–¥–∏!
            await bot.telegram.sendMessage(
              user.telegram_id,
              `üéâ <b>CONGRATULATIONS!</b>\n\n` +
              `You've moved from the waiting queue into the airdrop!\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `üé´ <b>Your New Position: #${newPosition}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
              `üéÅ <b>Your Reward: ${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n\n` +
              `Someone unsubscribed, and you automatically moved up!\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚ö†Ô∏è <b>Keep your position:</b>\n` +
              `‚úÖ Stay subscribed to @mainingmai_news\n` +
              `‚úÖ Stay subscribed to @mainingmai_chat\n\n` +
              `Use /status to check your details.`,
              { parse_mode: 'HTML' }
            );
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${user.telegram_id}: –æ—á–µ—Ä–µ–¥—å ‚Üí –∞–∏—Ä–¥—Ä–æ–ø (#${oldPosition} ‚Üí #${newPosition})`);
          } else if (oldPosition > config.AIRDROP_LIMIT) {
            // üìä –Æ–∑–µ—Ä –æ—Å—Ç–∞–ª—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏, –Ω–æ –ø–æ–∑–∏—Ü–∏—è —É–ª—É—á—à–∏–ª–∞—Å—å
            await bot.telegram.sendMessage(
              user.telegram_id,
              `üìä <b>Queue Position Updated</b>\n\n` +
              `Your position in the waiting queue has improved!\n\n` +
              `Old position: #${oldPosition.toLocaleString()}\n` +
              `<b>New position: #${newPosition.toLocaleString()}</b>\n\n` +
              `You're getting closer to the airdrop! üéØ\n` +
              `Current airdrop spots: ${config.AIRDROP_LIMIT.toLocaleString()}\n\n` +
              `Keep subscribed to both channels to maintain your queue position!`,
              { parse_mode: 'HTML' }
            );
            console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${user.telegram_id}: –æ—á–µ—Ä–µ–¥—å (#${oldPosition} ‚Üí #${newPosition})`);
          }
        } catch (notifyError) {
          console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É ${user.telegram_id}:`, notifyError.message);
        }
      }
    }

    return removedPosition;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ removePosition:', error.message);
    return null;
  }
}

async function incrementMuteCount(userId) {
  try {
    const result = await pool.query(
      `UPDATE telegram_users SET mute_count = mute_count + 1 WHERE telegram_id = $1 RETURNING mute_count`,
      [userId]
    );
    return result.rows[0]?.mute_count || 0;
  } catch {
    return 0;
  }
}

async function getMuteCount(userId) {
  try {
    const result = await pool.query(
      `SELECT mute_count FROM telegram_users WHERE telegram_id = $1`,
      [userId]
    );
    return result.rows[0]?.mute_count || 0;
  } catch {
    return 0;
  }
}

// ============================================================
// ADMIN MESSAGE SYSTEM
// ============================================================

async function canSendAdminMessage(userId) {
  try {
    const result = await pool.query(
      `SELECT * FROM admin_message_cooldown WHERE user_id = $1`,
      [userId]
    );
    
    const now = new Date();
    
    if (result.rows.length === 0) {
      return { canSend: true, reason: null };
    }
    
    const userData = result.rows[0];
    
    if (userData.blocked_until && new Date(userData.blocked_until) > now) {
      const unblockTime = new Date(userData.blocked_until).toLocaleString('en-GB', { timeZone: 'UTC' });
      return { 
        canSend: false, 
        reason: `blocked`,
        unblockTime: unblockTime
      };
    }
    
    if (userData.last_message_at) {
      const lastMessage = new Date(userData.last_message_at);
      const minutesSinceLastMessage = (now - lastMessage) / 1000 / 60;
      
      if (minutesSinceLastMessage < ADMIN_MESSAGE_CONFIG.COOLDOWN_MINUTES) {
        const minutesLeft = Math.ceil(ADMIN_MESSAGE_CONFIG.COOLDOWN_MINUTES - minutesSinceLastMessage);
        return { 
          canSend: false, 
          reason: 'cooldown',
          minutesLeft: minutesLeft
        };
      }
    }
    
    const dayAgo = new Date(now - 24 * 60 * 60 * 1000);
    const messagesResult = await pool.query(
      `SELECT COUNT(*) FROM admin_messages WHERE user_id = $1 AND created_at > $2`,
      [userId, dayAgo]
    );
    
    const messagesCount = parseInt(messagesResult.rows[0].count);
    
    if (messagesCount >= ADMIN_MESSAGE_CONFIG.MAX_MESSAGES_PER_DAY) {
      return { 
        canSend: false, 
        reason: 'daily_limit',
        limit: ADMIN_MESSAGE_CONFIG.MAX_MESSAGES_PER_DAY
      };
    }
    
    return { canSend: true, reason: null };
  } catch (error) {
    console.error('‚ùå Error checking admin message permission:', error);
    return { canSend: false, reason: 'error' };
  }
}

async function saveAdminMessage(userId, firstName, messageText) {
  try {
    await pool.query(
      `INSERT INTO admin_messages (user_id, first_name, message_text) VALUES ($1, $2, $3)`,
      [userId, firstName, messageText]
    );
    
    await pool.query(
      `INSERT INTO admin_message_cooldown (user_id, last_message_at, message_count)
       VALUES ($1, NOW(), 1)
       ON CONFLICT (user_id) 
       DO UPDATE SET 
         last_message_at = NOW(),
         message_count = admin_message_cooldown.message_count + 1`,
      [userId]
    );
    
    return true;
  } catch (error) {
    console.error('‚ùå Error saving admin message:', error);
    return false;
  }
}

async function blockUserFromAdmin(userId, hours) {
  try {
    const blockUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
    await pool.query(
      `INSERT INTO admin_message_cooldown (user_id, blocked_until)
       VALUES ($1, $2)
       ON CONFLICT (user_id)
       DO UPDATE SET blocked_until = $2`,
      [userId, blockUntil]
    );
    return true;
  } catch (error) {
    console.error('‚ùå Error blocking user from admin:', error);
    return false;
  }
}

async function unblockUserFromAdmin(userId) {
  try {
    await pool.query(
      `UPDATE admin_message_cooldown SET blocked_until = NULL WHERE user_id = $1`,
      [userId]
    );
    return true;
  } catch (error) {
    console.error('‚ùå Error unblocking user from admin:', error);
    return false;
  }
}

async function unbanUser(userId, chatId = null) {
  try {
    await pool.query('UPDATE telegram_users SET banned = false WHERE telegram_id = $1', [userId]);

    // –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤ —á–∞—Ç–µ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chatId)
    if (chatId) {
      try {
        await bot.telegram.unbanChatMember(chatId, userId);
        console.log(`‚úÖ User ${userId} unbanned in chat ${chatId}`);
      } catch (err) {
        console.log(`‚ö†Ô∏è Cannot unban user ${userId} in chat ${chatId}: ${err.message}`);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await bot.telegram.sendMessage(
        userId,
        `‚úÖ <b>YOU HAVE BEEN UNBANNED</b>\n\n` +
        `Your ban has been lifted.\n` +
        `You can now participate in activities again.\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `Please follow the community rules: /rules`,
        { parse_mode: 'HTML' }
      );
      console.log(`‚úÖ Unban notification sent to user ${userId}`);
    } catch (err) {
      console.log(`‚ö†Ô∏è Cannot send unban notification to user ${userId}: ${err.message}`);
    }
  } catch {}
}

async function unmuteUser(userId, chatId = null) {
  try {
    await pool.query('UPDATE telegram_users SET muted_until = NULL WHERE telegram_id = $1', [userId]);

    // –°–Ω–∏–º–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤ —á–∞—Ç–µ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chatId)
    if (chatId) {
      try {
        await bot.telegram.restrictChatMember(chatId, userId, {
          permissions: {
            can_send_messages: true,
            can_send_media_messages: true,
            can_send_polls: true,
            can_send_other_messages: true,
            can_add_web_page_previews: true,
            can_change_info: false,
            can_invite_users: true,
            can_pin_messages: false
          }
        });
        console.log(`‚úÖ User ${userId} unmuted in chat ${chatId}`);
      } catch (err) {
        console.log(`‚ö†Ô∏è Cannot unmute user ${userId} in chat ${chatId}: ${err.message}`);
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      await bot.telegram.sendMessage(
        userId,
        `‚úÖ <b>YOUR MUTE HAS BEEN REMOVED</b>\n\n` +
        `You can now send messages again.\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `Please follow the community rules: /rules`,
        { parse_mode: 'HTML' }
      );
      console.log(`‚úÖ Unmute notification sent to user ${userId}`);
    } catch (err) {
      console.log(`‚ö†Ô∏è Cannot send unmute notification to user ${userId}: ${err.message}`);
    }
  } catch {}
}

async function setAwaitingWallet(userId, awaiting) {
  try {
    const result = await pool.query(
      `INSERT INTO telegram_users (telegram_id, awaiting_wallet) 
       VALUES ($1, $2) 
       ON CONFLICT (telegram_id) 
       DO UPDATE SET awaiting_wallet = $2
       RETURNING *`,
      [userId, awaiting]
    );
    console.log('‚úÖ setAwaitingWallet —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result.rows[0]);
    return result.rows[0];
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ setAwaitingWallet:', error.message);
    throw error;
  }
}

async function sendToPrivate(ctx, messageText, options = {}) {
  if (ctx.chat.type === 'private') {
    // –£–∂–µ –≤ –õ–° - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
    return ctx.reply(messageText, options);
  }
  
  // –í –≥—Ä—É–ø–ø–µ - –ú–û–õ–ß–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°, –ë–ï–ó –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
  try {
    await ctx.telegram.sendMessage(ctx.from.id, messageText, options);
    // –ù–ò–ß–ï–ì–û –ù–ï –û–¢–ü–†–ê–í–õ–Ø–ï–ú –í –ì–†–£–ü–ü–£!
  } catch (error) {
    // –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–° - —é–∑–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –∫–Ω–æ–ø–∫—É, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤
    const keyboard = Markup.inlineKeyboard([
      [Markup.button.url('üì± Start Bot', `https://t.me/${ctx.botInfo.username}?start=${ctx.message.text.slice(1).replace('@' + ctx.botInfo.username, '')}`)]
    ]);
    await ctx.reply(
      `‚ö†Ô∏è Please start the bot first:`,
      { ...keyboard, reply_to_message_id: ctx.message.message_id }
    );
  }
}

const bot = new Telegraf(config.BOT_TOKEN);

bot.use(async (ctx, next) => {
  if (ctx.from?.is_bot) return;
  if (ctx.from?.id === 1087968824) return;
  return next();
});

bot.catch((err, ctx) => {
  console.error('‚ùå –û–®–ò–ë–ö–ê –ë–û–¢–ê:', err.message);
  console.error('Stack trace:', err.stack);
  console.error('Context:', JSON.stringify({
    updateType: ctx.updateType,
    userId: ctx.from?.id,
    chatType: ctx.chat?.type,
    text: ctx.message?.text?.substring(0, 100)
  }));
});

bot.start(async (ctx) => {
  console.log('‚úÖ /start –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id, ctx.from.username, '—Ç–∏–ø —á–∞—Ç–∞:', ctx.chat.type);
  
  const welcomeMsg = `üöÄ WELCOME TO MAI PROJECT!

The Future of Decentralized AI is Here

MAI is revolutionizing the intersection of artificial intelligence and blockchain technology. We're building a decentralized AI platform that belongs to the community - powered by you, governed by you, owned by you.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ PRESALE INFORMATION
14 stages with up to 80% discount
View details: /presale

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ MEGA REWARDS PROGRAM

üéÅ COMMUNITY AIRDROP:
‚úÖ 5,000 MAI FREE for first 20,000 participants
‚úÖ How to participate:
   1Ô∏è‚É£ Subscribe @mainingmai_news
   2Ô∏è‚É£ Subscribe @mainingmai_chat
   3Ô∏è‚É£ Register: /airdrop
‚úÖ STAY subscribed until listing
‚úÖ Daily check 00:00 UTC
‚úÖ Distribution: Within 10 days after listing
üí° Register after 20K? You're in queue - if someone loses their spot, you move up!
‚ùå Unsubscribe = Position lost!
Claim now! üöÄ

üéÅ COMMUNITY REFERRAL PROGRAM:
üí∞ Earn 1,000 MAI per friend!
‚úÖ Friend subscribes to BOTH channels = You earn!
‚úÖ Unlimited invites - no cap!
‚úÖ Instant rewards when friend subscribes
‚ö†Ô∏è Friend unsubscribes = Reward removed
üëâ Command: /referral

üéÅPresale Airdrop: Up to 1,000,000 MAI
- Complete tasks during presale
- Command: /tasks

üéÅAirdrop NFT program (1,400 NFTs)
- Complete tasks during presale
- Command: /nftairdrop

üéÅPresale Referral: Earn USDT
- $500,000 reward pool
- Command: /refpresale

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìã ESSENTIAL COMMANDS

/presale - View all presale stages
/nft - NFT reward levels
/tasks - Presale airdrop program
/airdrop - Register for community airdrop
/referral - Invite friends, earn MAI tokens
/refpresale - Presale referral (earn USDT)
/nftairdrop - Airdrop NFT program (1,400 NFTs)
/status - Check your status
/changewallet - Change your wallet address
/faq - Frequently asked questions
/rules - Community rules
/problems - Troubleshooting & solutions
/admin - Contact administrators (your message)
/report - Report rule violations (reply to message)
/help - Full command list

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üé® GET OUR STICKERS!
Express yourself with MAI stickers
üëâ https://t.me/addstickers/MAImining

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è CRITICAL REQUIREMENTS
To qualify for ANY rewards, you MUST:
‚úÖ Subscribe to @mainingmai_news
‚úÖ Subscribe to @mainingmai_chat
‚úÖ Follow all community rules

Unsubscribing = Automatic disqualification

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Website: https://miningmai.com
üì¢ @mainingmai_news
üí¨ @mainingmai_chat
üé® t.me/addstickers/MAImining
üì± Join the revolution. Build the future.

Let's decentralize AI together! ü§ñ‚ö°`;

  try {
    const userId = ctx.from.id;
    const username = ctx.from.username || 'no_username';
    const firstName = ctx.from.first_name || 'User';

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
    const startPayload = ctx.startPayload; // "ref_12345"
    let referrerId = null;

    if (startPayload && startPayload.startsWith('ref_')) {
      referrerId = parseInt(startPayload.replace('ref_', ''));
      console.log(`üîó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: referrer_id = ${referrerId}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    const existingUser = await getUserStatus(userId);

    if (!existingUser) {
      // –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ API
      const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, userId);
      const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, userId);

      console.log(`üÜï –ù–û–í–´–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: API –ø—Ä–æ–≤–µ—Ä–∫–∞ - news=${newsSubscribed}, chat=${chatSubscribed}`);

      // –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ + referrer_id (–µ—Å–ª–∏ –µ—Å—Ç—å)
      await pool.query(
        `INSERT INTO telegram_users (telegram_id, username, first_name, is_subscribed_news, is_subscribed_chat, referrer_id)
         VALUES ($1, $2, $3, $4, $5, $6)`,
        [userId, username, firstName, newsSubscribed, chatSubscribed, referrerId]
      );

      console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –∏–∑ API${referrerId ? ` (—Ä–µ—Ñ–µ—Ä–µ—Ä: ${referrerId})` : ''}`);
    } else {
      // –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ù–ï –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏!
      // –ü–æ–¥–ø–∏—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è chat_member/new_chat_members/left_chat_member
      console.log(`üîÑ –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î - news=${existingUser.is_subscribed_news}, chat=${existingUser.is_subscribed_chat}`);

      await pool.query(
        `UPDATE telegram_users
         SET username = $2, first_name = $3
         WHERE telegram_id = $1`,
        [userId, username, firstName]
      );

      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ–±–Ω–æ–≤–ª—ë–Ω (—Ç–æ–ª—å–∫–æ –∏–º—è/username, –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï —Ç—Ä–æ–Ω—É—Ç—ã)`);
    }

    // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–°, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    await sendToPrivate(ctx, welcomeMsg);
    console.log('‚úÖ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /start:', error.message);
  }
});

bot.command('airdrop', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  console.log('‚úÖ /airdrop –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id, ctx.from.username);

  const userId = ctx.from.id;
  const username = ctx.from.username || 'no_username';
  const firstName = ctx.from.first_name;
  
  try {
    const userStatus = await getUserStatus(userId);
    console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userStatus);
    
    if (userStatus?.banned) {
      return sendToPrivate(ctx, '‚ùå You are banned and cannot participate in the airdrop.');
    }
    
    if (userStatus?.position && userStatus?.wallet_address) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–æ–∫ –ò–ó –ë–î
      const newsSubscribed = userStatus.is_subscribed_news;
      const chatSubscribed = userStatus.is_subscribed_chat;
      const isActive = newsSubscribed && chatSubscribed;

      // –ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
      if (!isActive) {
        const isInQueue = userStatus.position > config.AIRDROP_LIMIT;

        let warningMessage = `‚ö†Ô∏è <b>You're Already Registered, BUT...</b>\n\n`;

        if (isInQueue) {
          warningMessage += `üìä Queue Position: <b>#${userStatus.position}</b>\n` +
            `üíº Wallet: <code>${userStatus.wallet_address}</code>\n\n`;
        } else {
          warningMessage += `üé´ Position: <b>#${userStatus.position}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
            `üéÅ Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n` +
            `üíº Wallet: <code>${userStatus.wallet_address}</code>\n\n`;
        }

        warningMessage += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üö´ <b>STATUS: INACTIVE</b>\n\n` +
          `You unsubscribed from:\n`;

        if (!newsSubscribed) warningMessage += `‚ùå @mainingmai_news\n`;
        if (!chatSubscribed) warningMessage += `‚ùå @mainingmai_chat\n`;

        warningMessage += `\n‚è∞ <b>You have until 00:00 UTC to resubscribe!</b>\n\n` +
          `If you don't resubscribe before the daily check at 00:00 UTC, you will:\n` +
          `‚ùå Permanently lose your ${isInQueue ? 'queue ' : ''}position #${userStatus.position}\n`;

        if (!isInQueue) {
          warningMessage += `‚ùå Lose your ${config.AIRDROP_REWARD.toLocaleString()} MAI reward\n`;
        }

        warningMessage += `‚ùå Your spot will go to the next person in queue\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üîî <b>RESUBSCRIBE NOW:</b>\n` +
          `1Ô∏è‚É£ Subscribe to @mainingmai_news\n` +
          `2Ô∏è‚É£ Join @mainingmai_chat\n` +
          `3Ô∏è‚É£ Use /status to verify\n\n` +
          `üí∞ <b>Want to change your wallet?</b>\n` +
          `Use /changewallet command to update your wallet address.\n\n` +
          `üìä Check status at https://miningmai.com`;

        return sendToPrivate(ctx, warningMessage, { parse_mode: 'HTML' });
      }

      // –ï—Å–ª–∏ –≤—Å—ë –û–ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const isInQueue = userStatus.position > config.AIRDROP_LIMIT;

      let statusMessage = `‚úÖ <b>You're Already Registered!</b>\n\n`;

      if (isInQueue) {
        statusMessage += `üìä Queue Position: <b>#${userStatus.position}</b>\n` +
          `üíº Wallet: <code>${userStatus.wallet_address}</code>\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚ö†Ô∏è Status: ‚úÖ <b>ACTIVE</b>\n\n` +
          `You're in the waiting queue. If someone loses their airdrop spot, you'll automatically move up!\n\n`;
      } else {
        statusMessage += `üé´ Position: <b>#${userStatus.position}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
          `üéÅ Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n` +
          `üíº Wallet: <code>${userStatus.wallet_address}</code>\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚ö†Ô∏è Status: ‚úÖ <b>ACTIVE</b>\n\n`;
      }

      statusMessage += `üìä <b>Check your status:</b>\n` +
        `‚Ä¢ Use /status command here\n` +
        `‚Ä¢ Connect wallet at https://miningmai.com\n\n` +
        `üí∞ <b>Want to change your wallet?</b>\n` +
        `Use /changewallet command to update your wallet address.\n\n` +
        `üîí Keep your position by staying subscribed to @mainingmai_news and @mainingmai_chat!`;

      return sendToPrivate(ctx, statusMessage, { parse_mode: 'HTML' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ò–ó –ë–î (–Ω–µ —á–µ—Ä–µ–∑ API!)
    const currentUser = await getUserStatus(userId);

    if (!currentUser) {
      // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î - –∑–Ω–∞—á–∏—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª /start
      return sendToPrivate(
        ctx,
        `‚ö†Ô∏è <b>Please start the bot first!</b>\n\n` +
        `Use /start command to begin.`,
        { parse_mode: 'HTML' }
      );
    }

    const newsSubscribed = currentUser.is_subscribed_news || false;
    const chatSubscribed = currentUser.is_subscribed_chat || false;

    console.log('üì∫ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏ (–∏–∑ –ë–î):', newsSubscribed);
    console.log('üí¨ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —á–∞—Ç (–∏–∑ –ë–î):', chatSubscribed);

    // –ï—Å–ª–∏ –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω —Ö–æ—Ç—è –±—ã –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –û–ë–û–ò–•
    if (!newsSubscribed || !chatSubscribed) {
      return sendToPrivate(
        ctx,
        `‚ùå <b>Subscription Required!</b>\n\n` +
        `You must subscribe to BOTH channels to participate:\n\n` +
        `${newsSubscribed ? '‚úÖ' : '‚ùå'} News Channel: @mainingmai_news\n` +
        `${chatSubscribed ? '‚úÖ' : '‚ùå'} Community Chat: @mainingmai_chat\n\n` +
        `After subscribing to ${!newsSubscribed && !chatSubscribed ? 'both channels' : 'the missing channel'}, run /airdrop again.`,
        { parse_mode: 'HTML' }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ—à–µ–ª–µ–∫
    if (currentUser.wallet_address) {
      // –£ —é–∑–µ—Ä–∞ —É–∂–µ –µ—Å—Ç—å –∫–æ—à–µ–ª–µ–∫ - —Å—Ä–∞–∑—É —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º!
      console.log('üíº –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –µ—Å—Ç—å, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –∞–∏—Ä–¥—Ä–æ–ø');

      const registration = await registerUser(userId, username, firstName, currentUser.wallet_address);
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify(registration));

      if (!registration.success) {
        if (registration.reason === 'limit_reached') {
          return sendToPrivate(
            ctx,
            `‚ùå <b>Airdrop Full!</b>\n\n` +
            `Unfortunately, all ${config.AIRDROP_LIMIT.toLocaleString()} spots have been taken.\n\n` +
            `You're now in the waiting queue. If someone loses their spot, you'll automatically move up!\n\n` +
            `Follow @mainingmai_news for updates!`,
            { parse_mode: 'HTML' }
          );
        }
        if (registration.reason === 'wallet_duplicate') {
          const positionText = registration.existingPosition
            ? `Position #${registration.existingPosition}`
            : 'another user';

          return sendToPrivate(
            ctx,
            `‚ùå <b>Wallet Already Registered!</b>\n\n` +
            `This wallet address is already registered by ${positionText}.\n\n` +
            `Each wallet can only be used once.\n\n` +
            `Please use /changewallet to change your wallet, then try /airdrop again.`,
            { parse_mode: 'HTML' }
          );
        }
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registration.reason);
        return sendToPrivate(ctx, '‚ùå Registration error. Please try /airdrop again.');
      }

      console.log('‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! Position:', registration.user.position);

      const isInQueue = registration.user.position > config.AIRDROP_LIMIT;

      let successMessage;

      if (isInQueue) {
        // –Æ–ó–ï–† –í –û–ß–ï–†–ï–î–ò (–ø–æ–∑–∏—Ü–∏—è > –ª–∏–º–∏—Ç–∞)
        successMessage =
          `üéâ <b>REGISTRATION SUCCESSFUL!</b>\n\n` +
          `‚è≥ <b>You're in the WAITING QUEUE!</b>\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üìä <b>Queue Position: #${registration.user.position}</b>\n` +
          `‚è≥ Airdrop spots filled: ${config.AIRDROP_LIMIT.toLocaleString()}/${config.AIRDROP_LIMIT.toLocaleString()}\n` +
          `üíº Wallet: <code>${currentUser.wallet_address}</code>\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚ú® <b>HOW THE QUEUE WORKS:</b>\n\n` +
          `If someone unsubscribes from channels and loses their airdrop spot, you'll automatically move up!\n\n` +
          `You could become position #${config.AIRDROP_LIMIT} or higher and get <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>! üéÅ\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚ö†Ô∏è <b>STAY IN THE QUEUE:</b>\n\n` +
          `‚úÖ Stay subscribed to @mainingmai_news\n` +
          `‚úÖ Stay in community chat @mainingmai_chat\n` +
          `‚úÖ Follow all rules\n\n` +
          `üîç <b>Daily Check: 00:00 UTC</b>\n` +
          `If you unsubscribe, you will:\n` +
          `‚ùå Lose your queue position #${registration.user.position}\n` +
          `‚ùå Cannot restore your position\n\n` +
          `Use /status anytime to check if you've moved up!\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `<b>Thank you for joining MAI! üöÄ</b>`;
      } else {
        // –Æ–ó–ï–† –í –ê–ò–†–î–†–û–ü–ï (–ø–æ–∑–∏—Ü–∏—è <= –ª–∏–º–∏—Ç–∞)
        successMessage =
          `üéâ <b>REGISTRATION SUCCESSFUL!</b>\n\n` +
          `Welcome to the MAI Community Airdrop!\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üé´ Your Position: <b>#${registration.user.position}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
          `üéÅ Your Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n` +
          `üíº Wallet: <code>${currentUser.wallet_address}</code>\n` +
          `üìÖ Distribution: Within 10 days after listing\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚ö†Ô∏è <b>HOW TO KEEP YOUR POSITION:</b>\n\n` +
          `‚úÖ Stay subscribed to @mainingmai_news\n` +
          `‚úÖ Stay in community chat @mainingmai_chat\n` +
          `‚úÖ Follow all rules\n\n` +
          `üîç <b>Daily Check: 00:00 UTC</b>\n` +
          `If you unsubscribe, you will:\n` +
          `‚ùå Lose your position #${registration.user.position}\n` +
          `‚ùå Your spot goes to next person\n` +
          `‚ùå Cannot restore old position\n\n` +
          `Use /status anytime to verify your status.\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `<b>Thank you for joining MAI! üöÄ</b>`;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∏—Ä–¥—Ä–æ–ø–∞, –Ω–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏)
      if (!isInQueue) {
        try {
          await bot.telegram.sendPhoto(
            userId,
            { source: './images/milestone.webp' },
            {
              caption: successMessage,
              parse_mode: 'HTML'
            }
          );
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${userId}`);
          return;
        } catch (imgError) {
          console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç`);
          return sendToPrivate(ctx, successMessage, { parse_mode: 'HTML' });
        }
      } else {
        // –î–ª—è –æ—á–µ—Ä–µ–¥–∏ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        return sendToPrivate(ctx, successMessage, { parse_mode: 'HTML' });
      }
    }

    // –ö–æ—à–µ–ª—å–∫–∞ –Ω–µ—Ç - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
    await setAwaitingWallet(userId, 'airdrop');
    console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω awaiting_wallet = airdrop –¥–ª—è:', userId);
    
    await sendToPrivate(
  ctx,
  `üéÅ <b>COMMUNITY AIRDROP REGISTRATION</b>\n\n` +
  `‚úÖ You are eligible!\n\n` +

  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +

  `üéØ <b>Your Reward:</b> ${config.AIRDROP_REWARD.toLocaleString()} MAI\n` +
  `üë• <b>Limited Spots:</b> First ${config.AIRDROP_LIMIT.toLocaleString()} participants\n` +
  `üí∞ <b>Cost:</b> Absolutely FREE\n` +
  `üìÖ <b>Distribution:</b> Within 10 days after listing\n\n` +

  `üí° <b>Register after 20K?</b>\n` +
  `You join the waiting queue. If someone unsubscribes from channels and loses their spot, you automatically move up!\n\n` +

  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +

  `üìù <b>NEXT STEP: Send Your Solana Wallet Address</b>\n\n` +

  `Example format:\n` +
  `<code>7xK3N9kZXxY2pQwM5vH8Sk1wmVE5...</code>\n\n` +

  `‚úÖ Supported wallets:\n` +
  `‚Ä¢ Phantom, Solflare, Trust Wallet\n` +
  `‚Ä¢ Binance Web3, MetaMask\n` +
  `‚Ä¢ Any Solana-compatible wallet\n\n` +

  `‚ö†Ô∏è <b>IMPORTANT:</b> Double-check your address!\n` +
  `Wrong address = Lost tokens forever!\n\n` +

  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +

  `üîí <b>How to Keep Your Position:</b>\n\n` +

  `1Ô∏è‚É£ Stay subscribed to @mainingmai_news\n` +
  `2Ô∏è‚É£ Stay subscribed to @mainingmai_chat\n` +
  `3Ô∏è‚É£ Daily verification at 00:00 UTC\n\n` +

  `‚ùå Unsubscribe from any channel = Position lost immediately!`,
  { parse_mode: 'HTML' }
);
    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /airdrop:', error.message);
    await sendToPrivate(ctx, '‚ùå An error occurred. Please try again later.');
  }
});

bot.command('changewallet', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  console.log('‚úÖ /changewallet –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id, ctx.from.username);

  const userId = ctx.from.id;

  try {
    const userStatus = await getUserStatus(userId);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–Ω–∞
    if (userStatus?.banned) {
      return sendToPrivate(
        ctx,
        `‚ùå <b>You are banned and cannot change your wallet.</b>`,
        { parse_mode: 'HTML' }
      );
    }

    if (!userStatus?.wallet_address) {
      return sendToPrivate(
        ctx,
        `‚ùå <b>No Wallet Found!</b>\n\n` +
        `You need to add a wallet first before you can change it.\n\n` +
        `Use /airdrop or /referral to add a wallet.`,
        { parse_mode: 'HTML' }
      );
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º awaiting_wallet –¥–ª—è —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞
    await setAwaitingWallet(userId, 'changewallet');

    await sendToPrivate(
      ctx,
      `üîÑ <b>CHANGE WALLET ADDRESS</b>\n\n` +
      `Current wallet: <code>${userStatus.wallet_address}</code>\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üìù <b>Send your NEW Solana wallet address:</b>\n\n` +
      `‚ö†Ô∏è <b>IMPORTANT:</b>\n` +
      `‚Ä¢ Double-check the new address!\n` +
      `‚Ä¢ Wrong address = Lost tokens forever!\n` +
      `‚Ä¢ You can only change once per request\n\n` +
      `üí° <b>Changed your mind?</b>\n` +
      `‚Ä¢ Just send your current wallet again\n\n` +
      `Example format:\n` +
      `<code>7xK3N9kZXxY2pQwM5vH8Sk1wmVE5...</code>`,
      { parse_mode: 'HTML' }
    );

    console.log('‚úÖ –ó–∞–ø—Ä–æ—Å —Å–º–µ–Ω—ã –∫–æ—à–µ–ª—å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /changewallet:', error.message);
    await sendToPrivate(ctx, '‚ùå An error occurred. Please try again later.');
  }
});

bot.command('nftairdrop', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  console.log('‚úÖ /nftairdrop –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id);

  const text = `üé® AIRDROP NFT PROGRAM

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

What is Airdrop NFT?

Airdrop NFTs are identical to Silver NFTs in value and utility, but can only be earned through special task completion. This is your unique opportunity to obtain this premium collectible by simply completing straightforward community challenges!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

How to Earn Airdrop NFT:

- Stage Competition: Each presale stage (1-14) awards 100 Airdrop NFTs
- Qualifying Purchase: Make minimum 10,000 MAI token purchase during any active stage
- First Come Basis: First 100 unique users per stage who meet purchase requirement win NFT
- One Per Wallet: Each wallet can win only one Airdrop NFT during entire presale period
- Automatic Allocation: NFTs are assigned immediately after stage's 100 winners determined
- Total Supply: 1,400 Airdrop NFTs distributed across all 14 stages

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Claiming Your NFT:

- Claim Availability: After official MAI token listing announcement
- Claim Cost: Approximately 0.03 SOL for network fees
- Claim Process: Access through your dashboard after listing goes live

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Airdrop NFT Benefits:

‚úÖ Early Mining Access: +2 months
‚úÖ Governance Voting: 6 months
‚úÖ Forever Mining Bonus: +10%

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è Important Disclaimer:

Anti-Fraud Protection: We reserve the right to exclude any participant from the Airdrop NFT giveaway if we suspect fraudulent activity, manipulation, or violation of program terms.

This includes but is not limited to:
- Multiple wallet addresses
- Coordinated timing manipulation
- Bot activity or wash trading
- Fake transactions
- Any attempt to artificially secure a position among first 100 winners

Eligibility Verification: All winning purchases will be verified for authenticity and compliance with minimum requirements. Invalid or suspicious transactions will be disqualified.

All decisions regarding winner eligibility and NFT allocation are final and at our sole discretion.

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê More info: https://miningmai.com
üì± Stay connected: @mainingmai_news
üí¨ @mainingmai_chat
`;

  try {
    await sendToPrivate(ctx, text);
    console.log('‚úÖ /nftairdrop –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /nftairdrop:', error.message);
  }
});

bot.command('status', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  const userId = ctx.from.id;

  try {
    const userStatus = await getUserStatus(userId);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ò–ó –ë–î (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ API –∏ –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
    // –ë–î –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è chat_member/left_chat_member –∏ CRON –≤ 00:00 UTC
    const newsSubscribed = userStatus.is_subscribed_news;
    const chatSubscribed = userStatus.is_subscribed_chat;

    const hasPosition = userStatus?.position ? true : false;
    const isActive = hasPosition && newsSubscribed && chatSubscribed && !userStatus.banned;
    const isInTop20K = hasPosition && userStatus.position <= config.AIRDROP_LIMIT;
    const rewardAmount = (isActive && isInTop20K) ? config.AIRDROP_REWARD.toLocaleString() : '0';
    const statusEmoji = isActive ? '‚úÖ' : (hasPosition ? '‚ùå' : '‚ûñ');
    const statusText = isActive ? 'ACTIVE' : (hasPosition ? 'INACTIVE' : 'NOT REGISTERED');

    let warnings = '';
    if (hasPosition && !newsSubscribed) warnings += '\n‚ö†Ô∏è Subscribe to @mainingmai_news to keep your position!';
    if (hasPosition && !chatSubscribed) warnings += '\n‚ö†Ô∏è Join @mainingmai_chat to keep your position!';
    if (!userStatus.wallet_address) warnings += '\n‚ö†Ô∏è Wallet not linked - send your wallet address!';

    let queueInfo = '';
    if (hasPosition && !isInTop20K) {
      const peopleAhead = userStatus.position - config.AIRDROP_LIMIT;
      queueInfo = `\n\nüí° *YOU'RE IN THE QUEUE*\n` +
        `You're currently at position #${userStatus.position}.\n` +
        `${peopleAhead} people ahead of you in the top ${config.AIRDROP_LIMIT.toLocaleString()}.\n\n` +
        `If ${peopleAhead} people unsubscribe, you'll move into the top ${config.AIRDROP_LIMIT.toLocaleString()} and get the ${config.AIRDROP_REWARD.toLocaleString()} MAI reward!\n\n` +
        `Keep your subscriptions active to maintain your queue position!`;
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referralStats = await pool.query(
      `SELECT
        COUNT(*) as total_invited,
        COUNT(*) FILTER (WHERE is_subscribed_news = true AND is_subscribed_chat = true) as active_now
       FROM telegram_users
       WHERE referrer_id = $1`,
      [userId]
    );

    const totalReferrals = parseInt(referralStats.rows[0].total_invited) || 0;
    const activeReferrals = parseInt(referralStats.rows[0].active_now) || 0;
    const referralBalance = userStatus.referral_reward_balance || 0;

    let referralSection = '';
    if (totalReferrals > 0 || referralBalance !== 0) {
      referralSection = `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üéÅ <b>REFERRAL REWARDS</b>\n\n` +
        `üí∞ Balance: <b>${referralBalance.toLocaleString()} MAI</b>\n` +
        `üë• Total Invited: ${totalReferrals}\n` +
        `‚úÖ Active Now: ${activeReferrals}\n\n`;
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é –∞–∏—Ä–¥—Ä–æ–ø–∞
    let airdropSection = '';
    if (hasPosition) {
      let positionDisplay = '';
      if (isInTop20K) {
        // –í –∞–∏—Ä–¥—Ä–æ–ø–µ
        positionDisplay = `üé´ Position: <b>#${userStatus.position}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n`;
      } else {
        // –í –æ—á–µ—Ä–µ–¥–∏
        positionDisplay = `üìä Queue Position: <b>#${userStatus.position}</b>\n`;
      }

      airdropSection =
        `üìä <b>COMMUNITY AIRDROP STATUS</b>\n\n` +
        positionDisplay +
        `üìÖ Registered: ${new Date(userStatus.registered_at).toLocaleDateString()}\n` +
        `‚ö†Ô∏è <b>Status:</b> ${statusEmoji} <b>${statusText}</b>\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üéÅ <b>Expected Reward: ${rewardAmount} MAI</b>${warnings ? `\n\nüö® <b>ACTION REQUIRED:</b>${warnings}` : ''}${queueInfo}${!isActive && hasPosition ? `\n\n‚ö†Ô∏è <b>Your position is INACTIVE!</b>\n\nYou have until the next daily check at <b>00:00 UTC</b> to resubscribe to the required channels. If you don't resubscribe before then, you will permanently lose your ${isInTop20K ? '' : 'queue '}position #${userStatus.position}!\n\nResubscribe NOW to keep your spot!` : ''}\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    } else {
      airdropSection =
        `üìä <b>COMMUNITY AIRDROP STATUS</b>\n\n` +
        `‚ö†Ô∏è <b>Status:</b> ${statusEmoji} <b>${statusText}</b>\n\n` +
        `You haven't registered for the community airdrop yet.\n` +
        `Use /airdrop to register and claim ${config.AIRDROP_REWARD.toLocaleString()} MAI!\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    }

    await sendToPrivate(
      ctx,
      `üìä <b>YOUR STATUS</b>\n\n` +
      `üë§ Username: @${userStatus.username}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      airdropSection +
      `üì∫ <b>Subscriptions:</b>\n` +
      `${newsSubscribed ? '‚úÖ' : '‚ùå'} News Channel (@mainingmai_news)\n` +
      `${chatSubscribed ? '‚úÖ' : '‚ùå'} Community Chat (@mainingmai_chat)\n\n` +
      `üíº <b>Wallet:</b> ${userStatus.wallet_address ? `<code>${userStatus.wallet_address}</code>` : '‚ùå Not linked'}\n` +
      `${userStatus.wallet_address ? `   Use /changewallet to update\n` : ``}\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `‚ö†Ô∏è Warnings: ${userStatus.warnings || 0}/${config.WARN_LIMIT}\n` +
      `üìä Reports: ${userStatus.reports_received || 0}\n` +
      `${userStatus.banned ? `üö´ <b>Status: BANNED</b>\n` : ``}\n` +
      `${referralSection}` +
      `${userStatus.banned ? `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nüö´ <b>YOU ARE BANNED</b>\n\n‚ùå Cannot participate in airdrop\n‚ùå No referral rewards will be paid\n\nContact support if you believe this is a mistake.\n\n` : ``}` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üåê <b>More info:</b> https://miningmai.com`,
      { parse_mode: 'HTML' }
    );
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /status:', error.message);
    console.error('Stack:', error.stack);
    await sendToPrivate(ctx, '‚ùå Error checking status. Try again later.');
  }
});

bot.command('referral', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  const userId = ctx.from.id;

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —é–∑–µ—Ä–∞
    const userStatus = await getUserStatus(userId);

    if (!userStatus) {
      return sendToPrivate(
        ctx,
        `‚ùå <b>Not Found</b>\n\n` +
        `Please start the bot first: /start`,
        { parse_mode: 'HTML' }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∫–æ—à–µ–ª–µ–∫
    if (!userStatus.wallet_address) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
      await pool.query(
        'UPDATE telegram_users SET awaiting_wallet = $1 WHERE telegram_id = $2',
        ['referral', userId]
      );

      return sendToPrivate(
        ctx,
        `üéÅ <b>COMMUNITY REFERRAL PROGRAM</b>\n\n` +
        `üìù To participate in the referral program, please provide your Solana wallet address.\n\n` +
        `üí∞ You'll earn <b>1,000 MAI</b> for every friend who:\n` +
        `‚úÖ Subscribes to @mainingmai_news\n` +
        `‚úÖ Subscribes to @mainingmai_chat\n\n` +
        `‚ö†Ô∏è If your referral unsubscribes, you'll lose the 1,000 MAI reward.\n\n` +
        `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
        `üìù <b>Please send your Solana wallet address now:</b>\n\n` +
        `Example: DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK`,
        { parse_mode: 'HTML' }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referralStats = await pool.query(
      `SELECT
        COUNT(*) as total_invited,
        COUNT(*) FILTER (WHERE is_subscribed_news = true AND is_subscribed_chat = true) as active_now
       FROM telegram_users
       WHERE referrer_id = $1`,
      [userId]
    );

    const totalInvited = parseInt(referralStats.rows[0].total_invited) || 0;
    const activeNow = parseInt(referralStats.rows[0].active_now) || 0;
    const currentBalance = userStatus.referral_reward_balance || 0;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    const botUsername = ctx.botInfo.username;
    const referralLink = `https://t.me/${botUsername}?start=ref_${userId}`;

    await sendToPrivate(
      ctx,
      `üéÅ <b>YOUR REFERRAL PROGRAM</b>\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üîó <b>Your Referral Link:</b>\n` +
      `<code>${referralLink}</code>\n\n` +
      `üìã <i>Share this link with friends to earn rewards!</i>\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üìä <b>STATISTICS</b>\n\n` +
      `üë• Total Invited: <b>${totalInvited}</b>\n` +
      `‚úÖ Active Now: <b>${activeNow}</b>\n` +
      `üí∞ Current Balance: <b>${currentBalance.toLocaleString()} MAI</b>\n` +
      `${userStatus.banned ? `üö´ <b>Status: BANNED - NO PAYOUTS</b>\n` : ``}\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üí° <b>HOW IT WORKS:</b>\n\n` +
      `1Ô∏è‚É£ Share your referral link\n` +
      `2Ô∏è‚É£ Friend subscribes to BOTH channels:\n` +
      `   ‚Ä¢ @mainingmai_news\n` +
      `   ‚Ä¢ @mainingmai_chat\n` +
      `3Ô∏è‚É£ You get <b>+1,000 MAI</b> üéÅ\n\n` +
      `‚ö†Ô∏è If friend unsubscribes from ANY channel:\n` +
      `   ‚Ä¢ You lose <b>-1,000 MAI</b>\n\n` +
      `‚úÖ If friend resubscribes:\n` +
      `   ‚Ä¢ You get <b>+1,000 MAI</b> again!\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üíº <b>Wallet Address:</b>\n` +
      `<code>${userStatus.wallet_address}</code>\n\n` +
      `üí∏ <b>Reward Distribution:</b>\n` +
      `Within 10 days after token listing\n\n` +
      `‚ö†Ô∏è <b>IMPORTANT:</b> Ban = No rewards\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üéØ Start sharing and earn MAI tokens! üöÄ`,
      { parse_mode: 'HTML' }
    );

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /referral:', error.message);
    console.error('Stack:', error.stack);
    await sendToPrivate(ctx, '‚ùå Error loading referral info. Try again later.');
  }
});

bot.command('presale', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  try {
    await sendToPrivate(ctx, getPresaleText());
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /presale:', error.message);
  }
});

bot.command('nft', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  try {
    await sendToPrivate(ctx, getNftText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /nft:', error.message);
  }
});

bot.command('tasks', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  try {
    await sendToPrivate(ctx, getTasksText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /tasks:', error.message);
  }
});

bot.command('refpresale', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  try {
    await sendToPrivate(ctx, getReferralText(), { parse_mode: 'Markdown' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /refpresale:', error.message);
  }
});

bot.command('faq', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  console.log('‚úÖ /faq –ø–æ–ª—É—á–µ–Ω –æ—Ç:', ctx.from.id);
  try {
    await sendToPrivate(ctx, getFaqText());
    console.log('‚úÖ /faq –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /faq:', error.message);
  }
});

bot.command('rules', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  try {
    await sendToPrivate(ctx, getRulesText(), { parse_mode: 'HTML' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /rules:', error.message);
  }
});

bot.command('help', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  const helpMsg = `
üÜò *MAI BOT COMMAND LIST*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ *REWARDS & AIRDROPS:*

/airdrop - Community airdrop (5,000 MAI FREE)
  ‚Üí First 20,000 participants. After 20K? Join the queue!
/referral - Community referral program (1,000 MAI per friend)
  ‚Üí Earn MAI tokens by inviting friends!
/tasks - Presale airdrop program (up to 1M MAI)
/nftairdrop - Airdrop NFT program (1,400 NFTs)
/refpresale - Presale referral ($500K USDT pool)
/status - Check your airdrop registration status
/changewallet - Change your wallet address

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *INFORMATION:*

/presale - All 14 presale stages with prices
/nft - NFT reward levels and bonuses
/faq - Frequently asked questions
/rules - Community guidelines

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üõ†Ô∏è *UTILITIES:*

/start - Welcome message & overview
/help - This command list
/problems - Troubleshooting & solutions
/admin - Contact administrators (your message)
/report - Report rule violations (reply to message)

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê *LINKS:*

üåê Website: https://miningmai.com
üì¢ @mainingmai_news
üí¨ @mainingmai_chat
üé® t.me/addstickers/MAImining

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° *QUICK TIP:*
Make sure to stay subscribed to @mainingmai_news and remain in the community chat to maintain eligibility for ALL rewards!

*Questions? Check /faq first!* üìö`;
  
  try {
    await sendToPrivate(ctx, helpMsg, { parse_mode: 'HTML' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /help:', error.message);
  }
});

bot.command('problems', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }

  const mainMenu = Markup.inlineKeyboard([
    [Markup.button.callback('üìã Registration Issues', 'prob_registration')],
    [Markup.button.callback('üíº Wallet Problems', 'prob_wallet')],
    [Markup.button.callback('üì∫ Subscription Issues', 'prob_subscriptions')],
    [Markup.button.callback('üéÅ Community Referral', 'prob_referral')],
    [Markup.button.callback('üö´ Ban & Mute', 'prob_ban')],
    [Markup.button.callback('üîî Notifications & Alerts', 'prob_notifications')],
    [Markup.button.callback('‚ùì Other Questions', 'prob_other')]
  ]);

  const message =
    `üÜò <b>TROUBLESHOOTING & SOLUTIONS</b>\n\n` +
    `Select a category to find solutions:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üìã Registration Issues\n` +
    `üíº Wallet Problems\n` +
    `üì∫ Subscription Issues\n` +
    `üéÅ Community Referral\n` +
    `üö´ Ban & Mute\n` +
    `üîî Notifications & Alerts\n` +
    `‚ùì Other Questions\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Can't find a solution?</b>\n` +
    `Contact admin using /admin command`;

  try {
    await sendToPrivate(ctx, message, { parse_mode: 'HTML', ...mainMenu });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /problems:', error.message);
  }
});

bot.command('admin', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  const userId = ctx.from.id;
  const userFirstName = ctx.from.first_name || 'Unknown';

  if (ctx.chat.type !== 'private') {
  // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
  try {
    await ctx.telegram.sendMessage(
      userId,
      `üì® *Contact Admin*\n\n` +
      `To contact administrators, use this command in private messages with the bot.\n\n` +
      `Write here: /admin Your message\n\n` +
      `Example:\n` +
      `/admin I have a question about airdrop`,
      { parse_mode: 'Markdown' }
    );
  } catch (err) {
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–° - –∑–Ω–∞—á–∏—Ç –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω
    const startButton = Markup.inlineKeyboard([
      [Markup.button.url('ü§ñ Start Bot', `https://t.me/${ctx.botInfo.username}?start=admin`)]
    ]);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞
    await ctx.reply(
      `‚ö†Ô∏è To contact admin, start the bot first:`,
      { ...startButton, reply_to_message_id: ctx.message.message_id }
    );
  }
  
  return; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
}
  
  // ============================================
  // –î–∞–ª—å—à–µ –∏–¥–µ—Ç –æ–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –õ–°)
  // ============================================
  
  if (config.ADMIN_IDS.includes(userId)) {
    return ctx.reply('‚ÑπÔ∏è You are an admin. Use /adminstats to see messages.');
  }
  
  const messageText = ctx.message.text.replace('/admin', '').trim();
  
  if (!messageText) {
    return ctx.reply(
      `üì® *CONTACT ADMIN*\n\n` +
      `Send your message to project administrators.\n\n` +
      `*Usage:*\n` +
      `/admin Your message here\n\n` +
      `*Example:*\n` +
      `/admin I have a question about presale\n\n` +
      `*Limits:*\n` +
      `‚Ä¢ Min ${ADMIN_MESSAGE_CONFIG.MIN_MESSAGE_LENGTH} characters\n` +
      `‚Ä¢ Max ${ADMIN_MESSAGE_CONFIG.MAX_MESSAGES_PER_DAY} messages per day\n` +
      `‚Ä¢ ${ADMIN_MESSAGE_CONFIG.COOLDOWN_MINUTES} min cooldown\n\n` +
      `‚ö†Ô∏è Spam = 24h block`,
      { parse_mode: 'Markdown' }
    );
  }
  
  if (messageText.length < ADMIN_MESSAGE_CONFIG.MIN_MESSAGE_LENGTH) {
    return ctx.reply(
      `‚ùå Message too short!\n\n` +
      `Minimum ${ADMIN_MESSAGE_CONFIG.MIN_MESSAGE_LENGTH} characters required.`
    );
  }
  
  if (messageText.length > ADMIN_MESSAGE_CONFIG.MAX_MESSAGE_LENGTH) {
    return ctx.reply(
      `‚ùå Message too long!\n\n` +
      `Maximum ${ADMIN_MESSAGE_CONFIG.MAX_MESSAGE_LENGTH} characters.`
    );
  }
  
  const permission = await canSendAdminMessage(userId);
  
  if (!permission.canSend) {
    if (permission.reason === 'blocked') {
      return ctx.reply(
        `üö´ *You are blocked!*\n\n` +
        `Unblock: ${permission.unblockTime} UTC\n\n` +
        `Reason: Spam or abuse.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    if (permission.reason === 'cooldown') {
      return ctx.reply(
        `‚è≥ *Cooldown active!*\n\n` +
        `Wait ${permission.minutesLeft} minutes.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    if (permission.reason === 'daily_limit') {
      return ctx.reply(
        `‚ö†Ô∏è *Daily limit reached!*\n\n` +
        `Max ${permission.limit} messages per day.\n` +
        `Try again in 24 hours.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    return ctx.reply('‚ùå Unable to send. Try later.');
  }
  
  const saved = await saveAdminMessage(userId, userFirstName, messageText);
  
  if (!saved) {
    return ctx.reply('‚ùå Error saving message.');
  }
  
  const firstName = escapeMarkdown(ctx.from.first_name || 'Unknown');
  const adminNotification =
    `üì® *NEW ADMIN MESSAGE*\n\n` +
  `*From:* ${firstName} (ID: \`${userId}\`)\n` +
  `*Time:* ${new Date().toLocaleString('en-GB', { timeZone: 'UTC' })} UTC\n\n` +
  `*Message:*\n\`\`\`\n${messageText}\n\`\`\`\n\n` +
  `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
  `*Quick Actions:*\n` +
  `Reply: /reply ${userId} Your message here\n` +
  `Block: /blockadmin ${userId}`;
  
  // ============================================
  // –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–¢–ü–†–ê–í–ö–ê –ê–î–ú–ò–ù–ê–ú –° –ü–†–û–í–ï–†–ö–ê–ú–ò
  // ============================================
  let sentToAdmins = 0;
  let failedAdmins = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ –∞–¥–º–∏–Ω—ã –≤–æ–æ–±—â–µ
  if (config.ADMIN_IDS.length === 0) {
    console.error('‚ùå ADMIN_IDS is empty! Check .env file');
    return ctx.reply(
      '‚ùå Admin contact system is not configured.\n' +
      'Please contact support via community chat.'
    );
  }
  
  for (const adminId of config.ADMIN_IDS) {
    try {
      await bot.telegram.sendMessage(adminId, adminNotification, { 
        parse_mode: 'Markdown'
      });
      sentToAdmins++;
      console.log(`‚úÖ Message sent to admin ${adminId}`);
    } catch (error) {
      console.error(`‚ùå Failed to send to admin ${adminId}:`, error.message);
      failedAdmins.push(adminId);
    }
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log(`üìä Sent to ${sentToAdmins}/${config.ADMIN_IDS.length} admins`);
  if (failedAdmins.length > 0) {
    console.warn(`‚ö†Ô∏è Failed admins: ${failedAdmins.join(', ')} - they need to /start the bot first!`);
  }
  
  await ctx.reply(
  `‚úÖ *Message sent to administrators!*\n\n` +
  `We'll respond as soon as possible.\n\n` +
  `Next message available in ${ADMIN_MESSAGE_CONFIG.COOLDOWN_MINUTES} minutes.`,
  { parse_mode: 'Markdown' }
);
  
  console.log(`üì® Admin message from ${firstName} (ID: ${userId}): "${messageText.substring(0, 50)}..."`);
});

bot.command('adminstats', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  try {
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE replied = false) as unread,
        COUNT(DISTINCT user_id) as unique_users
      FROM admin_messages
      WHERE created_at > NOW() - INTERVAL '7 days'
    `);
    
    const recent = await pool.query(`
      SELECT user_id, first_name, message_text, created_at, replied, admin_reply, replied_at
      FROM admin_messages
      ORDER BY created_at DESC
      LIMIT 10
    `);
    
    const s = stats.rows[0];
    
    let message = `üìä *ADMIN MESSAGES (7 days)*\n\n`;
    message += `üì® Total: ${s.total}\n`;
    message += `üì¨ Unread: ${s.unread}\n`;
    message += `üë• Users: ${s.unique_users}\n\n`;
    message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;
    message += `*Recent:*\n\n`;
    
    recent.rows.forEach((msg, i) => {
      const status = msg.replied ? '‚úÖ' : 'üì¨';
      const displayName = msg.first_name ? `${msg.first_name} (ID:${msg.user_id})` : `ID:${msg.user_id}`;
      const preview = msg.message_text.substring(0, 40) + '...';
      message += `${i + 1}. ${status} ${displayName}\n"${preview}"\n`;

      if (msg.admin_reply) {
        const replyPreview = msg.admin_reply.substring(0, 40) + (msg.admin_reply.length > 40 ? '...' : '');
        const repliedDate = msg.replied_at ? new Date(msg.replied_at).toLocaleString('en-GB', { timeZone: 'UTC' }) : '';
        message += `   ‚Ü™Ô∏è Reply: "${replyPreview}"`;
        if (repliedDate) message += ` (${repliedDate})`;
        message += `\n`;
      }

      message += `\n`;
    });
    
    await ctx.reply(message, { parse_mode: 'Markdown' });
  } catch (error) {
    ctx.reply('‚ùå Error retrieving stats');
  }
});

bot.command('blockadmin', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  const targetUserId = args[1] ? parseInt(args[1]) : null;
  const hours = args[2] ? parseInt(args[2]) : 24;
  
  if (!targetUserId) {
    return ctx.reply('Usage: /blockadmin <user_id> [hours]');
  }
  
  const blocked = await blockUserFromAdmin(targetUserId, hours);
  
  if (blocked) {
    await ctx.reply(`‚úÖ User ${targetUserId} blocked for ${hours}h.`);
  } else {
    await ctx.reply('‚ùå Error blocking user.');
  }
});

bot.command('unblockadmin', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  const args = ctx.message.text.split(' ');
  const targetUserId = args[1] ? parseInt(args[1]) : null;
  
  if (!targetUserId) {
    return ctx.reply('Usage: /unblockadmin <user_id>');
  }
  
  const unblocked = await unblockUserFromAdmin(targetUserId);
  
  if (unblocked) {
    await ctx.reply(`‚úÖ User ${targetUserId} unblocked.`);
  } else {
    await ctx.reply('‚ùå Error unblocking.');
  }
});

bot.command('reply', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  const targetUserId = args[1] ? parseInt(args[1]) : null;
  const replyText = ctx.message.text.replace('/reply', '').replace(args[1], '').trim();
  
  if (!targetUserId || !replyText) {
    return ctx.reply(
      `üì® *REPLY TO USER*\n\n` +
      `Usage: /reply <user_id> <your message>\n\n` +
      `Example:\n` +
      `/reply 123456789 Hello! Regarding your question...\n\n` +
      `You can find user_id in the admin message notification.`,
      { parse_mode: 'Markdown' }
    );
  }
  
  if (replyText.length < 5) {
    return ctx.reply('‚ùå Reply message is too short! Minimum 5 characters.');
  }
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  try {
    await bot.telegram.sendMessage(
      targetUserId,
      `üì® *Response from MAI Administration*\n\n` +
      `\`\`\`\n${replyText}\n\`\`\`\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `If you have more questions, use /admin command.`,
      { parse_mode: 'Markdown' }
    );
    
    // –ü–æ–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    try {
      await pool.query(
        `UPDATE admin_messages
         SET replied = true, admin_reply = $1, replied_at = NOW()
         WHERE user_id = $2 AND replied = false`,
        [replyText, targetUserId]
      );
    } catch (err) {
      console.error('‚ö†Ô∏è Failed to update replied status:', err.message);
    }
    
    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await ctx.reply(
      `‚úÖ *Reply sent successfully!*\n\n` +
      `To: User ${targetUserId}\n` +
      `Message:\n\`\`\`\n${replyText.substring(0, 100)}${replyText.length > 100 ? '...' : ''}\n\`\`\``,
      { parse_mode: 'Markdown' }
    );
    
    console.log(`‚úÖ Admin replied to user ${targetUserId}: "${replyText.substring(0, 50)}..."`);
  } catch (error) {
    console.error('‚ùå Failed to send reply:', error.message);
    
    if (error.message.includes('blocked')) {
      return ctx.reply(
        `‚ùå *Cannot send reply!*\n\n` +
        `User ${targetUserId} has blocked the bot.`,
        { parse_mode: 'Markdown' }
      );
    }
    
    await ctx.reply(
      `‚ùå *Failed to send reply!*\n\n` +
      `Possible reasons:\n` +
      `‚Ä¢ User hasn't started the bot\n` +
      `‚Ä¢ User blocked the bot\n` +
      `‚Ä¢ Invalid user ID\n\n` +
      `Error: ${error.message}`,
      { parse_mode: 'Markdown' }
    );
  }
});

bot.command('report', async (ctx) => {
  // –ö–æ–º–∞–Ω–¥–∞ /report —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø–µ
  if (ctx.chat.type === 'private') {
    return ctx.reply('‚ö†Ô∏è This command only works in group chats!');
  }
  
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è Reply to a violator\'s message and type /report');
  }
  
  const reportedUserId = ctx.message.reply_to_message.from.id;
  const reporterId = ctx.from.id;
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∏
  if (reportedUserId === reporterId) {
    return ctx.reply('‚ùå You cannot report yourself!');
  }
  
  if (config.ADMIN_IDS.includes(reportedUserId)) {
    return ctx.reply('‚ùå You cannot report an administrator!');
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—É (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
  const uniqueReports = await addReport(reporterId, reportedUserId, ctx.chat.id);
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º—É—Ç–æ–≤ —É —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞
  const muteCount = await getMuteCount(reportedUserId);
  
  await ctx.reply(`‚úÖ Report accepted. User has ${uniqueReports} unique reports.`);

  // –õ–û–ì–ò–ö–ê –≠–°–ö–ê–õ–ê–¶–ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥):
  // 10+ –∂–∞–ª–æ–± ‚Üí –ø–µ—Ä–≤—ã–π –º—É—Ç (24 —á–∞—Å–∞)
  // 20+ –∂–∞–ª–æ–± ‚Üí –≤—Ç–æ—Ä–æ–π –º—É—Ç (7 –¥–Ω–µ–π)
  // 30+ –∂–∞–ª–æ–± ‚Üí –ø–µ—Ä–º–∞–±–∞–Ω

  if (uniqueReports >= config.REPORT_PERMA_BAN_LIMIT) {
    // –¢–†–ï–¢–ò–ô –ü–û–†–û–ì - –ü–ï–†–ú–ê–ë–ê–ù –í –û–ë–û–ò–• –ö–ê–ù–ê–õ–ê–•
    await banUser(reportedUserId, `${uniqueReports} reports from community members`, config.CHAT_CHANNEL_ID);
    // –¢–∞–∫–∂–µ –±–∞–Ω–∏–º –≤ NEWS –∫–∞–Ω–∞–ª–µ
    try {
      await bot.telegram.banChatMember(config.NEWS_CHANNEL_ID, reportedUserId);
      console.log(`‚úÖ User ${reportedUserId} auto-banned in NEWS channel (${uniqueReports} reports)`);
    } catch (err) {
      console.log(`‚ö†Ô∏è Cannot auto-ban in NEWS channel: ${err.message}`);
    }
    await ctx.reply(`üö´ User permanently banned in BOTH channels after ${uniqueReports} reports from community.`);
  } else if (uniqueReports >= config.REPORT_BAN_LIMIT && muteCount === 1) {
    // –í–¢–û–†–û–ô –ü–û–†–û–ì - –ú–£–¢ –ù–ê 7 –î–ù–ï–ô (—Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ)
    await muteUser(reportedUserId, 168, `${uniqueReports} reports from community (2nd offense)`, config.CHAT_CHANNEL_ID); // 7 –¥–Ω–µ–π = 168 —á–∞—Å–æ–≤
    await incrementMuteCount(reportedUserId);
    await ctx.reply(`‚ö†Ô∏è User muted for 7 DAYS after ${uniqueReports} reports (2nd offense).`);
  } else if (uniqueReports >= config.REPORT_MUTE_LIMIT && muteCount === 0) {
    // –ü–ï–†–í–´–ô –ü–û–†–û–ì - –ú–£–¢ –ù–ê 24 –ß–ê–°–ê (—Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ)
    await muteUser(reportedUserId, 24, `${uniqueReports} reports from community (1st offense)`, config.CHAT_CHANNEL_ID);
    await incrementMuteCount(reportedUserId);
    await ctx.reply(`‚ö†Ô∏è User muted for 24 hours after ${uniqueReports} reports (1st offense).`);
  }
});

bot.command('stats', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  try {
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE is_subscribed_news AND is_subscribed_chat) as active,
        COUNT(*) FILTER (WHERE wallet_address IS NOT NULL) as with_wallet,
        COUNT(*) FILTER (WHERE banned = true) as banned
      FROM telegram_users WHERE position IS NOT NULL
    `);
    
    const s = stats.rows[0];
    
    await ctx.reply(
      `üìä *AIRDROP STATISTICS*\n\n` +
      `üë• Total Registered: ${s.total}/${config.AIRDROP_LIMIT}\n` +
      `‚úÖ Active Participants: ${s.active}\n` +
      `üíº With Wallets: ${s.with_wallet}\n` +
      `üö´ Banned: ${s.banned}\n\n` +
      `üí∞ Total Distribution: ${(s.active * config.AIRDROP_REWARD).toLocaleString()} MAI`,
      { parse_mode: 'Markdown' }
    );
  } catch {
    ctx.reply('‚ùå Error retrieving statistics');
  }
});

bot.command('winners', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  try {
    const winners = await pool.query(`
      SELECT telegram_id, username, wallet_address, position
      FROM telegram_users
      WHERE is_subscribed_news = true 
        AND is_subscribed_chat = true
        AND wallet_address IS NOT NULL
        AND banned = false
        AND position IS NOT NULL
      ORDER BY position ASC
    `);
    
    let csv = 'Position,Telegram_ID,Username,Wallet_Address,Reward\n';
    winners.rows.forEach(w => {
      csv += `${w.position},${w.telegram_id},@${w.username},${w.wallet_address},${config.AIRDROP_REWARD}\n`;
    });
    
    await ctx.replyWithDocument({
      source: Buffer.from(csv),
      filename: `mai_airdrop_winners_${Date.now()}.csv`
    });
    
    await ctx.reply(
      `‚úÖ Exported ${winners.rows.length} eligible winners\n` +
      `üí∞ Total Distribution: ${(winners.rows.length * config.AIRDROP_REWARD).toLocaleString()} MAI`
    );
  } catch {
    ctx.reply('‚ùå Export error');
  }
});

// ===== –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø =====

bot.command('mute', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  let targetUserId;
  let hours = 24; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
  let reason = 'Violation of rules'; // –ø—Ä–∏—á–∏–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

  // –†–µ–∂–∏–º 1: –í –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Reply to message
  if (ctx.message.reply_to_message) {
    targetUserId = ctx.message.reply_to_message.from.id;
    hours = args[1] ? parseInt(args[1]) : 24;
    // –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ hours (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (args.length > 2 && !isNaN(parseInt(args[1]))) {
      reason = args.slice(2).join(' ') || 'Violation of rules';
    } else if (args.length > 1 && isNaN(parseInt(args[1]))) {
      // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ - —ç—Ç–æ –ø—Ä–∏—á–∏–Ω–∞
      hours = 24;
      reason = args.slice(1).join(' ');
    }
  }
  // –†–µ–∂–∏–º 2: –í –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ user_id
  else if (ctx.chat.type === 'private') {
    if (!args[1]) {
      return ctx.reply(
        '‚ö†Ô∏è *MUTE USER*\n\n' +
        'Usage: /mute <user_id> [hours] [reason]\n\n' +
        'Examples:\n' +
        '/mute 123456789 - mute for 24h (default)\n' +
        '/mute 123456789 48 - mute for 48h\n' +
        '/mute 123456789 48 spam - mute for 48h for spam',
        { parse_mode: 'Markdown' }
      );
    }
    targetUserId = parseInt(args[1]);
    hours = args[2] ? parseInt(args[2]) : 24;
    // –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ hours
    if (args.length > 3) {
      reason = args.slice(3).join(' ');
    }
  }
  // –û—à–∏–±–∫–∞: –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ reply
  else {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type:\n/mute [hours] [reason]\n\nExample: /mute 48 spam');
  }

  if (isNaN(hours) || hours < 1) {
    return ctx.reply('‚ùå Invalid hours! Must be >= 1');
  }

  // –ú—É—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±–æ–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö (–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ –µ—Å–ª–∏ –Ω–µ PM)
  if (ctx.chat.type !== 'private') {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ —á–∞—Ç–µ - –º—É—Ç–∏–º —Ç–∞–º
    await muteUser(targetUserId, hours, reason, ctx.chat.id);
  } else {
    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ PM - –º—É—Ç–∏–º –≤ –æ–±–æ–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö
    await muteUser(targetUserId, hours, reason, config.CHAT_CHANNEL_ID);
    // –¢–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–º—É—Ç–∏—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    try {
      const muteUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
      await bot.telegram.restrictChatMember(config.NEWS_CHANNEL_ID, targetUserId, {
        permissions: {
          can_send_messages: false,
          can_send_media_messages: false,
          can_send_polls: false,
          can_send_other_messages: false,
          can_add_web_page_previews: false,
          can_change_info: false,
          can_invite_users: false,
          can_pin_messages: false
        },
        until_date: Math.floor(muteUntil.getTime() / 1000)
      });
      console.log(`‚úÖ User ${targetUserId} also muted in NEWS channel`);
    } catch (err) {
      console.log(`‚ö†Ô∏è Cannot mute in NEWS channel: ${err.message}`);
    }
  }

  await incrementMuteCount(targetUserId);

  await ctx.reply(`‚úÖ User ${targetUserId} muted for ${hours} hours by admin.`);
});

bot.command('unmute', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  let targetUserId;

  // –†–µ–∂–∏–º 1: –í –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Reply to message
  if (ctx.message.reply_to_message) {
    targetUserId = ctx.message.reply_to_message.from.id;
  }
  // –†–µ–∂–∏–º 2: –í –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ user_id
  else if (ctx.chat.type === 'private') {
    if (!args[1]) {
      return ctx.reply(
        '‚ö†Ô∏è *UNMUTE USER*\n\n' +
        'Usage: /unmute <user_id>\n\n' +
        'Example:\n' +
        '/unmute 123456789',
        { parse_mode: 'Markdown' }
      );
    }
    targetUserId = parseInt(args[1]);
  }
  // –û—à–∏–±–∫–∞: –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ reply
  else {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /unmute');
  }

  // –†–∞–∑–º—É—Ç–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ CHAT –∫–∞–Ω–∞–ª–µ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –æ—Ç–∫—É–¥–∞ –∫–æ–º–∞–Ω–¥–∞)
  await unmuteUser(targetUserId, config.CHAT_CHANNEL_ID);

  await ctx.reply(`‚úÖ User ${targetUserId} unmuted by admin.`);
});

bot.command('ban', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  let targetUserId;
  let reason = 'Admin decision';

  // –†–µ–∂–∏–º 1: –í –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Reply to message
  if (ctx.message.reply_to_message) {
    targetUserId = ctx.message.reply_to_message.from.id;
    reason = ctx.message.text.replace('/ban', '').trim() || 'Admin decision';
  }
  // –†–µ–∂–∏–º 2: –í –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ user_id
  else if (ctx.chat.type === 'private') {
    if (!args[1]) {
      return ctx.reply(
        '‚ö†Ô∏è *BAN USER*\n\n' +
        'Usage: /ban <user_id> [reason]\n\n' +
        'Examples:\n' +
        '/ban 123456789 - ban (reason: Admin decision)\n' +
        '/ban 123456789 —Å–ø–∞–º - ban for spam',
        { parse_mode: 'Markdown' }
      );
    }
    targetUserId = parseInt(args[1]);
    // –ü—Ä–∏—á–∏–Ω–∞ - –≤—Å–µ —á—Ç–æ –ø–æ—Å–ª–µ user_id
    reason = args.slice(2).join(' ') || 'Admin decision';
  }
  // –û—à–∏–±–∫–∞: –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ reply
  else {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /ban [reason]');
  }

  // –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –û–ë–û–ò–• –∫–∞–Ω–∞–ª–∞—Ö (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –æ—Ç–∫—É–¥–∞ –∫–æ–º–∞–Ω–¥–∞)
  // –ë–∞–Ω–∏–º –≤ CHAT –∫–∞–Ω–∞–ª–µ
  await banUser(targetUserId, reason, config.CHAT_CHANNEL_ID);

  // –¢–∞–∫–∂–µ –±–∞–Ω–∏–º –≤ NEWS –∫–∞–Ω–∞–ª–µ
  try {
    await bot.telegram.banChatMember(config.NEWS_CHANNEL_ID, targetUserId);
    console.log(`‚úÖ User ${targetUserId} also banned in NEWS channel`);
  } catch (err) {
    console.log(`‚ö†Ô∏è Cannot ban in NEWS channel: ${err.message}`);
  }

  await ctx.reply(`üö´ User ${targetUserId} permanently banned by admin in BOTH channels.\nReason: ${reason}`);
});

bot.command('unban', async (ctx) => {
  if (ctx.chat.type !== 'private') {
    try {
      await ctx.deleteMessage();
    } catch (e) {
      console.log('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã');
    }
  }
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  let targetUserId;

  // –†–µ–∂–∏–º 1: –í –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Reply to message
  if (ctx.message.reply_to_message) {
    targetUserId = ctx.message.reply_to_message.from.id;
  }
  // –†–µ–∂–∏–º 2: –í –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ user_id
  else if (ctx.chat.type === 'private') {
    if (!args[1]) {
      return ctx.reply(
        '‚ö†Ô∏è *UNBAN USER*\n\n' +
        'Usage: /unban <user_id>\n\n' +
        'Example:\n' +
        '/unban 123456789',
        { parse_mode: 'Markdown' }
      );
    }
    targetUserId = parseInt(args[1]);
  }
  // –û—à–∏–±–∫–∞: –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ reply
  else {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /unban');
  }

  // –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –û–ë–û–ò–• –∫–∞–Ω–∞–ª–∞—Ö (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ –æ—Ç–∫—É–¥–∞ –∫–æ–º–∞–Ω–¥–∞)
  // –†–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤ CHAT –∫–∞–Ω–∞–ª–µ
  await unbanUser(targetUserId, config.CHAT_CHANNEL_ID);

  // –¢–∞–∫–∂–µ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ–º –≤ NEWS –∫–∞–Ω–∞–ª–µ
  try {
    await bot.telegram.unbanChatMember(config.NEWS_CHANNEL_ID, targetUserId);
    console.log(`‚úÖ User ${targetUserId} also unbanned in NEWS channel`);
  } catch (err) {
    console.log(`‚ö†Ô∏è Cannot unban in NEWS channel: ${err.message}`);
  }

  await ctx.reply(`‚úÖ User ${targetUserId} unbanned by admin in BOTH channels.`);
});

bot.command('userinfo', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;

  const args = ctx.message.text.split(' ');
  let targetUserId;

  // –†–µ–∂–∏–º 1: –í –≥—Ä—É–ø–ø–µ —á–µ—Ä–µ–∑ Reply to message
  if (ctx.message.reply_to_message) {
    targetUserId = ctx.message.reply_to_message.from.id;
  }
  // –†–µ–∂–∏–º 2: –í –ª–∏—á–∫–µ —á–µ—Ä–µ–∑ user_id
  else if (ctx.chat.type === 'private') {
    if (!args[1]) {
      return ctx.reply(
        '‚ö†Ô∏è <b>USER INFO</b>\n\n' +
        'Usage: /userinfo <user_id>\n\n' +
        'Example:\n' +
        '/userinfo 123456789',
        { parse_mode: 'HTML' }
      );
    }
    targetUserId = parseInt(args[1]);
  }
  // –û—à–∏–±–∫–∞: –≤ –≥—Ä—É–ø–ø–µ –±–µ–∑ reply
  else {
    return ctx.reply('‚ö†Ô∏è Reply to user\'s message and type /userinfo');
  }

  try {
    const userStatus = await getUserStatus(targetUserId);
    const reportsResult = await pool.query(
      `SELECT COUNT(DISTINCT reporter_id) as unique_reports FROM user_reports WHERE reported_user_id = $1`,
      [targetUserId]
    );
    const uniqueReports = parseInt(reportsResult.rows[0]?.unique_reports || 0);

    if (!userStatus) {
      return ctx.reply('‚ùå User not found in database.');
    }

    const info = `üìä <b>USER INFORMATION</b>\n\n` +
      `ID: <code>${userStatus.telegram_id}</code>\n` +
      `Username: @${userStatus.username || 'N/A'}\n` +
      `Name: ${userStatus.first_name || 'N/A'}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `‚ö†Ô∏è Warnings: ${userStatus.warnings || 0}\n` +
      `üìä Reports (total): ${userStatus.reports_received || 0}\n` +
      `üë• Unique Reports: ${uniqueReports}\n` +
      `üîá Mute Count: ${userStatus.mute_count || 0}\n` +
      `üö´ Banned: ${userStatus.banned ? 'YES' : 'NO'}\n` +
      `üîá Muted Until: ${userStatus.muted_until ? new Date(userStatus.muted_until).toLocaleString() : 'NO'}\n\n` +
      `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
      `üé´ Airdrop Position: ${userStatus.position ? `#${userStatus.position}` : 'Not registered'}\n` +
      `üíº Wallet: ${userStatus.wallet_address ? `<code>${userStatus.wallet_address.substring(0, 20)}...</code>` : 'Not linked'}`;

    // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ —á–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ª–∏—á–∫—É –∞–¥–º–∏–Ω—É
    if (ctx.chat.type !== 'private') {
      await bot.telegram.sendMessage(ctx.from.id, info, { parse_mode: 'HTML' });
      // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∏–∑ —á–∞—Ç–∞
      try {
        await ctx.deleteMessage();
      } catch (e) {
        // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
      }
    } else {
      // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—É–¥–∞ –∂–µ
      await ctx.reply(info, { parse_mode: 'HTML' });
    }
  } catch (err) {
    console.error('‚ùå Error userinfo:', err.message);
    await ctx.reply('‚ùå Error fetching user info.');
  }
});

bot.command('pin', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) {
    return ctx.reply('‚ùå Only admins can use this command!');
  }
  
  if (ctx.chat.type === 'private') {
    return ctx.reply('‚ùå This command works only in groups!');
  }
  
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.url('ü§ñ Start Bot', `https://t.me/${ctx.botInfo.username}?start=pin`)],
    [Markup.button.url('üåê Buy MAI', 'https://miningmai.com')],
    [Markup.button.url('üì± News Channel', 'https://t.me/mainingmai_news')],
    [Markup.button.url('üé® MAI Stickers', 't.me/addstickers/MAImining')]
  ]);
  
  try {
    const pinMsg = await ctx.replyWithPhoto(
  { source: './images/mai-pin.webp' },
  {
    caption: `üöÄ WELCOME TO MAI!
Decentralized AI Platform

üéÅ COMMUNITY AIRDROP:
‚úÖ 5,000 MAI FREE for first 20,000 participants
‚úÖ How to participate:
   1Ô∏è‚É£ Subscribe @mainingmai_news
   2Ô∏è‚É£ Subscribe @mainingmai_chat
   3Ô∏è‚É£ Register: /airdrop
‚úÖ STAY subscribed until listing
‚úÖ Daily check 00:00 UTC
‚úÖ Distribution: Within 10 days after listing
‚ùå Unsubscribe = Position lost!
Claim now! üöÄ

üéÅ COMMUNITY REFERRAL:
üí∞ Earn 1,000 MAI per friend!
üëâ Friend subscribes = You earn
üëâ Unlimited invites!
Command: /referral

üíé PRESALE:
ü™ô 7B ‚Ä¢ 14 stages ‚Ä¢ üî• 80% OFF
üíµ $0.0005 ‚Üí $0.0020
üé® NFT: +5-20% forever (min $50)

üéØ EARN MORE:
üèÜ 800M MAI ‚Ä¢ üé® 1,400 NFTs ‚Ä¢ üíµ USDT
/tasks ‚Ä¢ /nftairdrop ‚Ä¢ /refpresale

üõ°Ô∏è RULES:
‚úÖ Discussions OK 
‚ùå Spam/Scams = Ban

‚ö° Auto-moderation:
‚Ä¢ 3 warns ‚Üí Ban
‚Ä¢ 10 reports ‚Üí Mute 24h
‚Ä¢ 20 reports ‚Üí Mute 7d
‚Ä¢ 30 reports ‚Üí Perma ban
üì¢ Report: Reply + /report

üîó OFFICIAL LINKS
üåê miningmai.com
üì¢ @mainingmai_news
üí¨ @mainingmai_chat
ü§ñ @mai_verify_bot
üé® t.me/addstickers/MAImining

üëá Click buttons below!`,
    ...keyboard
  }
);
    
    await ctx.telegram.pinChatMessage(ctx.chat.id, pinMsg.message_id);
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    
    await ctx.deleteMessage().catch(() => {});
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ /pin:', err.message);
    await ctx.reply(`‚ùå Error: ${err.message}`);
  }
});

bot.action(/cmd_(.+)/, async (ctx) => {
  const command = ctx.match[1];
  await ctx.answerCbQuery();
  
  const commands = {
  presale: () => sendToPrivate(ctx, getPresaleText()),
  nft: () => sendToPrivate(ctx, getNftText(), { parse_mode: 'Markdown' }),
  nftairdrop: async () => {
    const text = `üé® AIRDROP NFT PROGRAM\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nEarn exclusive Silver NFTs by completing tasks!\n\n100 NFTs per stage (1-14)\nMinimum purchase: 10,000 MAI\nFirst 100 users per stage win\n\nBenefits:\n‚úÖ +2 months early mining\n‚úÖ 6 months governance voting\n‚úÖ +10% mining bonus FOREVER\n\nTotal: 1,400 Airdrop NFTs\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\nUse /nftairdrop for full details\nüåê https://miningmai.com`;
    await sendToPrivate(ctx, text);
  },
  tasks: () => sendToPrivate(ctx, getTasksText(), { parse_mode: 'Markdown' }),
  refpresale: () => sendToPrivate(ctx, getReferralText(), { parse_mode: 'Markdown' }),
  faq: () => sendToPrivate(ctx, getFaqText()),
  rules: () => sendToPrivate(ctx, getRulesText(), { parse_mode: 'Markdown' })
};
  
  if (commands[command]) {
    await commands[command]();
  }
});

// ============================================================
// PROBLEMS COMMAND - CALLBACK HANDLERS
// ============================================================

bot.action('prob_registration', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå Can\'t register for airdrop', 'prob_reg_cant')],
    [Markup.button.callback('üîÑ Lost my position', 'prob_reg_lost')],
    [Markup.button.callback('‚è±Ô∏è Registration not working', 'prob_reg_notwork')],
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `üìã <b>REGISTRATION ISSUES</b>\n\n` +
    `Select your problem:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `‚ùå Can't register for airdrop\n` +
    `üîÑ Lost my position\n` +
    `‚è±Ô∏è Registration not working\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_wallet', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîë Can\'t change wallet', 'prob_wal_change')],
    [Markup.button.callback('‚ö†Ô∏è Invalid wallet error', 'prob_wal_invalid')],
    [Markup.button.callback('üîÅ Wallet already registered', 'prob_wal_duplicate')],
    [Markup.button.callback('‚ùì Where to get Solana wallet?', 'prob_wal_get')],
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `üíº <b>WALLET PROBLEMS</b>\n\n` +
    `Select your problem:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üîë Can't change wallet\n` +
    `‚ö†Ô∏è Invalid wallet error\n` +
    `üîÅ Wallet already registered\n` +
    `‚ùì Where to get Solana wallet?\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_subscriptions', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ùå Says I\'m not subscribed but I am', 'prob_sub_false')],
    [Markup.button.callback('üì± Can\'t join channel/chat', 'prob_sub_join')],
    [Markup.button.callback('üîÑ Subscription status not updating', 'prob_sub_update')],
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `üì∫ <b>SUBSCRIPTION ISSUES</b>\n\n` +
    `Select your problem:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `‚ùå Says I'm not subscribed but I am\n` +
    `üì± Can't join channel/chat\n` +
    `üîÑ Subscription status not updating\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_referral', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚ùì How does it work?', 'prob_ref_how')],
    [Markup.button.callback('üîó Can\'t get referral link', 'prob_ref_link')],
    [Markup.button.callback('üí∞ Reward not credited', 'prob_ref_reward')],
    [Markup.button.callback('‚ûñ Lost reward (friend unsubscribed)', 'prob_ref_lost')],
    [Markup.button.callback('üìä How to check my stats?', 'prob_ref_stats')],
    [Markup.button.callback('üö´ What if I get banned?', 'prob_ref_ban')],
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `üéÅ <b>COMMUNITY REFERRAL PROGRAM</b>\n\n` +
    `Select your question:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `‚ùì How does it work?\n` +
    `üîó Can't get referral link\n` +
    `üí∞ Reward not credited\n` +
    `‚ûñ Lost reward (friend unsubscribed)\n` +
    `üìä How to check my stats?\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ban', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚õî I got banned, what to do?', 'prob_ban_banned')],
    [Markup.button.callback('üîá I got muted, why?', 'prob_ban_muted')],
    [Markup.button.callback('‚ùì How to check my warnings?', 'prob_ban_warnings')],
    [Markup.button.callback('üìä How warning system works?', 'prob_ban_system')],
    [Markup.button.callback('‚öñÔ∏è How to appeal ban/mute?', 'prob_ban_appeal')],
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `üö´ <b>BAN & MUTE</b>\n\n` +
    `Select your problem:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `‚õî I got banned, what to do?\n` +
    `üîá I got muted, why?\n` +
    `‚ùì How to check my warnings?\n` +
    `üìä How warning system works?\n` +
    `‚öñÔ∏è How to appeal ban/mute?\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_notifications', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîï Not receiving bot messages', 'prob_notif_not')],
    [Markup.button.callback('üì¨ How to enable notifications?', 'prob_notif_enable')],
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `üîî <b>NOTIFICATIONS & ALERTS</b>\n\n` +
    `Select your problem:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üîï Not receiving bot messages\n` +
    `üì¨ How to enable notifications?\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_other', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Menu', 'prob_back')]
  ]);

  const message =
    `‚ùì <b>OTHER QUESTIONS</b>\n\n` +
    `For general questions not covered in other categories:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üìö Check /faq for frequently asked questions\n` +
    `üìã Check /rules for community guidelines\n` +
    `üÜò Check /help for all available commands\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still need help?</b>\n\n` +
    `Use /admin to contact administrators.\n\n` +
    `Example:\n` +
    `<code>/admin I need help with...</code>\n\n` +
    `<b>Limits:</b>\n` +
    `‚Ä¢ 3 messages per day\n` +
    `‚Ä¢ 30 min cooldown between messages\n` +
    `‚Ä¢ Minimum 10 characters`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// ============================================================
// DETAILED PROBLEM SOLUTIONS
// ============================================================

// REGISTRATION PROBLEMS
bot.action('prob_reg_cant', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Registration Issues', 'prob_registration')]
  ]);

  const message =
    `‚ùå <b>CAN'T REGISTER FOR AIRDROP</b>\n\n` +
    `Possible reasons:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `1Ô∏è‚É£ <b>Airdrop limit reached (${config.AIRDROP_LIMIT.toLocaleString()} spots)</b>\n` +
    `   Solution: Follow @mainingmai_news for future airdrops\n\n` +
    `2Ô∏è‚É£ <b>Not subscribed to required channels</b>\n` +
    `   Solution:\n` +
    `   ‚Ä¢ Join @mainingmai_news\n` +
    `   ‚Ä¢ Join @mainingmai_chat\n` +
    `   ‚Ä¢ Then try /airdrop again\n\n` +
    `3Ô∏è‚É£ <b>Wallet already used by another user</b>\n` +
    `   Solution: Use a different Solana wallet\n\n` +
    `4Ô∏è‚É£ <b>You're banned from community</b>\n` +
    `   Solution: Contact admin via /admin\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still having issues?</b>\n` +
    `Use /admin to contact support`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_reg_lost', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Registration Issues', 'prob_registration')]
  ]);

  const message =
    `üîÑ <b>LOST MY POSITION</b>\n\n` +
    `Why you might lose your position:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `1Ô∏è‚É£ <b>Unsubscribed from required channels</b>\n` +
    `   Daily check at 00:00 UTC verifies subscriptions\n` +
    `   If not subscribed ‚Üí position lost PERMANENTLY\n\n` +
    `2Ô∏è‚É£ <b>Left the community chat</b>\n` +
    `   Must stay in @mainingmai_chat\n` +
    `   Leaving = losing position\n\n` +
    `3Ô∏è‚É£ <b>Received permanent ban</b>\n` +
    `   3 warnings from admins = ban + loss of position\n` +
    `   30 community reports = ban + loss of position\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è IMPORTANT:</b>\n` +
    `Lost positions CANNOT be restored!\n` +
    `Your spot goes to the next person in queue.\n\n` +
    `Check your status: /status\n\n` +
    `<b>Prevention:</b>\n` +
    `‚úÖ Stay subscribed to @mainingmai_news\n` +
    `‚úÖ Stay in @mainingmai_chat\n` +
    `‚úÖ Follow /rules\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Questions?</b>\n` +
    `Use /admin to contact support`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_reg_notwork', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Registration Issues', 'prob_registration')]
  ]);

  const message =
    `‚è±Ô∏è <b>REGISTRATION NOT WORKING</b>\n\n` +
    `Troubleshooting steps:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `1Ô∏è‚É£ <b>Check subscriptions first</b>\n` +
    `   ‚Ä¢ Join @mainingmai_news\n` +
    `   ‚Ä¢ Join @mainingmai_chat\n` +
    `   ‚Ä¢ Wait 1-2 minutes\n` +
    `   ‚Ä¢ Then use /airdrop\n\n` +
    `2Ô∏è‚É£ <b>Make sure you started the bot</b>\n` +
    `   ‚Ä¢ Use /start in private chat with bot\n` +
    `   ‚Ä¢ Don't use commands in group chat\n\n` +
    `3Ô∏è‚É£ <b>Check if bot responds to other commands</b>\n` +
    `   ‚Ä¢ Try /status or /help\n` +
    `   ‚Ä¢ If bot doesn't respond ‚Üí restart bot: /start\n\n` +
    `4Ô∏è‚É£ <b>Verify your wallet address format</b>\n` +
    `   ‚Ä¢ Must be Solana wallet (32-44 characters)\n` +
    `   ‚Ä¢ Base58 format\n` +
    `   ‚Ä¢ Example: 7xK3N9kZXxY2pQwM5vH8Sk1wmVE5...\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still not working?</b>\n` +
    `Contact admin: /admin Your problem description`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// WALLET PROBLEMS
bot.action('prob_wal_change', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Wallet Problems', 'prob_wallet')]
  ]);

  const message =
    `üîë <b>CAN'T CHANGE WALLET</b>\n\n` +
    `How to change your wallet address:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Step 1:</b> Use /changewallet command\n\n` +
    `<b>Step 2:</b> Send your NEW Solana wallet address\n\n` +
    `<b>Step 3:</b> Bot will verify and update\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Requirements:</b>\n` +
    `‚úÖ Must be registered first\n` +
    `‚úÖ Must have a position\n` +
    `‚úÖ New wallet must be different\n` +
    `‚úÖ New wallet cannot be used by others\n\n` +
    `<b>‚ö†Ô∏è IMPORTANT:</b>\n` +
    `‚Ä¢ Double-check the address!\n` +
    `‚Ä¢ Wrong address = Lost tokens forever!\n` +
    `‚Ä¢ Each wallet can only be used once\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still having issues?</b>\n` +
    `Use /admin to contact support`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_wal_invalid', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Wallet Problems', 'prob_wallet')]
  ]);

  const message =
    `‚ö†Ô∏è <b>INVALID WALLET ERROR</b>\n\n` +
    `This error means your wallet address format is incorrect.\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Solana wallet requirements:</b>\n\n` +
    `‚úÖ Length: 32-44 characters\n` +
    `‚úÖ Format: Base58 (letters and numbers)\n` +
    `‚úÖ No special characters\n` +
    `‚úÖ No spaces\n\n` +
    `<b>Example of valid address:</b>\n` +
    `<code>7xK3N9kZXxY2pQwM5vH8Sk1wmVE5...</code>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Common mistakes:</b>\n\n` +
    `‚ùå Using Bitcoin/Ethereum wallet\n` +
    `‚ùå Adding extra spaces\n` +
    `‚ùå Copying incomplete address\n` +
    `‚ùå Using email or username instead\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>How to get correct address:</b>\n\n` +
    `1. Open your Solana wallet app\n` +
    `2. Find "Receive" or "Wallet Address"\n` +
    `3. Copy the FULL address\n` +
    `4. Paste it to the bot (no editing!)\n\n` +
    `Don't have Solana wallet? See:\n` +
    `"Where to get Solana wallet?" in menu`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_wal_duplicate', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Wallet Problems', 'prob_wallet')]
  ]);

  const message =
    `üîÅ <b>WALLET ALREADY REGISTERED</b>\n\n` +
    `This error means the wallet address you provided is already being used by another user.\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Why this happens:</b>\n\n` +
    `‚Ä¢ Each wallet can only be registered ONCE\n` +
    `‚Ä¢ Someone else already registered with this wallet\n` +
    `‚Ä¢ Prevents duplicate rewards\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Solution:</b>\n\n` +
    `1Ô∏è‚É£ Use a DIFFERENT Solana wallet address\n` +
    `2Ô∏è‚É£ Create a new wallet if needed\n` +
    `3Ô∏è‚É£ Make sure you're using YOUR OWN wallet\n\n` +
    `<b>‚ö†Ô∏è IMPORTANT:</b>\n` +
    `‚Ä¢ Don't share wallets with friends/family\n` +
    `‚Ä¢ Each person needs their own unique wallet\n` +
    `‚Ä¢ Using someone else's wallet = No rewards!\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `Need to create new wallet? See:\n` +
    `"Where to get Solana wallet?" in menu\n\n` +
    `<b>Questions?</b>\n` +
    `Use /admin to contact support`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_wal_get', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Wallet Problems', 'prob_wallet')]
  ]);

  const message =
    `‚ùì <b>WHERE TO GET SOLANA WALLET?</b>\n\n` +
    `Popular Solana wallet options:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üì± MOBILE WALLETS:</b>\n\n` +
    `1Ô∏è‚É£ <b>Phantom</b> (Recommended)\n` +
    `   ‚Ä¢ Easy to use\n` +
    `   ‚Ä¢ Most popular\n` +
    `   ‚Ä¢ iOS & Android\n` +
    `   ‚Ä¢ phantom.app\n\n` +
    `2Ô∏è‚É£ <b>Solflare</b>\n` +
    `   ‚Ä¢ Secure & reliable\n` +
    `   ‚Ä¢ iOS & Android\n` +
    `   ‚Ä¢ solflare.com\n\n` +
    `3Ô∏è‚É£ <b>Trust Wallet</b>\n` +
    `   ‚Ä¢ Multi-chain support\n` +
    `   ‚Ä¢ Includes Solana\n` +
    `   ‚Ä¢ trustwallet.com\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üíª BROWSER EXTENSIONS:</b>\n\n` +
    `‚Ä¢ Phantom (Chrome, Firefox, Brave)\n` +
    `‚Ä¢ Solflare (Chrome, Firefox)\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>How to get your address after installing:</b>\n\n` +
    `1. Create new wallet or import existing\n` +
    `2. Find "Receive" or "Deposit"\n` +
    `3. Select "Solana" (SOL)\n` +
    `4. Copy your wallet address\n` +
    `5. Paste it to the bot\n\n` +
    `<b>‚ö†Ô∏è SECURITY TIPS:</b>\n` +
    `‚Ä¢ NEVER share your seed phrase!\n` +
    `‚Ä¢ Save your recovery phrase safely\n` +
    `‚Ä¢ Use official wallet apps only\n` +
    `‚Ä¢ Double-check wallet addresses\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Questions?</b>\n` +
    `Use /admin to contact support`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// SUBSCRIPTION PROBLEMS
bot.action('prob_sub_false', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Subscription Issues', 'prob_subscriptions')]
  ]);

  const message =
    `‚ùå <b>SAYS I'M NOT SUBSCRIBED BUT I AM</b>\n\n` +
    `If bot shows you're not subscribed but you are:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Quick fixes:</b>\n\n` +
    `1Ô∏è‚É£ <b>Wait 1-2 minutes after subscribing</b>\n` +
    `   Telegram needs time to update\n\n` +
    `2Ô∏è‚É£ <b>Make sure you're SUBSCRIBED (not just viewing)</b>\n` +
    `   ‚Ä¢ Open @mainingmai_news\n` +
    `   ‚Ä¢ Tap "JOIN" or "SUBSCRIBE" button\n` +
    `   ‚Ä¢ Same for @mainingmai_chat\n\n` +
    `3Ô∏è‚É£ <b>Check if you were muted/restricted</b>\n` +
    `   If you were previously muted, you might need to:\n` +
    `   ‚Ä¢ Leave the channel\n` +
    `   ‚Ä¢ Wait 30 seconds\n` +
    `   ‚Ä¢ Join again\n\n` +
    `4Ô∏è‚É£ <b>Restart the bot</b>\n` +
    `   ‚Ä¢ Use /start command\n` +
    `   ‚Ä¢ Wait a few seconds\n` +
    `   ‚Ä¢ Check /status again\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Subscription status updates:</b>\n` +
    `‚Ä¢ Real-time when you join/leave\n` +
    `‚Ä¢ Daily check at 00:00 UTC\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still showing wrong status?</b>\n` +
    `Contact admin: /admin\n` +
    `Include: Your user ID from /status`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_sub_join', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Subscription Issues', 'prob_subscriptions')]
  ]);

  const message =
    `üì± <b>CAN'T JOIN CHANNEL/CHAT</b>\n\n` +
    `Troubleshooting steps:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `1Ô∏è‚É£ <b>Check if you're banned</b>\n` +
    `   If banned ‚Üí contact admin via /admin\n\n` +
    `2Ô∏è‚É£ <b>Try joining via direct links:</b>\n\n` +
    `   News Channel:\n` +
    `   @mainingmai_news\n` +
    `   t.me/mainingmai_news\n\n` +
    `   Community Chat:\n` +
    `   @mainingmai_chat\n` +
    `   t.me/mainingmai_chat\n\n` +
    `3Ô∏è‚É£ <b>Clear Telegram cache</b>\n` +
    `   Settings ‚Üí Data & Storage ‚Üí Clear Cache\n\n` +
    `4Ô∏è‚É£ <b>Update Telegram app</b>\n` +
    `   Make sure you have latest version\n\n` +
    `5Ô∏è‚É£ <b>Check internet connection</b>\n` +
    `   Try switching WiFi/Mobile data\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Error: "You are banned"</b>\n` +
    `See "Ban & Mute" section in /problems\n\n` +
    `<b>Other errors?</b>\n` +
    `Contact admin: /admin`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_sub_update', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Subscription Issues', 'prob_subscriptions')]
  ]);

  const message =
    `üîÑ <b>SUBSCRIPTION STATUS NOT UPDATING</b>\n\n` +
    `How subscription tracking works:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Automatic updates:</b>\n\n` +
    `‚úÖ When you join channel/chat\n` +
    `‚úÖ When you leave channel/chat\n` +
    `‚úÖ Daily check at 00:00 UTC\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>If status not updating:</b>\n\n` +
    `1Ô∏è‚É£ <b>Wait 1-2 minutes</b>\n` +
    `   Updates aren't instant\n\n` +
    `2Ô∏è‚É£ <b>Make sure you actually joined</b>\n` +
    `   Look for "JOINED" or "SUBSCRIBED" status\n\n` +
    `3Ô∏è‚É£ <b>Check with /status command</b>\n` +
    `   Shows current subscription status\n\n` +
    `4Ô∏è‚É£ <b>Wait for daily check</b>\n` +
    `   At 00:00 UTC all statuses refresh\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è IMPORTANT:</b>\n\n` +
    `If you unsubscribe and don't resubscribe before the daily check (00:00 UTC), you will LOSE your position permanently!\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still not updating after 24 hours?</b>\n` +
    `Contact admin: /admin`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// BAN & MUTE PROBLEMS
bot.action('prob_ban_banned', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Ban & Mute', 'prob_ban')]
  ]);

  const message =
    `‚õî <b>I GOT BANNED, WHAT TO DO?</b>\n\n` +
    `Possible reasons for ban:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `1Ô∏è‚É£ <b>3 warnings from admins</b>\n` +
    `   ‚Ä¢ 1st violation = ‚ö†Ô∏è Warning\n` +
    `   ‚Ä¢ 2nd violation = ‚ö†Ô∏è Final Warning\n` +
    `   ‚Ä¢ 3rd violation = üö´ Permanent Ban\n\n` +
    `2Ô∏è‚É£ <b>30 reports from community members</b>\n` +
    `   ‚Ä¢ 10 reports = üîá 24h mute\n` +
    `   ‚Ä¢ 20 reports = üîá 7 days mute\n` +
    `   ‚Ä¢ 30 reports = üö´ Permanent Ban\n\n` +
    `3Ô∏è‚É£ <b>Serious rule violations:</b>\n` +
    `   ‚Ä¢ Spam, scam links\n` +
    `   ‚Ä¢ Advertising other projects\n` +
    `   ‚Ä¢ Harassment, hate speech\n` +
    `   ‚Ä¢ NSFW content\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è CONSEQUENCES OF BAN:</b>\n\n` +
    `‚ùå Loss of airdrop position\n` +
    `‚ùå Loss of all rewards\n` +
    `‚ùå Cannot restore position\n` +
    `‚ùå Cannot participate in future airdrops\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>How to appeal?</b>\n\n` +
    `If you believe the ban was unfair:\n` +
    `Use /admin command to contact administrators\n\n` +
    `Example:\n` +
    `<code>/admin I was banned for [reason], but I didn't violate rules because...</code>\n\n` +
    `<b>‚ö†Ô∏è Note:</b> Admin decision is final`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ban_muted', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Ban & Mute', 'prob_ban')]
  ]);

  const message =
    `üîá <b>I GOT MUTED, WHY?</b>\n\n` +
    `Mute system explained:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>1Ô∏è‚É£ Mute from admins:</b>\n\n` +
    `‚Ä¢ For rule violations\n` +
    `‚Ä¢ Duration: admin's discretion\n` +
    `‚Ä¢ Usually: 1 hour - 7 days\n\n` +
    `<b>2Ô∏è‚É£ Mute from community reports:</b>\n\n` +
    `‚Ä¢ 10 unique reports = üîá 24 hours\n` +
    `‚Ä¢ 20 unique reports = üîá 7 days\n` +
    `‚Ä¢ 30 unique reports = üö´ Ban\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è WHILE MUTED:</b>\n\n` +
    `‚úÖ You stay in chat\n` +
    `‚úÖ Airdrop position preserved\n` +
    `‚ùå Can't send messages\n` +
    `‚úÖ Can read chat\n` +
    `‚úÖ Can use bot commands in DM\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>What to do?</b>\n\n` +
    `1. Wait for mute to expire\n` +
    `2. Read /rules to avoid future mutes\n` +
    `3. If you think mute was unfair ‚Üí /admin\n\n` +
    `<b>How to check mute duration?</b>\n` +
    `Contact admin: /admin`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ban_warnings', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Ban & Mute', 'prob_ban')]
  ]);

  const message =
    `‚ùì <b>HOW TO CHECK MY WARNINGS?</b>\n\n` +
    `Use the /status command\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>In your status you'll see:</b>\n\n` +
    `‚ö†Ô∏è Warnings: 1/3\n` +
    `üìä Reports: 5\n\n` +
    `<b>What this means:</b>\n\n` +
    `‚Ä¢ <b>Warnings</b> - from admins (max 3)\n` +
    `‚Ä¢ <b>Reports</b> - from community (ban at 30)\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è WARNING SYSTEM:</b>\n\n` +
    `1/3 - ‚ö†Ô∏è First warning\n` +
    `2/3 - ‚ö†Ô∏è Final warning (last chance!)\n` +
    `3/3 - üö´ Permanent ban + loss of rewards\n\n` +
    `<b>üìä REPORT SYSTEM:</b>\n\n` +
    `10 reports - üîá 24h mute\n` +
    `20 reports - üîá 7 days mute\n` +
    `30 reports - üö´ Permanent ban\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>How to avoid warnings?</b>\n\n` +
    `‚úÖ Read /rules carefully\n` +
    `‚úÖ Be respectful to others\n` +
    `‚úÖ Don't spam or advertise\n` +
    `‚úÖ Stay on-topic\n` +
    `‚úÖ Help newcomers\n\n` +
    `Check your status now: /status`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ban_system', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Ban & Mute', 'prob_ban')]
  ]);

  const message =
    `üìä <b>HOW WARNING SYSTEM WORKS?</b>\n\n` +
    `Two types of moderation:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>1Ô∏è‚É£ FROM ADMINS:</b>\n\n` +
    `‚Ä¢ 1st violation = ‚ö†Ô∏è Warning\n` +
    `‚Ä¢ 2nd violation = ‚ö†Ô∏è Final Warning\n` +
    `‚Ä¢ 3rd violation = üö´ Permanent Ban\n\n` +
    `Admins warn for:\n` +
    `‚ùå Spam & flooding\n` +
    `‚ùå Other project ads\n` +
    `‚ùå Scam links\n` +
    `‚ùå Harassment\n` +
    `‚ùå NSFW content\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>2Ô∏è‚É£ FROM COMMUNITY (reports):</b>\n\n` +
    `Command: /report (reply to violator's message)\n\n` +
    `‚Ä¢ 10 unique reports = üîá 24h mute\n` +
    `‚Ä¢ 20 unique reports = üîá 7 days mute\n` +
    `‚Ä¢ 30 unique reports = üö´ Permanent ban\n\n` +
    `Only UNIQUE users count!\n` +
    `Same person can't report you multiple times\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è WHEN BANNED:</b>\n\n` +
    `‚ùå Loss of airdrop position\n` +
    `‚ùå Loss of all MAI rewards\n` +
    `‚ùå Cannot restore old position\n` +
    `‚ùå Removed from community\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `Check your status: /status\n` +
    `Community rules: /rules`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ban_appeal', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Ban & Mute', 'prob_ban')]
  ]);

  const message =
    `‚öñÔ∏è <b>HOW TO APPEAL BAN/MUTE?</b>\n\n` +
    `If you believe punishment was unfair:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Step 1: Use /admin command</b>\n\n` +
    `Example:\n` +
    `<code>/admin I was banned for [reason], but I didn't violate rules because...</code>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Step 2: Provide details</b>\n\n` +
    `Include in your message:\n` +
    `‚Ä¢ Why you think ban/mute is unfair\n` +
    `‚Ä¢ What exactly happened\n` +
    `‚Ä¢ Your telegram ID (found in /status)\n` +
    `‚Ä¢ Any relevant context\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>/admin command limits:</b>\n\n` +
    `‚Ä¢ 3 messages per day\n` +
    `‚Ä¢ 30 min cooldown between messages\n` +
    `‚Ä¢ Minimum 10 characters per message\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è IMPORTANT:</b>\n\n` +
    `‚Ä¢ Be polite and respectful\n` +
    `‚Ä¢ Admins will review your case\n` +
    `‚Ä¢ Decision is final\n` +
    `‚Ä¢ Spamming /admin = ignored\n` +
    `‚Ä¢ False appeals = permanent ignore\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Prevention is better than appeal!</b>\n\n` +
    `Read community rules: /rules`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// NOTIFICATION PROBLEMS
bot.action('prob_notif_not', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Notifications', 'prob_notifications')]
  ]);

  const message =
    `üîï <b>NOT RECEIVING BOT MESSAGES</b>\n\n` +
    `Troubleshooting steps:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>1Ô∏è‚É£ Check if bot is blocked</b>\n\n` +
    `‚Ä¢ Go to bot's private chat\n` +
    `‚Ä¢ If you see "RESTART" or "UNBLOCK" button ‚Üí click it\n` +
    `‚Ä¢ Then use /start\n\n` +
    `<b>2Ô∏è‚É£ Start the bot first</b>\n\n` +
    `‚Ä¢ Open private chat with bot\n` +
    `‚Ä¢ Send /start command\n` +
    `‚Ä¢ Bot must be started to send you messages\n\n` +
    `<b>3Ô∏è‚É£ Check Telegram notification settings</b>\n\n` +
    `‚Ä¢ Open bot chat\n` +
    `‚Ä¢ Tap bot name ‚Üí üîî icon\n` +
    `‚Ä¢ Enable notifications\n\n` +
    `<b>4Ô∏è‚É£ Check device notification settings</b>\n\n` +
    `‚Ä¢ Phone Settings ‚Üí Notifications ‚Üí Telegram\n` +
    `‚Ä¢ Make sure notifications are enabled\n\n` +
    `<b>5Ô∏è‚É£ Check if you're in Archive/Muted</b>\n\n` +
    `‚Ä¢ Bot chat might be archived or muted\n` +
    `‚Ä¢ Unarchive and unmute if needed\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Test if bot works:</b>\n\n` +
    `Send any command like /status or /help\n` +
    `If bot responds ‚Üí notifications work!\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still not receiving?</b>\n` +
    `Contact admin: /admin`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_notif_enable', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Notifications', 'prob_notifications')]
  ]);

  const message =
    `üì¨ <b>HOW TO ENABLE NOTIFICATIONS?</b>\n\n` +
    `Step-by-step guide:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üì± IN TELEGRAM APP:</b>\n\n` +
    `<b>Step 1:</b> Open bot private chat\n\n` +
    `<b>Step 2:</b> Tap bot name at top\n\n` +
    `<b>Step 3:</b> Look for üîî bell icon\n\n` +
    `<b>Step 4:</b> Make sure notifications are ON (not muted)\n\n` +
    `<b>Step 5:</b> Choose notification sound/alert style\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üì± IN DEVICE SETTINGS:</b>\n\n` +
    `<b>For iOS:</b>\n` +
    `Settings ‚Üí Notifications ‚Üí Telegram ‚Üí Allow Notifications\n\n` +
    `<b>For Android:</b>\n` +
    `Settings ‚Üí Apps ‚Üí Telegram ‚Üí Notifications ‚Üí Enable\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üîî NOTIFICATION TYPES:</b>\n\n` +
    `You'll receive notifications for:\n` +
    `‚Ä¢ Airdrop registration confirmation\n` +
    `‚Ä¢ Wallet change confirmation\n` +
    `‚Ä¢ Daily subscription warnings\n` +
    `‚Ä¢ Important announcements\n` +
    `‚Ä¢ Admin responses\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è Note:</b> You must /start the bot first!\n\n` +
    `<b>Test notifications:</b>\n` +
    `Use /status command - you should get instant response`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_back', async (ctx) => {
  await ctx.answerCbQuery();

  const mainMenu = Markup.inlineKeyboard([
    [Markup.button.callback('üìã Registration Issues', 'prob_registration')],
    [Markup.button.callback('üíº Wallet Problems', 'prob_wallet')],
    [Markup.button.callback('üì∫ Subscription Issues', 'prob_subscriptions')],
    [Markup.button.callback('üéÅ Community Referral', 'prob_referral')],
    [Markup.button.callback('üö´ Ban & Mute', 'prob_ban')],
    [Markup.button.callback('üîî Notifications & Alerts', 'prob_notifications')],
    [Markup.button.callback('‚ùì Other Questions', 'prob_other')]
  ]);

  const message =
    `üÜò <b>TROUBLESHOOTING & SOLUTIONS</b>\n\n` +
    `Select a category to find solutions:\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üìã Registration Issues\n` +
    `üíº Wallet Problems\n` +
    `üì∫ Subscription Issues\n` +
    `üéÅ Community Referral\n` +
    `üö´ Ban & Mute\n` +
    `üîî Notifications & Alerts\n` +
    `‚ùì Other Questions\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Can't find a solution?</b>\n` +
    `Contact admin using /admin command`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...mainMenu });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// ============================================================
// REFERRAL PROGRAM PROBLEMS - DETAILED ANSWERS
// ============================================================

bot.action('prob_ref_how', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Referral', 'prob_referral')]
  ]);

  const message =
    `‚ùì <b>HOW COMMUNITY REFERRAL WORKS</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üìã Step-by-Step:</b>\n\n` +
    `1Ô∏è‚É£ Get your wallet address ready\n` +
    `   ‚Ä¢ Use /referral to get your link\n` +
    `   ‚Ä¢ Bot will ask for Solana wallet if you don't have one saved\n\n` +
    `2Ô∏è‚É£ Share your referral link\n` +
    `   ‚Ä¢ Link format: t.me/mai_verify_bot?start=ref_YOURID\n` +
    `   ‚Ä¢ Share on social media, with friends, etc.\n\n` +
    `3Ô∏è‚É£ Friend clicks your link and subscribes\n` +
    `   ‚Ä¢ Must subscribe to @mainingmai_news\n` +
    `   ‚Ä¢ Must subscribe to @mainingmai_chat\n` +
    `   ‚Ä¢ <b>BOTH channels required!</b>\n\n` +
    `4Ô∏è‚É£ You get rewarded!\n` +
    `   ‚Ä¢ <b>+1,000 MAI</b> instantly credited\n` +
    `   ‚Ä¢ Notification sent to you\n` +
    `   ‚Ä¢ Check balance: /referral or /status\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è Important Rules:</b>\n\n` +
    `‚Ä¢ Friend must be NEW user (never used bot before)\n` +
    `‚Ä¢ Friend must stay subscribed to BOTH channels\n` +
    `‚Ä¢ If friend unsubscribes from ANY channel ‚Üí you lose -1,000 MAI\n` +
    `‚Ä¢ If friend resubscribes ‚Üí you get +1,000 MAI again!\n` +
    `‚Ä¢ Unlimited referrals - no cap!\n` +
    `‚Ä¢ Rewards paid within 10 days after token listing\n` +
    `‚Ä¢ <b>‚ö†Ô∏è BAN = Loss of ALL rewards!</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üí° <b>Example:</b>\n` +
    `You invite 10 friends, 8 subscribe ‚Üí +8,000 MAI\n` +
    `2 friends unsubscribe ‚Üí -2,000 MAI\n` +
    `Current balance: 6,000 MAI üéÅ`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ref_link', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Referral', 'prob_referral')]
  ]);

  const message =
    `üîó <b>CAN'T GET REFERRAL LINK</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Problem:</b> Can't get my referral link\n\n` +
    `<b>Solution:</b>\n\n` +
    `1Ô∏è‚É£ <b>Check if you have a wallet</b>\n` +
    `   ‚Ä¢ Use /referral command\n` +
    `   ‚Ä¢ Bot will ask for Solana wallet if needed\n` +
    `   ‚Ä¢ You MUST provide wallet before getting link\n\n` +
    `2Ô∏è‚É£ <b>Send valid Solana wallet address</b>\n` +
    `   ‚Ä¢ 32-44 characters long\n` +
    `   ‚Ä¢ Example: DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK\n` +
    `   ‚Ä¢ Get wallet from: Phantom, Solflare, etc.\n\n` +
    `3Ô∏è‚É£ <b>After wallet is saved</b>\n` +
    `   ‚Ä¢ Use /referral again\n` +
    `   ‚Ä¢ You'll see your unique link\n` +
    `   ‚Ä¢ Copy and share it!\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Still having issues?</b>\n` +
    `‚Ä¢ Make sure you started the bot: /start\n` +
    `‚Ä¢ Try /changewallet if wallet was rejected\n` +
    `‚Ä¢ Contact admin: /admin if problem persists`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ref_reward', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Referral', 'prob_referral')]
  ]);

  const message =
    `üí∞ <b>REWARD NOT CREDITED</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Why reward might not show:</b>\n\n` +
    `1Ô∏è‚É£ <b>Friend not subscribed to BOTH channels</b>\n` +
    `   ‚Ä¢ Check: @mainingmai_news AND @mainingmai_chat\n` +
    `   ‚Ä¢ Reward only credited when BOTH subscribed\n` +
    `   ‚Ä¢ If only 1 channel ‚Üí no reward\n\n` +
    `2Ô∏è‚É£ <b>Friend already used bot before</b>\n` +
    `   ‚Ä¢ Referrals only count for NEW users\n` +
    `   ‚Ä¢ If friend used bot before ‚Üí won't count\n` +
    `   ‚Ä¢ Each Telegram ID can only be referred once\n\n` +
    `3Ô∏è‚É£ <b>Need to wait for subscription check</b>\n` +
    `   ‚Ä¢ Real-time: usually instant\n` +
    `   ‚Ä¢ Daily check: 00:00 UTC\n` +
    `   ‚Ä¢ Wait 1-2 minutes after friend subscribes\n\n` +
    `4Ô∏è‚É£ <b>Friend was a bot</b>\n` +
    `   ‚Ä¢ Bot accounts don't count\n` +
    `   ‚Ä¢ Must be real Telegram user\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>How to check:</b>\n` +
    `‚Ä¢ Use /referral to see stats\n` +
    `‚Ä¢ "Total Invited" = how many clicked your link\n` +
    `‚Ä¢ "Active Now" = how many subscribed to BOTH\n` +
    `‚Ä¢ "Balance" = your current MAI rewards\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üí° <b>Reminder:</b> Rewards are paid within 10 days after token listing, not immediately to wallet!`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ref_lost', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Referral', 'prob_referral')]
  ]);

  const message =
    `‚ûñ <b>LOST REWARD (FRIEND UNSUBSCRIBED)</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>This is NORMAL behavior!</b>\n\n` +
    `Community Referral rewards are <b>dynamic</b>:\n\n` +
    `‚úÖ <b>Friend subscribes to BOTH channels</b>\n` +
    `   ‚Ä¢ You get: +1,000 MAI\n` +
    `   ‚Ä¢ Notification: "Referral Reward!"\n\n` +
    `‚ùå <b>Friend unsubscribes from ANY channel</b>\n` +
    `   ‚Ä¢ You lose: -1,000 MAI\n` +
    `   ‚Ä¢ Notification: "Referral Lost!"\n\n` +
    `‚úÖ <b>Friend resubscribes</b>\n` +
    `   ‚Ä¢ You get back: +1,000 MAI\n` +
    `   ‚Ä¢ Can happen multiple times!\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Why this system?</b>\n\n` +
    `‚Ä¢ Encourages quality referrals\n` +
    `‚Ä¢ Keeps community engaged\n` +
    `‚Ä¢ Rewards only active subscribers\n` +
    `‚Ä¢ Prevents spam/bot accounts\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>What to do:</b>\n\n` +
    `1Ô∏è‚É£ Remind your friends to stay subscribed\n` +
    `2Ô∏è‚É£ Explain rewards are after listing\n` +
    `3Ô∏è‚É£ Share value of MAI community\n` +
    `4Ô∏è‚É£ Keep inviting new people!\n\n` +
    `üí° Your balance can go up and down - this is by design!`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ref_stats', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Referral', 'prob_referral')]
  ]);

  const message =
    `üìä <b>HOW TO CHECK REFERRAL STATS</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Method 1: /referral command</b>\n\n` +
    `Shows complete referral info:\n` +
    `‚Ä¢ üîó Your referral link\n` +
    `‚Ä¢ üë• Total Invited (all who clicked link)\n` +
    `‚Ä¢ ‚úÖ Active Now (subscribed to BOTH channels)\n` +
    `‚Ä¢ üí∞ Current Balance (MAI tokens earned)\n` +
    `‚Ä¢ üíº Wallet address for payouts\n` +
    `‚Ä¢ üìã How the program works\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Method 2: /status command</b>\n\n` +
    `Shows referral section (if you have referrals):\n` +
    `‚Ä¢ üí∞ Balance\n` +
    `‚Ä¢ üë• Total Invited\n` +
    `‚Ä¢ ‚úÖ Active Now\n\n` +
    `Plus your airdrop status, subscriptions, etc.\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>Understanding the stats:</b>\n\n` +
    `<b>Total Invited</b> = All users who:\n` +
    `‚Ä¢ Clicked your referral link\n` +
    `‚Ä¢ Started the bot\n` +
    `‚Ä¢ Includes inactive users\n\n` +
    `<b>Active Now</b> = Users who:\n` +
    `‚Ä¢ Are subscribed to @mainingmai_news\n` +
    `‚Ä¢ Are subscribed to @mainingmai_chat\n` +
    `‚Ä¢ Currently earning you MAI\n\n` +
    `<b>Current Balance</b> = Your MAI rewards:\n` +
    `‚Ä¢ Active Now √ó 1,000 MAI\n` +
    `‚Ä¢ Can decrease if friends unsubscribe\n` +
    `‚Ä¢ Paid within 10 days after listing\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `üí° Check stats anytime with /referral or /status!`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

bot.action('prob_ref_ban', async (ctx) => {
  await ctx.answerCbQuery();

  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('üîô Back to Referral', 'prob_referral')]
  ]);

  const message =
    `üö´ <b>WHAT IF I GET BANNED?</b>\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>If you get banned from MAI community:</b>\n\n` +
    `‚ùå You LOSE access to ALL rewards\n` +
    `‚ùå Your referral balance will NOT be paid out\n` +
    `‚ùå You cannot participate in any activities\n` +
    `‚ùå Your airdrop position will be removed\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>‚ö†Ô∏è Common reasons for ban:</b>\n\n` +
    `‚Ä¢ Spam in community chat\n` +
    `‚Ä¢ Using fake accounts or bots\n` +
    `‚Ä¢ Manipulation of referral system\n` +
    `‚Ä¢ Violating community rules\n` +
    `‚Ä¢ Offensive behavior\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üí° How to keep your account safe:</b>\n\n` +
    `‚úÖ Follow all community rules\n` +
    `‚úÖ No spam or fake referrals\n` +
    `‚úÖ Respect other members\n` +
    `‚úÖ Use only one real account\n` +
    `‚úÖ Stay subscribed to required channels\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>üìù Important:</b>\n` +
    `Your referral balance stays in database for records, but will NOT be distributed if you're banned.\n\n` +
    `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
    `<b>ü§î Think ban was unfair?</b>\n\n` +
    `If you believe you were banned unfairly, contact admin:\n` +
    `Use /admin command to send a message.\n\n` +
    `Include:\n` +
    `‚Ä¢ Your Telegram ID\n` +
    `‚Ä¢ Reason you think ban is unfair\n` +
    `‚Ä¢ Any relevant details\n\n` +
    `Admin will review your case.`;

  try {
    await ctx.editMessageText(message, { parse_mode: 'HTML', ...keyboard });
  } catch (error) {
    console.error('‚ùå Error editing message:', error.message);
  }
});

// ============================================================
// MILESTONE –°–ò–°–¢–ï–ú–ê
// ============================================================

// Milestone –∫–∞–∂–¥—ã–µ 500 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const MILESTONE_STEP = 500;

async function checkAndSendMilestone(chatId, botInfo) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
    const chatMemberCount = await bot.telegram.getChatMembersCount(chatId);
    console.log(`üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${chatMemberCount}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã milestone (–∫—Ä–∞—Ç–Ω–æ–µ MILESTONE_STEP)
    if (chatMemberCount % MILESTONE_STEP === 0) {
      const milestone = chatMemberCount;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ milestone
      const existing = await pool.query(
        `SELECT * FROM milestones WHERE milestone = $1 AND chat_id = $2`,
        [milestone, chatId]
      );

      if (existing.rows.length > 0) {
        console.log(`‚ö†Ô∏è Milestone ${milestone} —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ`);
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º milestone –≤ –ë–î (—á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å)
      await pool.query(
        `INSERT INTO milestones (milestone, chat_id, created_at) VALUES ($1, $2, NOW())`,
        [milestone, chatId]
      );

      console.log(`üéâ MILESTONE –î–û–°–¢–ò–ì–ù–£–¢: ${milestone} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ
      const milestoneMsg =
        `üéâ MILESTONE ACHIEVED!\n\n` +
        `üöÄ We've reached ${milestone.toLocaleString()} members in our community!\n\n` +
        `üéÅ COMMUNITY AIRDROP:\n` +
        `‚úÖ First ${config.AIRDROP_LIMIT.toLocaleString()} participants get 5,000 MAI FREE\n\n` +
        `üìã How to participate:\n` +
        `1Ô∏è‚É£ Subscribe to @mainingmai_news\n` +
        `2Ô∏è‚É£ Subscribe to @mainingmai_chat\n` +
        `3Ô∏è‚É£ Register via command: /airdrop\n\n` +
        `üí° Register after 20K? You're in queue and can move up!\n\n` +
        `üí™ Together we're building the future of decentralized AI!\n\n` +
        `üåê https://miningmai.com`;

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
      try {
        await bot.telegram.sendPhoto(
          chatId,
          { source: './images/milestone.webp' },
          {
            caption: milestoneMsg
          }
        );
        console.log(`‚úÖ Milestone —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
      } catch (imgError) {
        // –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
        console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç`);
        await bot.telegram.sendMessage(chatId, milestoneMsg);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ checkAndSendMilestone:', error.message);
  }
}

bot.on('new_chat_members', async (ctx) => {
  const newMembers = ctx.message.new_chat_members.filter(m => !m.is_bot);
  const chatId = ctx.chat.id;

  if (newMembers.length === 0) return;

  console.log('üëã –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏:', newMembers.map(m => m.first_name).join(', '));

  // –õ–æ–≥–∏—Ä—É–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ bot.on('chat_member') —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –æ—á–µ—Ä–µ–¥–∏
  for (const member of newMembers) {
    console.log(`‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${member.first_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.`);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º milestone –ü–û–°–õ–ï –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  await checkAndSendMilestone(ctx.chat.id, ctx.botInfo);
});

// ========================================
// –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–ú–ï–ù–ï–ù–ò–ô –ü–û–î–ü–ò–°–ö–ò (–û–¢–ü–ò–°–ö–ê –ò –ü–û–î–ü–ò–°–ö–ê)
// ========================================
bot.on('chat_member', async (ctx) => {
  const userId = ctx.chatMember.new_chat_member.user.id;
  const chatId = ctx.chat.id;
  const oldStatus = ctx.chatMember.old_chat_member.status;
  const newStatus = ctx.chatMember.new_chat_member.status;

  console.log(`üë§ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ —á–∞—Ç–µ ${chatId}: ${oldStatus} ‚Üí ${newStatus}`);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –∫–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
  let channelName = '';
  if (chatId === parseInt(config.NEWS_CHANNEL_ID)) {
    channelName = '@mainingmai_news';
  } else if (chatId === parseInt(config.CHAT_CHANNEL_ID)) {
    channelName = '@mainingmai_chat';
  } else {
    // –ù–µ –Ω–∞—à –∫–∞–Ω–∞–ª
    return;
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    const userStatus = await getUserStatus(userId);

    if (!userStatus) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î`);
      return;
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏—è
    const wasSubscribed = ['member', 'administrator', 'creator'].includes(oldStatus);
    const isSubscribed = ['member', 'administrator', 'creator'].includes(newStatus);

    // –û–¢–ü–ò–°–ê–õ–°–Ø
    if (wasSubscribed && !isSubscribed) {
      console.log(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç ${channelName}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î - –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª
      let newsSubscribed = userStatus.is_subscribed_news;
      let chatSubscribed = userStatus.is_subscribed_chat;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∫–∞–Ω–∞–ª, –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø–∏—Å–∫–∏
      if (chatId === parseInt(config.NEWS_CHANNEL_ID)) {
        newsSubscribed = false; // –û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç NEWS
      } else if (chatId === parseInt(config.CHAT_CHANNEL_ID)) {
        chatSubscribed = false; // –û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç CHAT
      }

      await updateSubscription(userId, newsSubscribed, chatSubscribed);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î: news=${newsSubscribed}, chat=${chatSubscribed}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –õ–° –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∞–∏—Ä–¥—Ä–æ–ø–µ
      if (userStatus.position) {
        let warningText = '';

        if (chatId === parseInt(config.NEWS_CHANNEL_ID)) {
          // –û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
          warningText = `‚ö†Ô∏è <b>WARNING: You Unsubscribed from ${channelName}!</b>\n\n` +
            `Your Community Airdrop position <b>#${userStatus.position}</b> is now at risk!\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚è∞ <b>You have until 00:00 UTC to resubscribe!</b>\n\n` +
          `If you don't resubscribe before the daily check at 00:00 UTC, you will:\n` +
          `‚ùå Permanently lose your position #${userStatus.position}\n` +
          `‚ùå Lose your ${config.AIRDROP_REWARD.toLocaleString()} MAI reward\n` +
          `‚ùå Your spot will go to the next person in queue\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üîî <b>RESUBSCRIBE NOW:</b>\n` +
          `Subscribe to ${channelName} and stay subscribed!\n\n` +
          `Use /status to check your current status.`;
      } else {
        // –û—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç —á–∞—Ç–∞
        const isInQueue = userStatus.position > config.AIRDROP_LIMIT;

        warningText = `‚ö†Ô∏è <b>WARNING: You Left ${channelName}!</b>\n\n`;

        if (isInQueue) {
          warningText += `Your queue position <b>#${userStatus.position}</b> is now at risk!\n\n`;
        } else {
          warningText += `Your Community Airdrop position <b>#${userStatus.position}</b> is now at risk!\n\n`;
        }

        warningText += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `‚è∞ <b>You have until 00:00 UTC to rejoin!</b>\n\n` +
          `If you don't rejoin before the daily check at 00:00 UTC, you will:\n` +
          `‚ùå Permanently lose your ${isInQueue ? 'queue ' : ''}position #${userStatus.position}\n`;

        if (!isInQueue) {
          warningText += `‚ùå Lose your ${config.AIRDROP_REWARD.toLocaleString()} MAI reward\n`;
        }

        warningText += `‚ùå Your spot will go to the next person in queue\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üîî <b>REJOIN NOW:</b>\n` +
          `Join ${channelName} and stay subscribed!\n\n` +
          `Use /status to check your current status.`;
        }

        await bot.telegram.sendMessage(userId, warningText, { parse_mode: 'HTML' });

        console.log(`‚úÖ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –æ—Ç–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
      }
    }

    // –ü–û–î–ü–ò–°–ê–õ–°–Ø –û–ë–†–ê–¢–ù–û
    if (!wasSubscribed && isSubscribed) {
      console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ ${channelName}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î - –±–µ—Ä—ë–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–π –∫–∞–Ω–∞–ª
      let newsSubscribed = userStatus.is_subscribed_news;
      let chatSubscribed = userStatus.is_subscribed_chat;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ—Ç –∫–∞–Ω–∞–ª, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–ø–∏—Å–∞–ª—Å—è
      if (chatId === parseInt(config.NEWS_CHANNEL_ID)) {
        newsSubscribed = true; // –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ NEWS
      } else if (chatId === parseInt(config.CHAT_CHANNEL_ID)) {
        chatSubscribed = true; // –ü–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ CHAT
      }

      await updateSubscription(userId, newsSubscribed, chatSubscribed);
      console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î: news=${newsSubscribed}, chat=${chatSubscribed}`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –∞–∏—Ä–¥—Ä–æ–ø–µ
      if (userStatus.position) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ —Å—Ç–∞—Ç—É—Å ACTIVE
        const isNowActive = newsSubscribed && chatSubscribed;

        if (isNowActive) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
          const isInQueue = userStatus.position > config.AIRDROP_LIMIT;

          let welcomeBackMsg = `‚úÖ <b>Welcome Back!</b>\n\n` +
            `You resubscribed to ${channelName}!\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n`;

          if (isInQueue) {
            welcomeBackMsg += `üìä <b>Queue Position: #${userStatus.position}</b>\n` +
              `‚ö†Ô∏è Status: ‚úÖ <b>ACTIVE</b>\n\n` +
              `Your queue position is now safe! Keep both subscriptions active.\n\n` +
              `If someone loses their airdrop spot, you'll automatically move up!\n\n`;
          } else {
            welcomeBackMsg += `üé´ Your Position: <b>#${userStatus.position}</b>\n` +
              `üéÅ Your Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n` +
              `‚ö†Ô∏è Status: ‚úÖ <b>ACTIVE</b>\n\n` +
              `Your position is now safe! Keep both subscriptions active until listing.\n\n`;
          }

          welcomeBackMsg += `Use /status to check your details.`;

          await bot.telegram.sendMessage(userId, welcomeBackMsg, { parse_mode: 'HTML' });

          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        } else {
          // –ü–æ–¥–ø–∏—Å–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª, –Ω—É–∂–µ–Ω –≤—Ç–æ—Ä–æ–π
          const missingChannel = newsSubscribed ? '@mainingmai_chat' : '@mainingmai_news';
          await bot.telegram.sendMessage(
            userId,
            `‚úÖ <b>You Resubscribed to ${channelName}!</b>\n\n` +
            `But your position is still INACTIVE.\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `‚ö†Ô∏è <b>Action Required:</b>\n` +
            `Subscribe to ${missingChannel} to activate your position.\n\n` +
            `You have until 00:00 UTC!`,
            { parse_mode: 'HTML' }
          );

          console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:`, error.message);
  }
});


function getPresaleText() {
  let text = 'üí∞ *MAI PRESALE - ALL 14 STAGES*\n\n';
  text += 'üéØ *Total Supply: 7,000,000,000 MAI*\n\n';
  text += '‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
  
  PRESALE_STAGES.forEach(s => {
    text += `*Stage ${s.stage}:* $${s.price} | ${s.discount}% OFF | ${s.tokens} MAI\n`;
  });
  
  text += '\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n';
  text += 'üé® *NFT REWARD BONUSES:*\n\n';
  text += 'ü•â Bronze ($50-99): +5% mining FOREVER\n';
  text += 'ü•à Silver ($100-199): +10% mining FOREVER\n';
  text += 'ü•á Gold ($200-299): +15% mining FOREVER\n';
  text += 'üíé Platinum ($300+): +20% mining FOREVER\n\n';
  text += 'üåê Buy now: https://miningmai.com';
  return text;
}

function getNftText() {
  return `
üé® *MAI NFT REWARD LEVELS*

Exclusive NFTs for Presale participants with permanent benefits!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•â *BRONZE NFT*
Purchase: $50-99 in Presale

*Benefits:*
‚Ä¢ Early mining access: +1 month
‚Ä¢ Early DAO voting: 3 months
‚Ä¢ Mining bonus: *+5% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•à *SILVER NFT*
Purchase: $100-199 in Presale

*Benefits:*
‚Ä¢ Early mining access: +2 months
‚Ä¢ Early DAO voting: 6 months
‚Ä¢ Mining bonus: *+10% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

ü•á *GOLD NFT*
Purchase: $200-299 in Presale

*Benefits:*
‚Ä¢ Early mining access: +3 months
‚Ä¢ Early DAO voting: 12 months
‚Ä¢ Mining bonus: *+15% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé *PLATINUM NFT*
Purchase: $300+ in Presale

*Benefits:*
‚Ä¢ Early mining access: +3 months
‚Ä¢ Early DAO voting: 12 months
‚Ä¢ Mining bonus: *+20% FOREVER*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Learn more: https://miningmai.com`;
}

function getTasksText() {
  return `
üéÅ *PRESALE AIRDROP PROGRAM*

*INDIVIDUAL REWARD:* Up to 1,000,000 MAI
*TOTAL POOL:* 800,000,000 MAI

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

Complete tasks during presale to earn your share of the 800M MAI pool!

*Available Tasks (5 Total):*

1Ô∏è‚É£ Stages 1-3: Buy 10,000+ MAI
2Ô∏è‚É£ Stages 5-7: Buy 10,000+ MAI
3Ô∏è‚É£ Stages 10-14: Buy 10,000+ MAI
4Ô∏è‚É£ Earn Gold or Platinum NFT
5Ô∏è‚É£ Invite 2+ Friends

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è Minimum 3/5 tasks required!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ *REWARDS:*

ü•á 5/5 tasks: 1,000,000 MAI
   ‚Ä¢ 500 spots available

ü•à 4/5 tasks: 500,000 MAI
   ‚Ä¢ 500 spots available

ü•â 3/5 tasks: 100,000 MAI
   ‚Ä¢ 500 spots available

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üé∞ *ALLOCATION SYSTEM:*

‚úÖ If participants ‚â§ 500 per level:
   Everyone gets the reward!

üé≤ If participants > 500 per level:
   Random lottery determines winners

üìä Total: 1,500 winners across all levels

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚è∞ *Important:*
- Complete tasks during presale
- Winners announced after presale ends
- Lottery is provably fair
- Track progress on dashboard

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Track progress: https://miningmai.com`;
}

function getReferralText() {
  return `
üí∞ *REFERRAL PROGRAM*
*EARN $500,000 USDT!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä *REWARD LEVELS:*

*Level 1:* 1-9 referrals ‚Üí *1% bonus*
*Level 2:* 10-19 referrals ‚Üí *3% bonus*
*Level 3:* 20-29 referrals ‚Üí *5% bonus*
*Level 4:* 30+ referrals ‚Üí *7% bonus*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∏ Paid in USDT every Friday!

üåê Get your link: https://miningmai.com`;
}

function getFaqText() {
  return `‚ùì FREQUENTLY ASKED QUESTIONS

ü§ñ ABOUT MAI
MAI is a decentralized AI platform owned by the community. Unlike corporate AI, MAI belongs to everyone.

üíº HOW TO BUY MAI

üì± MOBILE:
Hold "Buy MAI/link" ‚Üí Open in Chrome/Safari
‚Üí Connect wallet ‚Üí Choose amount ‚Üí BUY!

üñ•Ô∏è DESKTOP:
Click link ‚Üí Connect wallet ‚Üí BUY!

‚ö†Ô∏è WHY NOT IN TELEGRAM?
Telegram blocks Web3. Use real browser!

‚úÖ WALLETS: Phantom, Solflare, Trust Wallet
‚ùå NO KYC needed!

üí∞ PRESALE
- 14 stages: $0.0005 ‚Üí $0.0020
- Up to 80% discount
- Total: 7 billion MAI tokens
- Payment: SOL, USDT, USDC
- Listing: Q1 2026 on DEX/CEX

üéÅ COMMUNITY AIRDROP (5,000 MAI)
- First 20,000 participants get 5,000 MAI!
- Absolutely FREE - just subscribe & register
- Distribution: Within 10 days after listing

How to participate:
1Ô∏è‚É£ Subscribe to @mainingmai_news
2Ô∏è‚É£ Subscribe to @mainingmai_chat
3Ô∏è‚É£ Register via command: /airdrop

üí°Register after 20K? You're in queue!
- If someone unsubscribes, you move up automatically

Keep your position:
‚úÖ Stay subscribed to both channels until listing
‚úÖ Daily check at 00:00 UTC
‚ùå Unsubscribe = Position lost immediately!
‚úÖ Register wallet: /airdrop

üéÅ COMMUNITY REFERRAL (1,000 MAI per friend)
- Earn 1,000 MAI for every friend who subscribes!
- Unlimited referrals - no cap!
- Distribution: Within 10 days after listing

How to participate:
1Ô∏è‚É£ Get your referral link: /referral
2Ô∏è‚É£ Share link with friends
3Ô∏è‚É£ Friend subscribes to @mainingmai_news AND @mainingmai_chat
4Ô∏è‚É£ You get +1,000 MAI instantly! üéÅ

‚ö†Ô∏è Important:
‚Ä¢ Friend must be NEW user (never used bot)
‚Ä¢ Friend must stay subscribed to BOTH channels
‚Ä¢ If friend unsubscribes ‚Üí you lose -1,000 MAI
‚Ä¢ If friend resubscribes ‚Üí you get +1,000 MAI again!
‚Ä¢ BAN = Loss of ALL rewards

üìä Check stats: /referral or /status

üèÜ PRESALE AIRDROP (Up to 1M MAI)

Q: How does it work?
A: Complete 3-5 tasks during presale
   
   Rewards:
   ü•á 5/5 tasks: 1,000,000 MAI
   ü•à 4/5 tasks: 500,000 MAI
   ü•â 3/5 tasks: 100,000 MAI

Q: How many winners?
A: 500 spots per level (1,500 total)
   
   If ‚â§500 participants: Everyone wins!
   If >500 participants: Random lottery
   
Q: What are the tasks?
A: 1. Buy 10K+ MAI (stages 1-3)
   2. Buy 10K+ MAI (stages 5-7)
   3. Buy 10K+ MAI (stages 10-14)
   4. Earn Gold or Platinum NFT
   5. Invite 2+ friends
   
   Track progress: /tasks

üé® NFT AIRDROP (1,400 NFTs)

Q: How to get Airdrop NFT?
A: Buy 10,000+ MAI in any stage
   First 100 buyers per stage win!
   Same as Silver NFT benefits
   
Q: What benefits?
A: ‚Ä¢ +2 months early mining
   ‚Ä¢ 6 months DAO voting
   ‚Ä¢ +10% mining bonus FOREVER
   
Q: How many NFTs total?
A: 1,400 NFTs (100 per stage √ó 14)
   One per wallet max
   Claim after listing (~0.03 SOL)

üé® NFT REWARD TIERS
Buy presale ‚Üí Get permanent bonuses:
- $50-99: Bronze (+5% mining forever)
- $100-199: Silver (+10% forever)
- $200-299: Gold (+15% forever)
- $300+: Platinum (+20% forever)

‚õèÔ∏è MINING & STAKING
- Launch: Q2 2027
- Earn MAI with computing power
- NFT holders get bonus %
- Mobile app: Q3 2028

üí∏ REFERRAL PROGRAM
- Earn up to 7% in USDT
- $500K reward pool
- Paid weekly (Fridays)
- Get link: https://miningmai.com

üó≥Ô∏è DAO GOVERNANCE
- Community votes on decisions
- NFT holders vote early
- Shape MAI's future together

‚ö†Ô∏è AVOID SCAMS
NEVER share:
‚ùå Private keys
‚ùå Seed phrases
‚ùå Passwords

Admins NEVER DM first!

üÜò SUPPORT
- Questions: Check /help
- Status: Use /status
- Issues: Ask admins in chat

üîó OFFICIAL LINKS
üåê Website: https://miningmai.com
üì¢ @mainingmai_news
üí¨ @mainingmai_chat
üé® t.me/addstickers/MAImining
`;
}

function getRulesText() {
  return `üìã COMMUNITY RULES

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚úÖ ALLOWED:
- MAI discussions
- Questions & help
- Crypto memes (appropriate)
- Constructive feedback

‚ùå FORBIDDEN:
- Spam & flooding
- Other project ads
- Scam links
- Harassment, hate speech
- Price manipulation
- NSFW content

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

‚ö†Ô∏è WARNING SYSTEM:
1st: ‚ö†Ô∏è Warning
2nd: ‚ö†Ô∏è Final Warning
3rd: üö´ Permanent Ban

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìä COMMUNITY REPORTS:
Use /report (reply to violator's message)

- 10 unique reports ‚Üí üîá 24h mute
- 20 unique reports ‚Üí üîá 7 days mute
- 30 unique reports ‚Üí üö´ Permanent ban

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üõ°Ô∏è AIRDROP ELIGIBILITY:

Breaking rules = Loss of rewards!

‚ùå Banned = No airdrop
‚ùå Unsubscribe = Position lost
‚ùå Leave chat = Position removed

To keep rewards:
‚úÖ Follow rules
‚úÖ Stay in @mainingmai_news
‚úÖ Stay in this chat @mainingmai_chat

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° TIPS:
- Read /faq before asking
- Be respectful
- Help newcomers
- Report violations
- Stay on-topic

üÜò NEED HELP?
Use /help or ask admins
Q: How to contact admin?
A: Use /admin command with your message
   Example: /admin I need help with wallet

   Limits:
   ‚Ä¢ 3 messages per day
   ‚Ä¢ 30 min cooldown between messages
   ‚Ä¢ Minimum 10 characters

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üåê Website: https://miningmai.com
üì¢ @mainingmai_news
üí¨ @mainingmai_chat`;
}

bot.on(message('text'), async (ctx) => {
  const userId = ctx.from.id;
  const text = ctx.message.text;
  const chatType = ctx.chat.type;

  console.log('üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê –í–´–ó–í–ê–ù!');
  console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:', userId, '–¢–∏–ø —á–∞—Ç–∞:', chatType, '–¢–µ–∫—Å—Ç:', text.substring(0, 50));

  if (config.ADMIN_IDS.includes(ctx.from.id)) {
    console.log('‚ö†Ô∏è –≠—Ç–æ –∞–¥–º–∏–Ω, –ø—Ä–æ–ø—É—Å–∫–∞—é');
    return;
  }

  if (text.startsWith('/')) {
    console.log('‚ö†Ô∏è –≠—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –ø—Ä–æ–ø—É—Å–∫–∞—é');
    return;
  }
  
  try {
    const userStatus = await getUserStatus(userId);
    console.log('üë§ –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', JSON.stringify(userStatus));
    
    // –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–®–ï–õ–¨–ö–ê - –ì–õ–ê–í–ù–û–ï!
    if (userStatus && userStatus.awaiting_wallet) {
      console.log('üíº –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ö–û–®–ï–õ–¨–ö–ê:', text);

      // –ü–†–û–í–ï–†–ö–ê –ë–ê–ù–ê - –∑–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –≤–≤–æ–¥–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏
      if (userStatus.banned) {
        console.log('‚ùå –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –∫–æ—à–µ–ª—ë–∫');
        await setAwaitingWallet(userId, null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º awaiting_wallet
        return sendToPrivate(
          ctx,
          `‚ùå <b>You are banned and cannot participate.</b>`,
          { parse_mode: 'HTML' }
        );
      }

      if (!isValidSolanaAddress(text)) {
        console.log('‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∞–¥—Ä–µ—Å Solana');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞–∑–∞—Ç—å –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
        let retryCommand = '/airdrop';
        if (userStatus.awaiting_wallet === 'referral') {
          retryCommand = '/referral';
        } else if (userStatus.awaiting_wallet === 'changewallet') {
          retryCommand = '/changewallet';
        }

        return sendToPrivate(
          ctx,
          `‚ùå <b>Invalid Solana Address!</b>\n\n` +
          `Solana addresses must be 32-44 characters (base58 format).\n\n` +
          `Please send a valid address or use ${retryCommand} to start over.`,
          { parse_mode: 'HTML' }
        );
      }

      // –ó–ê–ü–û–ú–ò–ù–ê–ï–ú –ë–´–õ–ê –õ–ò –ü–û–ó–ò–¶–ò–Ø –î–û –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
      const hadPositionBefore = userStatus.position ? true : false;

      // –ü–†–û–í–ï–†–Ø–ï–ú: —ç—Ç–æ –Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ —Å–º–µ–Ω–∞ –∫–æ—à–µ–ª—å–∫–∞?
      if (userStatus.position) {
        // –≠–¢–û –°–ú–ï–ù–ê –ö–û–®–ï–õ–¨–ö–ê (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
        console.log(`üí∞ –°–ú–ï–ù–ê –ö–û–®–ï–õ–¨–ö–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}, –ø–æ–∑–∏—Ü–∏—è #${userStatus.position}`);

        const oldWallet = userStatus.wallet_address;

        // –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–®–ï–õ–¨–ö–ê (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const uniqueCheck = await checkWalletUniqueness(text, userId);
        if (!uniqueCheck.isUnique) {
          console.log(`‚ö†Ô∏è –ö–æ—à–µ–ª—ë–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${uniqueCheck.existingUser.telegram_id}`);

          const positionText = uniqueCheck.existingUser.position
            ? `Position #${uniqueCheck.existingUser.position}`
            : 'another user';

          return sendToPrivate(
            ctx,
            `‚ùå <b>Wallet Already Registered!</b>\n\n` +
            `This wallet address is already registered by ${positionText}.\n\n` +
            `Each wallet can only be used once.\n\n` +
            `Please send a different Solana wallet address.`,
            { parse_mode: 'HTML' }
          );
        }

        try {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ wallet_address –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º awaiting_wallet
          await pool.query(
            'UPDATE telegram_users SET wallet_address = $1, awaiting_wallet = NULL WHERE telegram_id = $2',
            [text, userId]
          );

          const shortOld = `${oldWallet.slice(0, 6)}...${oldWallet.slice(-4)}`;
          const shortNew = `${text.slice(0, 6)}...${text.slice(-4)}`;

          const isInQueue = userStatus.position > config.AIRDROP_LIMIT;

          let walletUpdateMsg = `‚úÖ <b>Wallet Updated Successfully!</b>\n\n` +
            `Old wallet: <code>${shortOld}</code>\n` +
            `New wallet: <code>${shortNew}</code>\n\n`;

          if (isInQueue) {
            walletUpdateMsg += `Your queue position <b>#${userStatus.position}</b> is now linked to your new wallet.\n\n`;
          } else {
            walletUpdateMsg += `Your Community Airdrop position <b>#${userStatus.position}</b> is now linked to your new wallet.\n\n`;
          }

          walletUpdateMsg += `Use /status to verify your details.\n` +
            `Need to change again? Use /changewallet`;

          await sendToPrivate(ctx, walletUpdateMsg, { parse_mode: 'HTML' });

          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
          if (config.ADMIN_IDS[0]) {
            await bot.telegram.sendMessage(
              config.ADMIN_IDS[0],
              `üîÑ <b>Wallet Changed</b>\n\n` +
              `User: ${ctx.from.first_name} (${userId})\n` +
              `Position: #${userStatus.position}\n` +
              `Old: <code>${oldWallet}</code>\n` +
              `New: <code>${text}</code>`,
              { parse_mode: 'HTML' }
            );
          }

          console.log(`‚úÖ –ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
          return;
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
          return sendToPrivate(
            ctx,
            `‚ùå <b>Error Updating Wallet</b>\n\n` +
            `Something went wrong while updating your wallet.\n\n` +
            `Please try again later or contact support using /admin.`,
            { parse_mode: 'HTML' }
          );
        }
      }

      // –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï–¢ position
      console.log('üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–∑–∏—Ü–∏–∏');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ—à–µ–ª–µ–∫? –ï—Å–ª–∏ –µ—Å—Ç—å - —ç—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∞–∏—Ä–¥—Ä–æ–ø!
      if (userStatus.wallet_address) {
        // –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í –ê–ò–†–î–†–û–ü (–∫–æ—à–µ–ª–µ–∫ —É–∂–µ –±—ã–ª, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é)
        console.log('üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í –ê–ò–†–î–†–û–ü - –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –µ—Å—Ç—å:', userStatus.wallet_address);

        const username = ctx.from.username || 'no_username';
        const firstName = ctx.from.first_name;

        const registration = await registerUser(userId, username, firstName, userStatus.wallet_address);
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify(registration));

        if (!registration.success) {
          if (registration.reason === 'limit_reached') {
            return sendToPrivate(
              ctx,
              `‚ùå <b>Airdrop Full!</b>\n\n` +
              `Unfortunately, all ${config.AIRDROP_LIMIT.toLocaleString()} spots have been taken.\n\n` +
              `You're now in the waiting queue. If someone loses their spot, you'll automatically move up!\n\n` +
              `Follow @mainingmai_news for updates!`,
              { parse_mode: 'HTML' }
            );
          }
          if (registration.reason === 'wallet_duplicate') {
            const positionText = registration.existingPosition
              ? `Position #${registration.existingPosition}`
              : 'another user';

            return sendToPrivate(
              ctx,
              `‚ùå <b>Wallet Already Registered!</b>\n\n` +
              `This wallet address is already registered by ${positionText}.\n\n` +
              `Each wallet can only be used once.\n\n` +
              `Please use /changewallet to change your wallet, then try again.`,
              { parse_mode: 'HTML' }
            );
          }
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registration.reason);
          return sendToPrivate(ctx, '‚ùå Registration error. Please try /airdrop again.');
        }

        console.log('‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –£–°–ü–ï–®–ù–ê! Position:', registration.user.position);

        const isInQueue = registration.user.position > config.AIRDROP_LIMIT;
        let successMessage;

        if (isInQueue) {
          // –Æ–ó–ï–† –í –û–ß–ï–†–ï–î–ò
          successMessage =
            `üéâ <b>REGISTRATION SUCCESSFUL!</b>\n\n` +
            `‚è≥ <b>You're in the WAITING QUEUE!</b>\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `üìä <b>Queue Position: #${registration.user.position}</b>\n` +
            `‚è≥ Airdrop spots filled: ${config.AIRDROP_LIMIT.toLocaleString()}/${config.AIRDROP_LIMIT.toLocaleString()}\n` +
            `üíº Wallet: <code>${userStatus.wallet_address}</code>\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `‚ú® <b>HOW THE QUEUE WORKS:</b>\n\n` +
            `If someone unsubscribes from channels and loses their airdrop spot, you'll automatically move up!\n\n` +
            `You could become position #${config.AIRDROP_LIMIT} or higher and get <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>! üéÅ\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `‚ö†Ô∏è <b>STAY IN THE QUEUE:</b>\n\n` +
            `‚úÖ Stay subscribed to @mainingmai_news\n` +
            `‚úÖ Stay in community chat @mainingmai_chat\n` +
            `‚úÖ Follow all rules\n\n` +
            `üîç <b>Daily Check: 00:00 UTC</b>\n` +
            `If you unsubscribe, you will:\n` +
            `‚ùå Lose your queue position #${registration.user.position}\n` +
            `‚ùå Cannot restore your position\n\n` +
            `Use /status anytime to check if you've moved up!\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `<b>Thank you for joining MAI! üöÄ</b>`;
        } else {
          // –Æ–ó–ï–† –í –ê–ò–†–î–†–û–ü–ï
          successMessage =
            `üéâ <b>REGISTRATION SUCCESSFUL!</b>\n\n` +
            `Welcome to the MAI Community Airdrop!\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `üé´ Your Position: <b>#${registration.user.position}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
            `üéÅ Your Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n` +
            `üíº Wallet: <code>${userStatus.wallet_address}</code>\n` +
            `üìÖ Distribution: Within 10 days after listing\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `‚ö†Ô∏è <b>HOW TO KEEP YOUR POSITION:</b>\n\n` +
            `‚úÖ Stay subscribed to @mainingmai_news\n` +
            `‚úÖ Stay in community chat @mainingmai_chat\n` +
            `‚úÖ Follow all rules\n\n` +
            `üîç <b>Daily Check: 00:00 UTC</b>\n` +
            `If you unsubscribe, you will:\n` +
            `‚ùå Lose your position #${registration.user.position}\n` +
            `‚ùå Your spot goes to next person\n` +
            `‚ùå Cannot restore old position\n\n` +
            `Use /status anytime to verify your status.\n\n` +
            `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
            `<b>Thank you for joining MAI! üöÄ</b>`;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º: —ç—Ç–æ –ø–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è? (–ø–æ–∑–∏—Ü–∏–∏ –Ω–µ –±—ã–ª–æ, –∞ —Ç–µ–ø–µ—Ä—å –ø–æ—è–≤–∏–ª–∞—Å—å)
        const isFirstRegistration = !hadPositionBefore;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ü–ï–†–í–û–ô —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∞–∏—Ä–¥—Ä–æ–ø
        if (isFirstRegistration && !isInQueue) {
          try {
            await bot.telegram.sendPhoto(
              userId,
              { source: './images/milestone.webp' },
              {
                caption: successMessage,
                parse_mode: 'HTML'
              }
            );
            console.log(`‚úÖ –ê–∏—Ä–¥—Ä–æ–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (–ø–µ—Ä–≤–∞—è) –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`);
            return;
          } catch (imgError) {
            console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç`);
            await sendToPrivate(ctx, successMessage, { parse_mode: 'HTML' });
            console.log(`‚úÖ –ê–∏—Ä–¥—Ä–æ–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`);
            return;
          }
        } else {
          // –î–ª—è –æ—á–µ—Ä–µ–¥–∏ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
          await sendToPrivate(ctx, successMessage, { parse_mode: 'HTML' });
          console.log(`‚úÖ –ê–∏—Ä–¥—Ä–æ–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ${isInQueue ? '(–æ—á–µ—Ä–µ–¥—å)' : '(–ø–æ–≤—Ç–æ—Ä–Ω–∞—è)'} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è ${userId}`);
          return;
        }
      }

      // –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–û–®–ï–õ–¨–ö–ê (–ø–µ—Ä–≤–∏—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º awaiting_wallet —Ç–∏–ø)
      console.log('üíº –ü–µ—Ä–≤–∏—á–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞, awaiting_wallet =', userStatus.awaiting_wallet);

      const username = ctx.from.username || 'no_username';
      const firstName = ctx.from.first_name;

      // –ü–†–û–í–ï–†–Ø–ï–ú awaiting_wallet –¢–ò–ü
      if (userStatus.awaiting_wallet === 'airdrop') {
        // ‚úÖ –ê–ò–†–î–†–û–ü –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        console.log('üéØ –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∞–∏—Ä–¥—Ä–æ–ø...');
        const registration = await registerUser(userId, username, firstName, text);
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', JSON.stringify(registration));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—à–∏–±–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if (!registration.success) {
          if (registration.reason === 'wallet_duplicate') {
            const positionText = registration.existingPosition
              ? `Position #${registration.existingPosition}`
              : 'another user';

            return sendToPrivate(
              ctx,
              `‚ùå <b>Wallet Already Registered!</b>\n\n` +
              `This wallet address is already registered by ${positionText}.\n\n` +
              `Each wallet can only be used once.\n\n` +
              `Please send a different Solana wallet address.`,
              { parse_mode: 'HTML' }
            );
          }
          console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', registration.reason);
          return sendToPrivate(ctx, '‚ùå Registration error. Please try /airdrop again.');
        }

        if (registration.success && registration.user.position) {
          console.log('‚úÖ –ê–ò–†–î–†–û–ü –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø! Position:', registration.user.position);

          const isInQueue = registration.user.position > config.AIRDROP_LIMIT;
          let successMessage;

          if (isInQueue) {
            // –Æ–ó–ï–† –í –û–ß–ï–†–ï–î–ò
            successMessage =
              `üéâ <b>REGISTRATION SUCCESSFUL!</b>\n\n` +
              `‚è≥ <b>You're in the WAITING QUEUE!</b>\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `üìä <b>Queue Position: #${registration.user.position}</b>\n` +
              `‚è≥ Airdrop spots filled: ${config.AIRDROP_LIMIT.toLocaleString()}/${config.AIRDROP_LIMIT.toLocaleString()}\n` +
              `üíº Wallet: <code>${text}</code>\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚ú® <b>HOW THE QUEUE WORKS:</b>\n\n` +
              `If someone unsubscribes from channels and loses their airdrop spot, you'll automatically move up!\n\n` +
              `You could become position #${config.AIRDROP_LIMIT} or higher and get <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>! üéÅ\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚ö†Ô∏è <b>STAY IN THE QUEUE:</b>\n\n` +
              `‚úÖ Stay subscribed to @mainingmai_news\n` +
              `‚úÖ Stay in community chat @mainingmai_chat\n` +
              `‚úÖ Follow all rules\n\n` +
              `üîç <b>Daily Check: 00:00 UTC</b>\n` +
              `If you unsubscribe, you will:\n` +
              `‚ùå Lose your queue position #${registration.user.position}\n` +
              `‚ùå Cannot restore your position\n\n` +
              `Use /status anytime to check if you've moved up!\n\n` +
              `Need to change wallet? Use /changewallet\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `<b>Thank you for joining MAI! üöÄ</b>\n` +
              `Tokens will be distributed after official listing.`;
          } else {
            // –Æ–ó–ï–† –í –ê–ò–†–î–†–û–ü–ï
            successMessage =
              `üéâ <b>REGISTRATION SUCCESSFUL!</b>\n\n` +
              `Welcome to the MAI Community Airdrop!\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `üé´ Your Position: <b>#${registration.user.position}</b> of ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
              `üéÅ Your Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI</b>\n` +
              `üíº Wallet: <code>${text}</code>\n` +
              `üìÖ Distribution: Within 10 days after listing\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚ö†Ô∏è <b>HOW TO KEEP YOUR POSITION:</b>\n\n` +
              `‚úÖ Stay subscribed to @mainingmai_news\n` +
              `‚úÖ Stay in community chat @mainingmai_chat\n` +
              `‚úÖ Follow all rules\n\n` +
              `üîç <b>Daily Check: 00:00 UTC</b>\n` +
              `If you unsubscribe, you will:\n` +
              `‚ùå Lose your position #${registration.user.position}\n` +
              `‚ùå Your spot goes to next person\n` +
              `‚ùå Cannot restore old position\n\n` +
              `Use /status anytime to verify your status.\n` +
              `Need to change wallet? Use /changewallet\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `<b>Thank you for joining MAI! üöÄ</b>\n` +
              `Tokens will be distributed after official listing.`;
          }

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∏—Ä–¥—Ä–æ–ø–∞, –Ω–µ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏)
          if (!isInQueue) {
            try {
              await bot.telegram.sendPhoto(
                userId,
                { source: './images/milestone.webp' },
                {
                  caption: successMessage,
                  parse_mode: 'HTML'
                }
              );
              console.log(`‚úÖ Registration success message with image sent to user ${userId}`);
              return;
            } catch (imgError) {
              console.log(`‚ö†Ô∏è Image not found, sending text message`);
              return sendToPrivate(ctx, successMessage, { parse_mode: 'HTML' });
            }
          } else {
            // –î–ª—è –æ—á–µ—Ä–µ–¥–∏ - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
            await sendToPrivate(ctx, successMessage, { parse_mode: 'HTML' });
            console.log(`‚úÖ Queue registration message sent to user ${userId}`);
            return;
          }
        }

      } else if (userStatus.awaiting_wallet === 'referral') {
        // ‚úÖ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        console.log('üéÅ –†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—à–µ–ª–µ–∫');

        // –ü–†–û–í–ï–†–ö–ê –£–ù–ò–ö–ê–õ–¨–ù–û–°–¢–ò –ö–û–®–ï–õ–¨–ö–ê
        const uniqueCheck = await checkWalletUniqueness(text, userId);
        if (!uniqueCheck.isUnique) {
          console.log(`‚ö†Ô∏è –ö–æ—à–µ–ª—ë–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${uniqueCheck.existingUser.telegram_id}`);

          const positionText = uniqueCheck.existingUser.position
            ? `Position #${uniqueCheck.existingUser.position}`
            : 'another user';

          return sendToPrivate(
            ctx,
            `‚ùå <b>Wallet Already Registered!</b>\n\n` +
            `This wallet address is already registered by ${positionText}.\n\n` +
            `Each wallet can only be used once.\n\n` +
            `Please send a different Solana wallet address.`,
            { parse_mode: 'HTML' }
          );
        }

        await pool.query(
          'UPDATE telegram_users SET wallet_address = $1, awaiting_wallet = NULL WHERE telegram_id = $2',
          [text, userId]
        );

        const shortWallet = `${text.slice(0, 6)}...${text.slice(-4)}`;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        const referralStats = await pool.query(
          `SELECT
            COUNT(*) as total_invited,
            COUNT(*) FILTER (WHERE is_subscribed_news = true AND is_subscribed_chat = true) as active_now
           FROM telegram_users
           WHERE referrer_id = $1`,
          [userId]
        );

        const totalInvited = parseInt(referralStats.rows[0].total_invited) || 0;
        const activeNow = parseInt(referralStats.rows[0].active_now) || 0;

        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å –±–∞–ª–∞–Ω—Å–æ–º
        const updatedUser = await getUserStatus(userId);
        const currentBalance = updatedUser.referral_reward_balance || 0;

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        const botUsername = ctx.botInfo.username;
        const referralLink = `https://t.me/${botUsername}?start=ref_${userId}`;

        await sendToPrivate(
          ctx,
          `‚úÖ <b>Wallet Saved Successfully!</b>\n\n` +
          `üíº Wallet: <code>${shortWallet}</code>\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üéÅ <b>YOUR COMMUNITY REFERRAL</b>\n\n` +
          `üîó <b>Your Referral Link:</b>\n` +
          `<code>${referralLink}</code>\n\n` +
          `üìä <b>STATISTICS</b>\n` +
          `üë• Total Invited: <b>${totalInvited}</b>\n` +
          `‚úÖ Active Now: <b>${activeNow}</b>\n` +
          `üí∞ Current Balance: <b>${currentBalance.toLocaleString()} MAI</b>\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üí° <b>HOW IT WORKS:</b>\n\n` +
          `1Ô∏è‚É£ Share your referral link\n` +
          `2Ô∏è‚É£ Friend subscribes to BOTH channels:\n` +
          `   ‚Ä¢ @mainingmai_news\n` +
          `   ‚Ä¢ @mainingmai_chat\n` +
          `3Ô∏è‚É£ You get <b>+1,000 MAI</b> üéÅ\n\n` +
          `‚ö†Ô∏è If friend unsubscribes from ANY channel:\n` +
          `   ‚Ä¢ You lose <b>-1,000 MAI</b>\n\n` +
          `‚úÖ If friend resubscribes:\n` +
          `   ‚Ä¢ You get <b>+1,000 MAI</b> again!\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `üí∏ <b>Reward Distribution:</b>\n` +
          `Within 10 days after token listing\n\n` +
          `üéØ Start sharing and earn MAI tokens! üöÄ`,
          { parse_mode: 'HTML' }
        );

        console.log(`‚úÖ –ö–æ—à–µ–ª—ë–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –ø–æ–∫–∞–∑–∞–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è ${userId}`);
        return;
      }
    } 
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏–ª–∏ –Ω–µ –∂–¥–µ—Ç –∫–æ—à–µ–ª–µ–∫ - –≤—ã—Ö–æ–¥
    if (!userStatus) {
      console.log('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ');
      return;
    }
    
    // –ú–û–î–ï–†–ê–¶–ò–Ø
    if (userStatus.banned) {
      await ctx.deleteMessage();
      return;
    }
    
    if (userStatus.muted_until && new Date() < new Date(userStatus.muted_until)) {
      await ctx.deleteMessage();
      return;
    }
    
    if (containsBadContent(text)) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);

      if (warnings >= config.WARN_LIMIT) {
        // –ë–∞–Ω –≤ –æ–±–æ–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤–∞—Ä–Ω–∏–Ω–≥–æ–≤
        await banUser(userId, `Reached ${config.WARN_LIMIT} warnings for forbidden content`, config.CHAT_CHANNEL_ID);
        try {
          await bot.telegram.banChatMember(config.NEWS_CHANNEL_ID, userId);
          console.log(`‚úÖ User ${userId} auto-banned in NEWS channel (forbidden content)`);
        } catch (err) {
          console.log(`‚ö†Ô∏è Cannot auto-ban in NEWS channel: ${err.message}`);
        }
        return;
      }

      return ctx.reply(`‚ö†Ô∏è Forbidden content detected! Warning ${warnings}/${config.WARN_LIMIT}. Next violation = BAN.`);
    }

    if (containsSpamLinks(text)) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);

      if (warnings >= config.WARN_LIMIT) {
        // –ë–∞–Ω –≤ –æ–±–æ–∏—Ö –∫–∞–Ω–∞–ª–∞—Ö –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –≤–∞—Ä–Ω–∏–Ω–≥–æ–≤
        await banUser(userId, `Reached ${config.WARN_LIMIT} warnings for spam links`, config.CHAT_CHANNEL_ID);
        try {
          await bot.telegram.banChatMember(config.NEWS_CHANNEL_ID, userId);
          console.log(`‚úÖ User ${userId} auto-banned in NEWS channel (spam links)`);
        } catch (err) {
          console.log(`‚ö†Ô∏è Cannot auto-ban in NEWS channel: ${err.message}`);
        }
        return;
      }

      return ctx.reply(`‚ö†Ô∏è Unauthorized links forbidden! Warning ${warnings}/${config.WARN_LIMIT}. Next violation = BAN.`);
    }
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞:', error.message);
    console.error('Stack:', error.stack);
  }
});

cron.schedule('0 0 * * *', async () => {
  console.log('‚è∞ CRON: –ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ (00:00 UTC)');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å –ø–æ–∑–∏—Ü–∏–µ–π, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
    const users = await pool.query(
      'SELECT telegram_id, position, username FROM telegram_users WHERE position IS NOT NULL AND banned = false ORDER BY position ASC'
    );
    
    console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º ${users.rows.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∑–∏—Ü–∏–µ–π`);
    
    let removedCount = 0;
    const removedUsers = []; // –ú–∞—Å—Å–∏–≤ –ø–æ—Ç–µ—Ä—è–≤—à–∏—Ö –ø–æ–∑–∏—Ü–∏—é
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for (const user of users.rows) {
      try {
        const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, user.telegram_id);
        const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, user.telegram_id);
        
        // –ï—Å–ª–∏ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –õ–Æ–ë–û–ì–û –∫–∞–Ω–∞–ª–∞ - –£–î–ê–õ–Ø–ï–ú –ü–û–ó–ò–¶–ò–Æ
        if (!newsSubscribed || !chatSubscribed) {
          console.log(`‚ö†Ô∏è –Æ–∑–µ—Ä ${user.telegram_id} (@${user.username}) –ø–æ–∑–∏—Ü–∏—è #${user.position} –æ—Ç–ø–∏—Å–∞–ª—Å—è!`);
          
          const removedPosition = await removePosition(user.telegram_id);
          
          if (removedPosition) {
            removedCount++;
            removedUsers.push({
              userId: user.telegram_id,
              position: removedPosition,
              newsSubscribed: newsSubscribed,
              chatSubscribed: chatSubscribed
            });
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –ë–î
            await updateSubscription(user.telegram_id, newsSubscribed, chatSubscribed);
          }
        } else {
          // –ü–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
          await updateSubscription(user.telegram_id, newsSubscribed, chatSubscribed);
        }
      } catch (err) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —é–∑–µ—Ä–∞ ${user.telegram_id}:`, err.message);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å API)
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`‚úÖ CRON: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: ${removedCount}`);
    
    // –û–¢–ü–†–ê–í–õ–Ø–ï–ú –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
    
    // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ü–û–¢–ï–†–Ø–õ –ø–æ–∑–∏—Ü–∏—é
    for (const removed of removedUsers) {
      try {
        await bot.telegram.sendMessage(
          removed.userId,
          `üö® <b>AIRDROP POSITION LOST!</b>\n\n` +
          `You lost your position #${removed.position} in the airdrop queue.\n\n` +
          `<b>Reason:</b> Unsubscribed from required channels\n` +
          `${!removed.newsSubscribed ? '‚ùå Not subscribed to @mainingmai_news\n' : ''}` +
          `${!removed.chatSubscribed ? '‚ùå Not in community chat @mainingmai_chat\n' : ''}\n\n` +
          `Your spot was given to the next person in line.\n\n` +
          `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
          `<b>Want to register again?</b>\n` +
          `1Ô∏è‚É£ Subscribe to @mainingmai_news\n` +
          `2Ô∏è‚É£ Join community chat @mainingmai_chat\n` +
          `3Ô∏è‚É£ Use /airdrop command\n\n` +
          `‚ö†Ô∏è You'll get a NEW position at the end of the queue.`,
          { parse_mode: 'HTML' }
        );
        console.log(`‚úâÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${removed.userId} (–ø–æ—Ç–µ—Ä—è–ª #${removed.position})`);
      } catch (err) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É ${removed.userId}`);
      }
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
      await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–º, –∫—Ç–æ –ü–û–ü–ê–õ –≤ —Ç–æ–ø-20000
    if (removedCount > 0) {
      try {
        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∫—Ç–æ —Ç–µ–ø–µ—Ä—å –≤ –ø–æ–∑–∏—Ü–∏–∏ <= 20000 –ò –∫—Ç–æ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ–ø–∞–ª —Ç—É–¥–∞
        // (–∏—Ö position + removedCount –±—ã–ª–æ > 20000, –∞ —Å–µ–π—á–∞—Å <= 20000)
        const newWinners = await pool.query(
          `SELECT telegram_id, position, username 
           FROM telegram_users 
           WHERE position IS NOT NULL 
           AND position <= $1 
           AND position > $2
           ORDER BY position DESC`,
          [config.AIRDROP_LIMIT, config.AIRDROP_LIMIT - removedCount]
        );
        
        console.log(`üéâ –ù–æ–≤—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤ —Ç–æ–ø-${config.AIRDROP_LIMIT}: ${newWinners.rows.length}`);
        
        for (const winner of newWinners.rows) {
          try {
            await bot.telegram.sendMessage(
              winner.userId,
              `üéâ <b>CONGRATULATIONS!</b>\n\n` +
              `You're now in position <b>#${winner.position}</b>!\n\n` +
              `Someone lost their spot and you moved up into the top ${config.AIRDROP_LIMIT.toLocaleString()}.\n\n` +
              `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n` +
              `‚úÖ <b>You're now eligible for the airdrop!</b>\n` +
              `üéÅ Reward: <b>${config.AIRDROP_REWARD.toLocaleString()} MAI tokens</b>\n\n` +
              `‚ö†Ô∏è <b>IMPORTANT:</b>\n` +
              `Stay subscribed to @mainingmai_news and @mainingmai_chat until listing to keep your reward!\n\n` +
              `Use /status to check your details.`,
              { parse_mode: 'HTML' }
            );
            console.log(`‚úâÔ∏è –ü–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —é–∑–µ—Ä—É ${winner.telegram_id} (–ø–æ–∑–∏—Ü–∏—è #${winner.position})`);
          } catch (err) {
            console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ —é–∑–µ—Ä—É ${winner.telegram_id}`);
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π
          await new Promise(resolve => setTimeout(resolve, 50));
        }
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π:', err.message);
      }
    }
    
    console.log('üèÅ CRON: –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.');
    
  } catch (error) {
    console.error('‚ùå CRON: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('Stack:', error.stack);
  }
});

bot.launch({
  dropPendingUpdates: true,
  allowedUpdates: ['message', 'chat_member', 'callback_query', 'my_chat_member']
}).then(() => {
  if (config.ADMIN_IDS[0]) {
    bot.telegram.sendMessage(config.ADMIN_IDS[0], '‚úÖ MAI Bot v2.2 Professional - Group & PM modes active with chat_member tracking!').catch(() => {});
  }
}).catch(() => {
  process.exit(1);
});

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));