// ==================== MAI TELEGRAM BOT ====================
// –ú–æ–¥–µ—Ä–∞—Ü–∏—è —á–∞—Ç–∞ + Airdrop —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è + –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫
// –ê–≤—Ç–æ—Ä: MAI Project Team

const { Telegraf } = require('telegraf');
const { message } = require('telegraf/filters');
const { Pool } = require('pg');
const cron = require('node-cron');

// ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
const config = {
  BOT_TOKEN: process.env.BOT_TOKEN,
  NEWS_CHANNEL_ID: process.env.NEWS_CHANNEL_ID,
  CHAT_CHANNEL_ID: process.env.CHAT_CHANNEL_ID,
  ADMIN_IDS: process.env.ADMIN_IDS ? process.env.ADMIN_IDS.split(',').map(id => parseInt(id)) : [],
  
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ airdrop
  AIRDROP_REWARD: 5000,
  AIRDROP_LIMIT: 20000,
  
  // –ú–æ–¥–µ—Ä–∞—Ü–∏—è
  MESSAGE_INTERVAL: 10000, // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  WARN_LIMIT: 3,
  REPORT_MUTE_LIMIT: 10,
  REPORT_BAN_LIMIT: 20,
  
  // –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –¥–æ–º–µ–Ω—ã
  ALLOWED_DOMAINS: ['miningmai.com', 'www.miningmai.com', 't.me/mai'],
};

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
async function initDatabase() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS telegram_users (
        id SERIAL PRIMARY KEY,
        telegram_id BIGINT UNIQUE NOT NULL,
        username VARCHAR(255),
        first_name VARCHAR(255),
        wallet_address VARCHAR(44),
        registered_at TIMESTAMP DEFAULT NOW(),
        is_subscribed_news BOOLEAN DEFAULT true,
        is_subscribed_chat BOOLEAN DEFAULT true,
        last_check TIMESTAMP DEFAULT NOW(),
        warnings INT DEFAULT 0,
        reports_received INT DEFAULT 0,
        banned BOOLEAN DEFAULT false,
        muted_until TIMESTAMP NULL,
        reward_amount INT DEFAULT 5000,
        claimed BOOLEAN DEFAULT false,
        position INT
      );
      
      CREATE INDEX IF NOT EXISTS idx_telegram_id ON telegram_users(telegram_id);
      CREATE INDEX IF NOT EXISTS idx_wallet ON telegram_users(wallet_address);
      CREATE INDEX IF NOT EXISTS idx_position ON telegram_users(position);
      
      CREATE TABLE IF NOT EXISTS user_messages (
        user_id BIGINT,
        message_time TIMESTAMP DEFAULT NOW()
      );
      
      CREATE INDEX IF NOT EXISTS idx_user_messages ON user_messages(user_id, message_time);
    `);
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î:', error);
  }
}

// ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function checkSubscription(bot, channelId, userId) {
  try {
    const member = await bot.telegram.getChatMember(channelId, userId);
    return ['member', 'administrator', 'creator'].includes(member.status);
  } catch (error) {
    return false;
  }
}

// –í–∞–ª–∏–¥–∞—Ü–∏—è Solana –∞–¥—Ä–µ—Å–∞
function isValidSolanaAddress(address) {
  return /^[1-9A-HJ-NP-Za-km-z]{32,44}$/.test(address);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function containsBadContent(text) {
  const bannedPatterns = [
    /casino/i, /porn/i, /18\+/i, /xxx/i,
    /buy.*get.*free/i, /send.*receive/i,
    /seed\s*phrase/i, /private\s*key/i, /recovery\s*phrase/i,
    /dm\s*me/i, /write\s*me/i, /contact\s*admin/i,
    /pump/i, /dump/i, /rug/i, /scam/i
  ];
  
  return bannedPatterns.some(pattern => pattern.test(text));
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-—Å—Å—ã–ª–æ–∫
function containsSpamLinks(text) {
  const urlRegex = /(https?:\/\/[^\s]+)/g;
  const urls = text.match(urlRegex) || [];
  
  for (const url of urls) {
    const isAllowed = config.ALLOWED_DOMAINS.some(domain => url.includes(domain));
    if (!isAllowed) return true;
  }
  return false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª—É–¥–∞
async function checkFlood(userId) {
  try {
    const tenSecondsAgo = new Date(Date.now() - config.MESSAGE_INTERVAL);
    
    const result = await pool.query(
      'SELECT COUNT(*) FROM user_messages WHERE user_id = $1 AND message_time > $2',
      [userId, tenSecondsAgo]
    );
    
    const messageCount = parseInt(result.rows[0].count);
    
    await pool.query(
      'INSERT INTO user_messages (user_id, message_time) VALUES ($1, NOW())',
      [userId]
    );
    
    await pool.query(
      'DELETE FROM user_messages WHERE message_time < $1',
      [new Date(Date.now() - 60000)]
    );
    
    return messageCount > 0;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–ª—É–¥–∞:', error);
    return false;
  }
}

// ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• - –§–£–ù–ö–¶–ò–ò ====================

async function registerUser(userId, username, firstName) {
  try {
    const countResult = await pool.query(
      'SELECT COUNT(*) FROM telegram_users WHERE position IS NOT NULL'
    );
    const currentCount = parseInt(countResult.rows[0].count);
    
    if (currentCount >= config.AIRDROP_LIMIT) {
      return { success: false, reason: 'limit_reached' };
    }
    
    const result = await pool.query(
      `INSERT INTO telegram_users (telegram_id, username, first_name, position)
       VALUES ($1, $2, $3, $4)
       ON CONFLICT (telegram_id) 
       DO UPDATE SET username = $2, first_name = $3
       RETURNING *`,
      [userId, username, firstName, currentCount + 1]
    );
    
    return { success: true, user: result.rows[0] };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return { success: false, reason: 'database_error' };
  }
}

async function updateWallet(userId, walletAddress) {
  try {
    await pool.query(
      'UPDATE telegram_users SET wallet_address = $1 WHERE telegram_id = $2',
      [walletAddress, userId]
    );
    return true;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:', error);
    return false;
  }
}

async function getUserStatus(userId) {
  try {
    const result = await pool.query(
      'SELECT * FROM telegram_users WHERE telegram_id = $1',
      [userId]
    );
    return result.rows[0] || null;
  } catch (error) {
    return null;
  }
}

async function updateSubscription(userId, newsSubscribed, chatSubscribed) {
  try {
    await pool.query(
      `UPDATE telegram_users 
       SET is_subscribed_news = $1, is_subscribed_chat = $2, last_check = NOW()
       WHERE telegram_id = $3`,
      [newsSubscribed, chatSubscribed, userId]
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error);
  }
}

async function addWarning(userId) {
  try {
    const result = await pool.query(
      `UPDATE telegram_users SET warnings = warnings + 1
       WHERE telegram_id = $1 RETURNING warnings`,
      [userId]
    );
    return result.rows[0]?.warnings || 0;
  } catch (error) {
    return 0;
  }
}

async function addReport(userId) {
  try {
    const result = await pool.query(
      `UPDATE telegram_users SET reports_received = reports_received + 1
       WHERE telegram_id = $1 RETURNING reports_received`,
      [userId]
    );
    return result.rows[0]?.reports_received || 0;
  } catch (error) {
    return 0;
  }
}

async function banUser(userId) {
  try {
    await pool.query(
      'UPDATE telegram_users SET banned = true WHERE telegram_id = $1',
      [userId]
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –±–∞–Ω–∞:', error);
  }
}

async function muteUser(userId, hours = 24) {
  try {
    const muteUntil = new Date(Date.now() + hours * 60 * 60 * 1000);
    await pool.query(
      'UPDATE telegram_users SET muted_until = $1 WHERE telegram_id = $2',
      [muteUntil, userId]
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º—É—Ç–∞:', error);
  }
}

// ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ====================
const bot = new Telegraf(config.BOT_TOKEN);

initDatabase();

// ==================== –ö–û–ú–ê–ù–î–´ ====================

// /start
bot.start(async (ctx) => {
  const welcomeMessage = `
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MAI Project!*

–Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏ –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–µ–∫—Ç–∞ MAI.

*üéÅ Airdrop 5,000 MAI —Ç–æ–∫–µ–Ω–æ–≤!*
–ü–µ—Ä–≤—ã–µ ${config.AIRDROP_LIMIT.toLocaleString()} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–ª—É—á–∞—Ç –Ω–∞–≥—Ä–∞–¥—É!

*üìù –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å:*
1Ô∏è‚É£ /airdrop - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
2Ô∏è‚É£ /wallet - –ü—Ä–∏–≤—è–∑–∞—Ç—å Solana –∫–æ—à–µ–ª—ë–∫
3Ô∏è‚É£ –û—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –¥–æ –ª–∏—Å—Ç–∏–Ω–≥–∞

*üí¨ –ö–æ–º–∞–Ω–¥—ã:*
/airdrop - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ airdrop
/wallet - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/verify - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—á–∞—Å—Ç–∏—è
/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞
/help - –ü–æ–º–æ—â—å

*‚ö†Ô∏è –í–∞–∂–Ω–æ:* –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ —á–∞—Ç–µ!
  `;
  
  await ctx.reply(welcomeMessage, { parse_mode: 'Markdown' });
});

// /airdrop
bot.command('airdrop', async (ctx) => {
  const userId = ctx.from.id;
  const username = ctx.from.username || 'no_username';
  const firstName = ctx.from.first_name;
  
  try {
    const userStatus = await getUserStatus(userId);
    
    if (userStatus?.banned) {
      return ctx.reply('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å.');
    }
    
    if (userStatus && userStatus.position) {
      return ctx.reply(
        `‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n` +
        `üé´ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: *${userStatus.position}* –∏–∑ ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
        `üéÅ –ù–∞–≥—Ä–∞–¥–∞: ${config.AIRDROP_REWARD.toLocaleString()} MAI\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π`,
        { parse_mode: 'Markdown' }
      );
    }
    
    const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, userId);
    const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, userId);
    
    if (!newsSubscribed) {
      return ctx.reply(
        '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π!\n' +
        'üëâ @mai_news',
        { parse_mode: 'Markdown' }
      );
    }
    
    if (!chatSubscribed) {
      return ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞!');
    }
    
    const registration = await registerUser(userId, username, firstName);
    
    if (!registration.success) {
      if (registration.reason === 'limit_reached') {
        return ctx.reply(
          `‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ ${config.AIRDROP_LIMIT.toLocaleString()} –º–µ—Å—Ç –∑–∞–Ω—è—Ç—ã!\n\n` +
          `–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ —Å–ª–µ–¥—É—é—â–∏—Ö airdrop'–∞—Ö!`
        );
      }
      return ctx.reply('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    
    await ctx.reply(
      `‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*\n\n` +
      `üé´ –í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è: *${registration.user.position}* –∏–∑ ${config.AIRDROP_LIMIT.toLocaleString()}\n` +
      `üéÅ –ù–∞–≥—Ä–∞–¥–∞: *${config.AIRDROP_REWARD.toLocaleString()} MAI*\n\n` +
      `‚ö†Ô∏è *–í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:*\n` +
      `‚Ä¢ –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ –≤ —á–∞—Ç–µ\n` +
      `‚Ä¢ –ü—Ä–∏–≤—è–∂–∏—Ç–µ Solana –∫–æ—à–µ–ª—ë–∫: /wallet\n` +
      `‚Ä¢ –ù–µ –Ω–∞—Ä—É—à–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n` +
      `‚Ä¢ –û—Ç–ø–∏—Å–∫–∞ = –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ airdrop\n\n` +
      `üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00 UTC\n` +
      `üí∞ –í—ã–¥–∞—á–∞ —Ç–æ–∫–µ–Ω–æ–≤: –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –¥–Ω–µ–π –ø–æ—Å–ª–µ –ª–∏—Å—Ç–∏–Ω–≥–∞`,
      { parse_mode: 'Markdown' }
    );
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /airdrop:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// /wallet
bot.command('wallet', async (ctx) => {
  const userId = ctx.from.id;
  const userStatus = await getUserStatus(userId);
  
  if (!userStatus || !userStatus.position) {
    return ctx.reply(
      '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ airdrop!\n\n' +
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /airdrop'
    );
  }
  
  const args = ctx.message.text.split(' ');
  
  if (args.length < 2) {
    const currentWallet = userStatus.wallet_address;
    return ctx.reply(
      `üíº *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–º*\n\n` +
      `${currentWallet ? `‚úÖ –¢–µ–∫—É—â–∏–π –∫–æ—à–µ–ª—ë–∫:\n\`${currentWallet}\`\n\n` : '‚ùå –ö–æ—à–µ–ª—ë–∫ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω\n\n'}` +
      `üìù –ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—à–µ–ª—ë–∫:\n` +
      `/wallet YOUR_SOLANA_ADDRESS\n\n` +
      `–ü—Ä–∏–º–µ—Ä:\n` +
      `/wallet 7xK3N9kZXxY2pQwM5vH8...`,
      { parse_mode: 'Markdown' }
    );
  }
  
  const walletAddress = args[1].trim();
  
  if (!isValidSolanaAddress(walletAddress)) {
    return ctx.reply(
      '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Solana –∞–¥—Ä–µ—Å–∞!\n\n' +
      'Solana –∞–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 32-44 —Å–∏–º–≤–æ–ª–∞ (base58)'
    );
  }
  
  const updated = await updateWallet(userId, walletAddress);
  
  if (updated) {
    await ctx.reply(
      `‚úÖ *–ö–æ—à–µ–ª—ë–∫ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\n` +
      `üíº –ê–¥—Ä–µ—Å:\n\`${walletAddress}\`\n\n` +
      `üéÅ –ù–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${config.AIRDROP_REWARD.toLocaleString()} MAI —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ –ª–∏—Å—Ç–∏–Ω–≥–∞!`,
      { parse_mode: 'Markdown' }
    );
  } else {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// /status
bot.command('status', async (ctx) => {
  const userId = ctx.from.id;
  
  try {
    const userStatus = await getUserStatus(userId);
    
    if (!userStatus || !userStatus.position) {
      return ctx.reply(
        '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ airdrop!\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /airdrop –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'
      );
    }
    
    const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, userId);
    const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, userId);
    
    if (newsSubscribed !== userStatus.is_subscribed_news || chatSubscribed !== userStatus.is_subscribed_chat) {
      await updateSubscription(userId, newsSubscribed, chatSubscribed);
    }
    
    const statusEmoji = (newsSubscribed && chatSubscribed) ? '‚úÖ' : '‚ùå';
    const rewardAmount = (newsSubscribed && chatSubscribed && !userStatus.banned) 
      ? config.AIRDROP_REWARD.toLocaleString() 
      : '0';
    
    const statusMessage = `
üìä *–í–∞—à —Å—Ç–∞—Ç—É—Å Airdrop*\n
üë§ Username: @${userStatus.username}
üé´ –ü–æ–∑–∏—Ü–∏—è: *${userStatus.position}* –∏–∑ ${config.AIRDROP_LIMIT.toLocaleString()}
üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(userStatus.registered_at).toLocaleDateString('ru-RU')}

üì∫ –ü–æ–¥–ø–∏—Å–∫–∏:
${newsSubscribed ? '‚úÖ' : '‚ùå'} –ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π
${chatSubscribed ? '‚úÖ' : '‚ùå'} –ß–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞

üíº –ö–æ—à–µ–ª—ë–∫: ${userStatus.wallet_address ? `\`${userStatus.wallet_address}\`` : '‚ùå –ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}

‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${userStatus.warnings}/${config.WARN_LIMIT}
üìä –ñ–∞–ª–æ–±—ã: ${userStatus.reports_received}
üö´ –°—Ç–∞—Ç—É—Å: ${userStatus.banned ? '‚ùå –ó–∞–±–∞–Ω–µ–Ω' : statusEmoji + ' –ê–∫—Ç–∏–≤–µ–Ω'}

üéÅ *–ù–∞–≥—Ä–∞–¥–∞: ${rewardAmount} MAI*

${!newsSubscribed || !chatSubscribed ? '‚ö†Ô∏è –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!' : ''}
${!userStatus.wallet_address ? 'üíº –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫: /wallet' : ''}
    `;
    
    await ctx.reply(statusMessage, { parse_mode: 'Markdown' });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /status:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞');
  }
});

// /verify
bot.command('verify', async (ctx) => {
  const userId = ctx.from.id;
  const userStatus = await getUserStatus(userId);
  
  if (!userStatus || !userStatus.position) {
    return ctx.reply('‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ airdrop!');
  }
  
  const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, userId);
  const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, userId);
  
  const hasWallet = !!userStatus.wallet_address;
  const isVerified = newsSubscribed && chatSubscribed && hasWallet && !userStatus.banned;
  
  if (isVerified) {
    await ctx.reply(
      `‚úÖ *–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ü–†–û–ô–î–ï–ù–ê!*\n\n` +
      `–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è:\n` +
      `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π\n` +
      `‚úÖ –£—á–∞—Å—Ç–∏–µ –≤ —á–∞—Ç–µ\n` +
      `‚úÖ –ö–æ—à–µ–ª—ë–∫ –ø—Ä–∏–≤—è–∑–∞–Ω\n\n` +
      `üéÅ –í—ã –ø–æ–ª—É—á–∏—Ç–µ ${config.AIRDROP_REWARD.toLocaleString()} MAI –ø–æ—Å–ª–µ –ª–∏—Å—Ç–∏–Ω–≥–∞!`,
      { parse_mode: 'Markdown' }
    );
  } else {
    let issues = [];
    if (!newsSubscribed) issues.push('‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π');
    if (!chatSubscribed) issues.push('‚ùå –í—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç');
    if (!hasWallet) issues.push('‚ùå –ü—Ä–∏–≤—è–∂–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ (/wallet)');
    if (userStatus.banned) issues.push('‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã');
    
    await ctx.reply(
      `‚ö†Ô∏è *–í–ï–†–ò–§–ò–ö–ê–¶–ò–Ø –ù–ï –ü–†–û–ô–î–ï–ù–ê*\n\n` +
      `–£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã:\n${issues.join('\n')}`,
      { parse_mode: 'Markdown' }
    );
  }
});

// /rules
bot.command('rules', async (ctx) => {
  const rulesMessage = `
üìã *–ü–†–ê–í–ò–õ–ê –ß–ê–¢–ê MAI*

‚úÖ *–†–∞–∑—Ä–µ—à–µ–Ω–æ:*
‚Ä¢ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ MAI
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–µ—Å–µ–π–ª–µ, —Ç–æ–∫–µ–Ω–∞—Ö, airdrop
‚Ä¢ –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞
‚Ä¢ –ú–µ–º—ã –ø—Ä–æ –∫—Ä–∏–ø—Ç—É

‚ùå *–ó–ê–ü–†–ï–©–ï–ù–û:*
‚Ä¢ –°–ø–∞–º –∏ —Ñ–ª—É–¥ (> 1 —Å–æ–æ–±—â–µ–Ω–∏–µ/10 —Å–µ–∫)
‚Ä¢ –†–µ–∫–ª–∞–º–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
‚Ä¢ 18+ –∫–æ–Ω—Ç–µ–Ω—Ç
‚Ä¢ –û—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
‚Ä¢ –°–∫–∞–º-—Å—Å—ã–ª–∫–∏
‚Ä¢ –ü—É–±–ª–∏–∫–∞—Ü–∏—è seed —Ñ—Ä–∞–∑/–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
‚Ä¢ "DM me", "Write me in private"

‚ö†Ô∏è *–ù–∞–∫–∞–∑–∞–Ω–∏—è:*
‚Ä¢ 1-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ 2-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
‚Ä¢ 3-–µ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: –ë–ê–ù

üìä *–°–∏—Å—Ç–µ–º–∞ –∂–∞–ª–æ–±:*
‚Ä¢ 10 –∂–∞–ª–æ–± –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π = –ú—É—Ç 24 —á–∞—Å–∞
‚Ä¢ 20 –∂–∞–ª–æ–± = –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω
‚Ä¢ –ñ–∞–ª–æ–±–∞: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ /report

üéÅ *Airdrop 5,000 MAI:*
/airdrop - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–ø–µ—Ä–≤—ã–µ ${config.AIRDROP_LIMIT.toLocaleString()})
  `;
  
  await ctx.reply(rulesMessage, { parse_mode: 'Markdown' });
});

// /report (–∂–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
bot.command('report', async (ctx) => {
  if (!ctx.message.reply_to_message) {
    return ctx.reply('‚ö†Ô∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –∏ –Ω–∞–ø–∏—à–∏—Ç–µ /report');
  }
  
  const reportedUserId = ctx.message.reply_to_message.from.id;
  const reporterId = ctx.from.id;
  
  if (reportedUserId === reporterId) {
    return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è!');
  }
  
  if (config.ADMIN_IDS.includes(reportedUserId)) {
    return ctx.reply('‚ùå –ù–µ–ª—å–∑—è –∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!');
  }
  
  const reports = await addReport(reportedUserId);
  
  await ctx.reply(`‚úÖ –ñ–∞–ª–æ–±–∞ –ø—Ä–∏–Ω—è—Ç–∞. –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${reports} –∂–∞–ª–æ–±.`);
  
  if (reports >= config.REPORT_BAN_LIMIT) {
    await banUser(reportedUserId);
    await ctx.telegram.banChatMember(ctx.chat.id, reportedUserId);
    await ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ ${reports} –∂–∞–ª–æ–± –æ—Ç —Å–æ–æ–±—â–µ—Å—Ç–≤–∞!`);
  } else if (reports >= config.REPORT_MUTE_LIMIT) {
    await muteUser(reportedUserId, 24);
    await ctx.telegram.restrictChatMember(ctx.chat.id, reportedUserId, {
      until_date: Math.floor(Date.now() / 1000) + 86400,
      permissions: { can_send_messages: false }
    });
    await ctx.reply(`‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω –Ω–∞ 24 —á–∞—Å–∞ (${reports} –∂–∞–ª–æ–±)`);
  }
});

// /help
bot.help(async (ctx) => {
  await ctx.reply(
    `üÜò *–ü–æ–º–æ—â—å MAI Bot*\n\n` +
    `*Airdrop:*\n` +
    `/airdrop - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n` +
    `/wallet - –ü—Ä–∏–≤—è–∑–∞—Ç—å –∫–æ—à–µ–ª—ë–∫\n` +
    `/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n` +
    `/verify - –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è\n\n` +
    `*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n` +
    `/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n` +
    `/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n\n` +
    `*–ú–æ–¥–µ—Ä–∞—Ü–∏—è:*\n` +
    `/report - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è (reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n\n` +
    `üåê –°–∞–π—Ç: https://miningmai.com`,
    { parse_mode: 'Markdown' }
  );
});

// –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´
bot.command('stats', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  try {
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total,
        COUNT(*) FILTER (WHERE is_subscribed_news AND is_subscribed_chat) as active,
        COUNT(*) FILTER (WHERE wallet_address IS NOT NULL) as with_wallet,
        COUNT(*) FILTER (WHERE banned = true) as banned
      FROM telegram_users WHERE position IS NOT NULL
    `);
    
    const s = stats.rows[0];
    
    await ctx.reply(
      `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Airdrop*\n\n` +
      `üë• –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${s.total}/${config.AIRDROP_LIMIT}\n` +
      `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${s.active}\n` +
      `üíº –° –∫–æ—à–µ–ª—å–∫–∞–º–∏: ${s.with_wallet}\n` +
      `üö´ –ó–∞–±–∞–Ω–µ–Ω–æ: ${s.banned}\n\n` +
      `üí∞ –í—Å–µ–≥–æ –∫ –≤—ã–¥–∞—á–µ: ${(s.active * config.AIRDROP_REWARD).toLocaleString()} MAI`,
      { parse_mode: 'Markdown' }
    );
  } catch (error) {
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

bot.command('winners', async (ctx) => {
  if (!config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  try {
    const winners = await pool.query(`
      SELECT telegram_id, username, wallet_address, position
      FROM telegram_users
      WHERE is_subscribed_news = true 
        AND is_subscribed_chat = true
        AND wallet_address IS NOT NULL
        AND banned = false
        AND position IS NOT NULL
      ORDER BY position ASC
    `);
    
    let csv = 'Position,Telegram_ID,Username,Wallet_Address,Reward\n';
    winners.rows.forEach(w => {
      csv += `${w.position},${w.telegram_id},@${w.username},${w.wallet_address},${config.AIRDROP_REWARD}\n`;
    });
    
    await ctx.replyWithDocument({
      source: Buffer.from(csv),
      filename: `mai_airdrop_winners_${Date.now()}.csv`
    });
    
    await ctx.reply(
      `‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${winners.rows.length} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n` +
      `üí∞ –í—Å–µ–≥–æ –∫ –≤—ã–¥–∞—á–µ: ${(winners.rows.length * config.AIRDROP_REWARD).toLocaleString()} MAI`
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ /winners:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞');
  }
});

// ==================== –ú–û–î–ï–†–ê–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ====================
bot.on(message('text'), async (ctx) => {
  if (config.ADMIN_IDS.includes(ctx.from.id)) return;
  
  const userId = ctx.from.id;
  const text = ctx.message.text;
  
  try {
    const userStatus = await getUserStatus(userId);
    
    if (userStatus?.banned) {
      await ctx.deleteMessage();
      return;
    }
    
    if (userStatus?.muted_until && new Date() < new Date(userStatus.muted_until)) {
      await ctx.deleteMessage();
      return;
    }
    
    const isFlood = await checkFlood(userId);
    if (isFlood) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);
      
      if (warnings >= config.WARN_LIMIT) {
        await banUser(userId);
        await ctx.telegram.banChatMember(ctx.chat.id, userId);
        return ctx.reply(`üö´ ${ctx.from.first_name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Ñ–ª—É–¥!`);
      }
      
      return ctx.reply(
        `‚ö†Ô∏è @${ctx.from.username || ctx.from.first_name}, –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ! ` +
        `–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: 1 —Å–æ–æ–±—â–µ–Ω–∏–µ/10 —Å–µ–∫. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${warnings}/${config.WARN_LIMIT}`,
        { reply_to_message_id: ctx.message.message_id }
      );
    }
    
    if (containsBadContent(text)) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);
      
      if (warnings >= config.WARN_LIMIT) {
        await banUser(userId);
        await ctx.telegram.banChatMember(ctx.chat.id, userId);
        return ctx.reply(`üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!`);
      }
      
      return ctx.reply(
        `‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ! –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. ` +
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${warnings}/${config.WARN_LIMIT}`
      );
    }
    
    if (containsSpamLinks(text)) {
      await ctx.deleteMessage();
      const warnings = await addWarning(userId);
      
      if (warnings >= config.WARN_LIMIT) {
        await banUser(userId);
        await ctx.telegram.banChatMember(ctx.chat.id, userId);
        return ctx.reply(`üö´ –ó–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º-—Å—Å—ã–ª–∫–∏!`);
      }
      
      return ctx.reply(
        `‚ö†Ô∏è –°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã! ` +
        `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ ${warnings}/${config.WARN_LIMIT}`
      );
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:', error);
  }
});

// ==================== –ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–û–ö ====================
cron.schedule('0 0 * * *', async () => {
  console.log('üîÑ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...');
  
  try {
    const users = await pool.query(
      'SELECT telegram_id FROM telegram_users WHERE position IS NOT NULL AND banned = false'
    );
    
    let unsubscribedCount = 0;
    
    for (const user of users.rows) {
      try {
        const newsSubscribed = await checkSubscription(bot, config.NEWS_CHANNEL_ID, user.telegram_id);
        const chatSubscribed = await checkSubscription(bot, config.CHAT_CHANNEL_ID, user.telegram_id);
        
        if (!newsSubscribed || !chatSubscribed) {
          await updateSubscription(user.telegram_id, newsSubscribed, chatSubscribed);
          unsubscribedCount++;
          console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.telegram_id} –æ—Ç–ø–∏—Å–∞–ª—Å—è`);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ${user.telegram_id}:`, error);
      }
      
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø–∏—Å–∞–ª–æ—Å—å: ${unsubscribedCount}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error);
  }
});

// ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================
bot.launch()
  .then(() => {
    console.log('‚úÖ MAI Telegram Bot –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:`);
    console.log(`   - –ö–∞–Ω–∞–ª –Ω–æ–≤–æ—Å—Ç–µ–π: ${config.NEWS_CHANNEL_ID}`);
    console.log(`   - –ß–∞—Ç: ${config.CHAT_CHANNEL_ID}`);
    console.log(`   - –ê–¥–º–∏–Ω—ã: ${config.ADMIN_IDS.join(', ')}`);
    console.log(`   - –õ–∏–º–∏—Ç airdrop: ${config.AIRDROP_LIMIT}`);
    console.log(`   - –ù–∞–≥—Ä–∞–¥–∞: ${config.AIRDROP_REWARD} MAI`);
  })
  .catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
    process.exit(1);
  });

process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));